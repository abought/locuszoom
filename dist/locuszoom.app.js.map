{"version":3,"sources":["LocusZoom.js","Layouts.js","DataLayer.js","annotation_track.js","forest.js","genes.js","genome_legend.js","intervals.js","line.js","scatter.js","Singletons.js","Dashboard.js","Legend.js","Data.js","Plot.js","Panel.js"],"names":["LocusZoom","version","populate","selector","datasource","layout","Error","d3","select","html","plot","call","node","id","iterator","empty","attr","Plot","container","dataset","region","parsed_state","parsePositionQuery","Object","keys","forEach","key","state","svg","append","style","setDimensions","positionPanels","initialize","length","refresh","populateAll","plots","selectAll","each","d","i","positionIntToString","pos","exp","suffix","exp_symbols","isNaN","log","Math","LN10","min","max","places_exp","floor","toFixed","min_exp","places","ret","pow","positionStringToInt","p","val","toUpperCase","replace","suffixre","exec","mult","Number","x","chrposoff","chrpos","match","center","offset","chr","start","end","position","prettyTicks","range","clip_range","target_tick_count","parseInt","min_n","shrink_sml","high_u_bias","u5_bias","abs","c","base","base_toFixed","round","unit","ticks","parseFloat","push","indexOf","slice","pop","createCORSPromise","method","url","body","headers","timeout","Promise","resolve","reject","xhr","XMLHttpRequest","open","XDomainRequest","onreadystatechange","readyState","status","response","setTimeout","header","setRequestHeader","send","_updateStatePosition","new_state","validated_region","attempted_midpoint","attempted_scale","temp","min_region_scale","max_region_scale","parseFields","data","tokens","regex","m","text","index","condition","variable","close","console","error","JSON","stringify","astify","token","shift","then","ast","cache","hasOwnProperty","Data","Field","render_node","value","map","join","getToolTipData","parentNode","classed","getToolTipDataLayer","getDataLayer","getToolTipPanel","data_layer","parent","getToolTipPlot","panel","generateCurtain","curtain","showing","content_selector","hide_delay","show","content","css","parent_plot","insert","on","hide","bind","update","clearTimeout","page_origin","getPageOrigin","top","y","left","width","height","delay","remove","generateLoader","loader","progress_selector","cancel_selector","percent","padding","loader_boundrect","getBoundingClientRect","animate","setPercentCompleted","subclass","extra","Sub","constructor","apply","arguments","prototype","create","k","ext","LZ_SIG_THRESHOLD_LOGP","Layouts","obj","layouts","get","type","name","modifications","merge","unnamespaced","parse","default_namespace","namespace","default","toString","applyNamespaces","element","re","resolved_namespace","r","merge_namespace","namespaced_element","namespaced_property","property","set","add","list","custom_layout","default_layout","custom_type","default_type","Array","isArray","closable","or","and","covariates_model_association","orientation","fields","z_index","x_axis","field","y_axis","axis","ceiling","point_shape","scale_function","parameters","field_value","else","point_size","color","breaks","values","legend","shape","size","label","class","id_field","upper_buffer","min_extent","behaviors","onmouseover","action","onmouseout","onclick","exclusive","onshiftclick","tooltip","l","fill_opacity","catalog","tooltip_positioning","category_field","lower_buffer","categories","null_value","spacing","lines","filters","operator","start_field","end_field","track_split_field","split_tracks","always_hide_legend","button_html","show_selected","button_title","state_field","options","display_name","components","group_position","title","subtitle","covariates_model_plot_dashboard","region_nav_plot_dashboard","step","min_width","min_height","proportional_width","margin","right","bottom","inner_border","dashboard","axes","label_offset","tick_format","extent","y1","y2","origin","hidden","interaction","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","data_layers","layer_name","default_config_display_name","display","transform","data_layer_id","pad_from_bottom","responsive_resize","panels","proportional_height","StandardLayout","mouse_guide","DataLayer","initialized","layout_idx","Panel","DefaultLayout","_base_layout","state_id","layer_state","_setDefaultState","tooltips","global_statuses","addField","fieldName","transformations","fieldString","status_flags","extra_fields","Statuses","adjectives","verbs","menu_antiverbs","getBaseId","getAbsoluteDataHeight","dataBCR","group","canTransition","transition","panel_boundaries","dragging","panel_id","getElementId","element_id","getElementStatusNodeId","getElementById","applyDataMethods","field_to_match","receive","broadcast_value","lz_match_value","self","undefined","lz_highlight_match","toHTML","deselect","unselectElement","applyCustomDataMethods","clipRect","moveUp","data_layer_ids_by_z_index","resortDataLayers","moveDown","resolveScalableParameter","idx","f","e","ScaleFunctions","_getDataExtent","axis_config","getAxisExtent","dimension","axis_name","axis_layout","data_extent","original_extent_span","range_min","range_max","getTicks","config","createTooltip","positionTooltip","arrow","updateTooltip","destroyTooltip","element_or_id","temporary","label_mark_position","splice","destroyAllTooltips","event","pageX","pageY","positionAllTooltips","showOrHideTooltip","first_time","resolveStatus","statuses","directive","reduce","previousValue","currentValue","sub_status","sub_operator","show_directive","hide_directive","antistatus","show_resolved","hide_resolved","has_tooltip","tooltip_was_closed","filter","return_type","test","operators","a","b","matches","filterIndexes","filterElements","verb","adjective","antiverb","setElementStatus","setElementStatusByFilters","setAllElementStatus","active","get_element_id_error","element_status_node_id","element_status_idx","added_status","emit","is_selected","value_to_broadcast","toggle","status_ids","setElementAnnotation","getElementAnnotation","applyBehaviors","selection","event_match","executeBehaviors","requiredKeyStates","ctrl","ctrlKey","shiftKey","behavior","current_status_boolean","href","target","window","location","panel_origin","exportData","format","default_format","toLowerCase","warn","jsonified","delimiter","record","applyAllElementStatus","draw","cliparea","reMap","promise","lzd","getData","new_data","DataLayers","datalayers","datalayer","extend","parent_name","overrides","child","hit_area_width","render","trackData","visible_lines_group","enter","exit","hit_areas_group","hit_areas_selection","_getX","x_center","x_left","left_node","left_node_x_center","crds","arrow_type","arrow_top","arrow_left","arrow_width","stroke_width","tooltip_box","data_layer_height","data_layer_width","x_scale","y_center","offset_right","offset_left","top_offset","mouse","confidence_intervals","show_no_significance_line","border_radius","y_scale","sqrt","PI","ci_selection","ci_transform","ci_width","ci_height","duration","ease","points_selection","initial_y","fill","symbol","element_data","ci_config","axis_num","item","field_to_add","stroke","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","getTrackHeight","transcript_idx","tracks","gene_track_index","assignTracks","getLabelWidth","gene_name","font_size","temp_text","label_width","getBBox","g","gene_id","split","gene_version","transcript_id","transcripts","display_range","text_anchor","centered_margin","display_domain","invert","track","potential_track","collision_on_potential_track","placed_gene","min_start","max_end","t","exons","gene","bboxes","boundary_fill","boundary_stroke","boundaries","labels","strand","exon_fill","exon_stroke","exon_id","clickareas","gene_bbox_id","gene_bbox","gene_center_x","chromosome_fill_colors","light","dark","chromosome_label_colors","genome_start","genome_end","chromosomes","variant_parts","variant","track_split_order","track_split_legend_to_y_axis","track_height","previous_tracks","interval_track_index","track_split_field_index","reverse","placed_interval","psuedoElement","sharedstatusnode_style","interval","statusnode_style","statusnodes","rects","interval_name","updateSplitTrackAxis","interval_bbox","interval_center_x","legend_axis","track_spacing","target_height","scaleHeightToData","toggleSplitTracks","interpolate","hitarea_width","mouse_event","line","tooltip_timeout","getMouseDisplayAndData","slope","x_field","y_field","bisect","bisector","datum","startDatum","endDatum","interpolateNumber","x_precision","toPrecision","y_precision","dd","min_arrow_left","max_arrow_left","path","area","y0","hitarea","hitarea_line","path_class","global_status","decoupled","x_extent","y_extent","x_range","default_y","flip_labels","handle_lines","Boolean","min_x","max_x","flip","dn","dnl","dnx","text_swing","dnlx2","line_swing","label_texts","da","dax","abound","dal","label_lines","db","bbound","collision","separate_labels","seperate_iterations","alpha","again","sign","adjust","new_a_y","new_b_y","min_y","max_y","delta","label_elements","label_line","filtered_data","label_groups","makeLDReference","ref","applyState","ldrefvar","_prepareData","xField","sourceData","sort","ak","bk","av","bv","_generateCategoryBounds","uniqueCategories","category","bounds","categoryNames","_setDynamicColorScheme","_getColorScale","from_source","color_params","find","colorParams","baseParams","parameters_categories_hash","every","colors","color_scale","scale","category10","category20","concat","categoryBounds","_categories","knownCategories","knownColors","xPos","diff","KnownDataSources","sources","findSourceByName","SOURCE_NAME","source","source_name","newObj","params","Function","getAll","setAll","clear","TransformationFunctions","getTrans","fun","parseTrans","parseTransString","funs","result","substring","fn","ceil","toExponential","str","encodeURIComponent","s","functions","input","threshold","prev","curr","nullval","upper_idx","brk","normalized_input","isFinite","Dashboard","hide_timeout","persist","component","Components","shouldPersist","visibility","destroy","force","Component","parent_panel","parent_svg","button","menu","Button","parent_dashboard","tag","setTag","setHtml","setText","setTitle","setColor","setStyle","getClass","permanent","setPermanent","bool","setStatus","highlight","disable","setOnMouseover","setOnMouseout","setOnclick","preUpdate","postUpdate","outer_selector","inner_selector","scroll_position","scrollTop","scrollbar_padding","menu_height_padding","page_scroll_top","document","documentElement","container_offset","getContainerOffset","dashboard_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","base_max_width","container_max_width","content_max_width","base_max_height","max_height","setPopulate","menu_populate_function","div_selector","title_selector","display_width","display_height","generateBase64SVG","old","URL","revokeObjectURL","filename","css_string","stylesheet","styleSheets","outerHTML","dy","initial_html","style_def","insert_at","Blob","createObjectURL","suppress_confirm","confirm","removePanel","is_at_top","y_index","is_at_bottom","panel_ids_by_y_index","can_zoom","current_region_scale","zoom_factor","new_region_scale","menu_html","model","covariates","CovariatesModel","element_reference","updateComponent","removeByIdx","removeAll","table","covariate","row","cov","scale_timeout","status_adj","status_idx","status_verb","at_top","at_bottom","td","removeDataLayer","allowed_fields","fields_whitelist","dataLayer","dataLayerLayout","defaultConfig","configSlot","_selected_item","uniqueID","random","menuLayout","renderRow","display_options","row_id","radioId","field_name","defaultName","Legend","background_rect","elements","elements_group","label_size","line_height","label_x","label_y","path_y","symbolTypes","radius","bcr","right_x","pad_from_right","validateBuildSource","class_name","build","DataSources","addSource","ns","dsobj","source_id","getSource","removeSource","fromJSON","ds","toJSON","parts","full_name","applyTransformations","Requester","split_requests","requests","raw","trans","outnames","request_handles","discrete","Source","enableCache","dependentSource","parseInit","init","getCacheKey","chain","getURL","fetchRequest","getRequest","req","cacheKey","_cachedKey","_cachedResponse","preGetData","pre","resp","parseResponse","normalizeResponse","N","sameLength","records","j","prepareData","annotateData","extractFields","fieldFound","output_record","v","combineChainBody","json","standardized","one_source_body","new_body","parseArraysToObjects","standard","parseObjectsToObjects","parseData","constructorFun","uniqueName","getPrototypeOf","AssociationSource","unshift","analysis","LDSource","findMergeFields","exactMatch","arr","regexes","dataFields","position_field","pvalue","pvalue_field","_names_","names","nameMatch","id_match","RegExp","findRequestedFields","isrefvarin","isrefvarout","ldin","ldout","getRefvar","findExtremeValue","pval_field","is_log","cmp","extremeVal","extremeIdx","reqFields","refVar","columns","refSource","ldrefsource","leftJoin","lfield","rfield","position2","tagRefVariant","refvar","idfield","outrefname","outldname","corrField","rsquare","LDSource2","genome_build","ld_source","population","ld_pop","combined","chainRequests","payload","next","GwasCatalog","build_option","default_source","knownFields","posMatch","decider","decider_out","n_matches","outn","chainNames","catNames","GeneSource","GeneConstraintSource","unique_gene_names","acc","query","alias","constraint","RecombinationRateSource","IntervalSource","bedtracksource","StaticSource","_data","PheWASSource","ConnectorSource","_source_name_mapping","specified_ids","REQUIRED_SOURCES","chain_source_id","applyPanelYIndexesToPanelLayouts","pid","remap_promises","window_onresize","event_hooks","hook","off","theseHooks","hookMatch","eventData","sourceID","hookToRun","eventContext","bounding_client_rect","x_offset","scrollLeft","y_offset","offsetParent","offsetTop","offsetLeft","canInteract","loading_data","zooming","initializeLayout","aspect_ratio","sumProportional","total","rescaleSVG","clientRect","RESIZE_MODES","panel_layout","addPanel","panel_width","panel_height","setOrigin","proportional_origin","clearPanelData","panelId","mode","panelsList","dlid","layer","x_linked_margins","total_proportional_height","proportional_adjustment","calculated_plot_height","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","selectors","corner_selector","panel_idx","panel_resize_drag","drag","this_panel","original_panel_height","panel_height_change","new_calculated_plot_height","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","dx","plot_page_origin","panel_page_origin","corner_padding","corner_size","mouseout_mouse_guide","mousemove_mouse_guide","coords","mouseup","stopDrag","mousemove","preventDefault","dragged_x","start_x","dragged_y","start_y","linked_panel_ids","to_send","client_rect","subscribeToData","success_callback","opts","error_callback","onerror","err","listener","catch","state_changes","mods","all","message","startDrag","getLinkedPanelIds","overrideAxisLayout","axis_number","y_axis_number","generateID","applyDataLayerZIndexesToDataLayerLayouts","data_promises","y1_scale","y2_scale","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","bubble","plot_origin","background_click","y1_linked","y2_linked","panel_count","setMargin","y1_range","y2_range","label_function","data_layer_layout","addDataLayer","clipPath","clearSelections","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","ascending","generateExtents","generateTicks","baseTickConfig","combinedTicks","nextLayer","itemConfig","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","anchor","scalar","current_extent_size","current_scaled_extent_size","potential_extent_size","new_extent_size","offset_ratio","new_x_extent_start","y_shifted","linear","domain","renderAxis","zoom_handler","wheelDelta","detail","deltaY","zoom_listener","zoom","canRender","axis_params","label_rotate","ticksAreAllNumbers","orient","tickPadding","tickValues","tickFormat","substr","tick_selector","tick_mouseover","focus","cursor","dh","addBasicLoader","show_immediately"],"mappings":"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","file":"locuszoom.app.js","sourcesContent":["/**\n * @namespace\n */\nvar LocusZoom = {\n    version: '0.10.2'\n};\n\n/**\n * Populate a single element with a LocusZoom plot.\n * selector can be a string for a DOM Query or a d3 selector.\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot} The newly created plot instance\n */\nLocusZoom.populate = function(selector, datasource, layout) {\n    if (typeof selector == 'undefined') {\n        throw new Error('LocusZoom.populate selector not defined');\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html('');\n    var plot;\n    d3.select(selector).call(function() {\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof this.node().id == 'undefined') {\n            var iterator = 0;\n            while (!d3.select('#lz-' + iterator).empty()) { iterator++; }\n            this.attr('id', '#lz-' + iterator);\n        }\n        // Create the plot\n        plot = new LocusZoom.Plot(this.node().id, datasource, layout);\n        plot.container = this.node();\n        // Detect data-region and fill in state values if present\n        if (typeof this.node().dataset !== 'undefined' && typeof this.node().dataset.region !== 'undefined') {\n            var parsed_state = LocusZoom.parsePositionQuery(this.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key) {\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select('div#' + plot.id)\n            .append('svg')\n            .attr('version', '1.1')\n            .attr('xmlns', 'http://www.w3.org/2000/svg')\n            .attr('id', plot.id + '_svg').attr('class', 'lz-locuszoom')\n            .style(plot.layout.style);\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (typeof datasource == 'object' && Object.keys(datasource).length) {\n            plot.refresh();\n        }\n    });\n    return plot;\n};\n\n/**\n * Populate arbitrarily many elements each with a LocusZoom plot\n *   using a common datasource and layout\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot[]}\n */\nLocusZoom.populateAll = function(selector, datasource, layout) {\n    var plots = [];\n    d3.selectAll(selector).each(function(d,i) {\n        plots[i] = LocusZoom.populate(this, datasource, layout);\n    });\n    return plots;\n};\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {Number} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nLocusZoom.positionIntToString = function(pos, exp, suffix) {\n    var exp_symbols = { 0: '', 3: 'K', 6: 'M', 9: 'G' };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null) {\n        var log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    var places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    var min_exp = Math.min(Math.max(exp, 0), 2);\n    var places = Math.min(Math.max(places_exp, min_exp), 12);\n    var ret = '' + (pos / Math.pow(10, exp)).toFixed(places);\n    if (suffix && typeof exp_symbols[exp] !== 'undefined') {\n        ret += ' ' + exp_symbols[exp] + 'b';\n    }\n    return ret;\n};\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nLocusZoom.positionStringToInt = function(p) {\n    var val = p.toUpperCase();\n    val = val.replace(/,/g, '');\n    var suffixre = /([KMG])[B]*$/;\n    var suffix = suffixre.exec(val);\n    var mult = 1;\n    if (suffix) {\n        if (suffix[1] === 'M') {\n            mult = 1e6;\n        } else if (suffix[1] === 'G') {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre,'');\n    }\n    val = Number(val) * mult;\n    return val;\n};\n\n/**\n * Parse region queries into their constituent parts\n * TODO: handle genes (or send off to API)\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nLocusZoom.parsePositionQuery = function(x) {\n    var chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    var chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    var match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === '+') {\n            var center = LocusZoom.positionStringToInt(match[2]);\n            var offset = LocusZoom.positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: LocusZoom.positionStringToInt(match[2]),\n                end: LocusZoom.positionStringToInt(match[4])\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: LocusZoom.positionStringToInt(match[2])\n        };\n    }\n    return null;\n};\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nLocusZoom.prettyTicks = function(range, clip_range, target_tick_count) {\n    if (typeof target_tick_count == 'undefined' || isNaN(parseInt(target_tick_count))) {\n        target_tick_count = 5;\n    }\n    target_tick_count = parseInt(target_tick_count);\n\n    var min_n = target_tick_count / 3;\n    var shrink_sml = 0.75;\n    var high_u_bias = 1.5;\n    var u5_bias = 0.5 + 1.5 * high_u_bias;\n\n    var d = Math.abs(range[0] - range[1]);\n    var c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2) {\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n\n    var base = Math.pow(10, Math.floor(Math.log(c) / Math.LN10));\n    var base_toFixed = 0;\n    if (base < 1 && base !== 0) {\n        base_toFixed = Math.abs(Math.round(Math.log(base) / Math.LN10));\n    }\n\n    var unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ) {\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ) {\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ) {\n                unit = 10 * base;\n            }\n        }\n    }\n\n    var ticks = [];\n    var i = parseFloat( (Math.floor(range[0] / unit) * unit).toFixed(base_toFixed) );\n    while (i < range[1]) {\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0) {\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n\n    if (typeof clip_range == 'undefined' || ['low', 'high', 'both', 'neither'].indexOf(clip_range) === -1) {\n        clip_range = 'neither';\n    }\n    if (clip_range === 'low' || clip_range === 'both') {\n        if (ticks[0] < range[0]) { ticks = ticks.slice(1); }\n    }\n    if (clip_range === 'high' || clip_range === 'both') {\n        if (ticks[ticks.length - 1] > range[1]) { ticks.pop(); }\n    }\n\n    return ticks;\n};\n\n/**\n * Make an AJAX request and return a promise.\n * From http://www.html5rocks.com/en/tutorials/cors/\n *   and with promises from https://gist.github.com/kriskowal/593076\n *\n * @param {String} method The HTTP verb\n * @param {String} url\n * @param {String} [body] The request body to send to the server\n * @param {Object} [headers] Object of custom request headers\n * @param {Number} [timeout] If provided, wait this long (in ms) before timing out\n * @returns {Promise}\n */\nLocusZoom.createCORSPromise = function (method, url, body, headers, timeout) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        if ('withCredentials' in xhr) {\n            // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n            // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n            xhr.open(method, url, true);\n        } else if (typeof XDomainRequest != 'undefined') {\n            // Otherwise, check if XDomainRequest.\n            // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n            xhr = new XDomainRequest();\n            xhr.open(method, url);\n        } else {\n            // Otherwise, CORS is not supported by the browser.\n            xhr = null;\n        }\n        if (xhr) {\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 || xhr.status === 0 ) {\n                        resolve(xhr.response);\n                    } else {\n                        reject('HTTP ' + xhr.status + ' for ' + url);\n                    }\n                }\n            };\n            timeout && setTimeout(reject, timeout);\n            body = typeof body !== 'undefined' ? body : '';\n            if (typeof headers !== 'undefined') {\n                for (var header in headers) {\n                    xhr.setRequestHeader(header, headers[header]);\n                }\n            }\n            // Send the request\n            xhr.send(body);\n        }\n    });\n};\n\n/**\n * Check that position fields (chr, start, end) are provided where appropriate, and ensure that the plot fits within\n *  any constraints specified by the layout\n *\n * This function has side effects; it mutates the proposed state in order to meet certain bounds checks etc.\n * @param {Object} new_state\n * @param {Number} new_state.chr\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nLocusZoom._updateStatePosition = function(new_state, layout) {\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    var validated_region = false;\n    if (typeof new_state.chr != 'undefined' && typeof new_state.start != 'undefined' && typeof new_state.end != 'undefined') {\n        // Determine a numeric scale and midpoint for the attempted region,\n        var attempted_midpoint = null; var attempted_scale;\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)) {\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)) {\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0) {\n                var temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0) {\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n};\n\n//\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values in data! Will ignore non-scalars. This is useful in, eg, tooltip templates.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if field_name}} Conditional text {{/if}}` will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n *     This can be used with namespaced values, `{{#if assoc:field}}`; any dynamic namespacing will be applied when the\n *     layout is first retrieved.\n * @returns {string}\n */\nLocusZoom.parseFields = function (data, html) {\n    if (typeof data != 'object') {\n        throw new Error('LocusZoom.parseFields invalid arguments: data is not an object');\n    }\n    if (typeof html != 'string') {\n        throw new Error('LocusZoom.parseFields invalid arguments: html is not a string');\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    var tokens = [];\n    var regex = /\\{\\{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))\\}\\}/;\n    while (html.length > 0) {\n        var m = regex.exec(html);\n        if (!m) { tokens.push({text: html}); html = ''; }\n        else if (m.index !== 0) { tokens.push({text: html.slice(0, m.index)}); html = html.slice(m.index); }\n        else if (m[1] === '#if ') { tokens.push({condition: m[2]}); html = html.slice(m[0].length); }\n        else if (m[2]) { tokens.push({variable: m[2]}); html = html.slice(m[0].length); }\n        else if (m[3] === '/if') { tokens.push({close: 'if'}); html = html.slice(m[0].length); }\n        else {\n            console.error('Error tokenizing tooltip when remaining template is ' + JSON.stringify(html) +\n                          ' and previous tokens are ' + JSON.stringify(tokens) +\n                          ' and current regex match is ' + JSON.stringify([m[1], m[2], m[3]]));\n            html = html.slice(m[0].length);\n        }\n    }\n    var astify = function() {\n        var token = tokens.shift();\n        if (typeof token.text !== 'undefined' || token.variable) {\n            return token;\n        } else if (token.condition) {\n            token.then = [];\n            while(tokens.length > 0) {\n                if (tokens[0].close === 'if') { tokens.shift(); break; }\n                token.then.push(astify());\n            }\n            return token;\n        } else {\n            console.error('Error making tooltip AST due to unknown token ' + JSON.stringify(token));\n            return { text: '' };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    var ast = [];\n    while (tokens.length > 0) {\n        ast.push(astify());\n    }\n\n    var resolve = function(variable) {\n        if (!resolve.cache.hasOwnProperty(variable)) {\n            resolve.cache[variable] = (new LocusZoom.Data.Field(variable)).resolve(data);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    var render_node = function(node) {\n        if (typeof node.text !== 'undefined') {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                var value = resolve(node.variable);\n                if (['string','number','boolean'].indexOf(typeof value) !== -1) { return value; }\n                if (value === null) { return ''; }\n            } catch (error) { console.error('Error while processing variable ' + JSON.stringify(node.variable)); }\n            return '{{' + node.variable + '}}';\n        } else if (node.condition) {\n            try {\n                var condition = resolve(node.condition);\n                if (condition || condition === 0) {\n                    return node.then.map(render_node).join('');\n                }\n            } catch (error) { console.error('Error while processing condition ' + JSON.stringify(node.variable)); }\n            return '';\n        } else { console.error('Error rendering tooltip due to unknown AST node ' + JSON.stringify(node)); }\n    };\n    return ast.map(render_node).join('');\n};\n\n/**\n * Shortcut method for getting the data bound to a tool tip.\n * @param {Element} node\n * @returns {*} The first element of data bound to the tooltip\n */\nLocusZoom.getToolTipData = function(node) {\n    if (typeof node != 'object' || typeof node.parentNode == 'undefined') {\n        throw new Error('Invalid node object');\n    }\n    // If this node is a locuszoom tool tip then return its data\n    var selector = d3.select(node);\n    if (selector.classed('lz-data_layer-tooltip') && typeof selector.data()[0] != 'undefined') {\n        return selector.data()[0];\n    } else {\n        return LocusZoom.getToolTipData(node.parentNode);\n    }\n};\n\n/**\n * Shortcut method for getting a reference to the data layer that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.getToolTipDataLayer = function(node) {\n    var data = LocusZoom.getToolTipData(node);\n    if (data.getDataLayer) { return data.getDataLayer(); }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the panel that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.getToolTipPanel = function(node) {\n    var data_layer = LocusZoom.getToolTipDataLayer(node);\n    if (data_layer) { return data_layer.parent; }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the plot that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.getToolTipPlot = function(node) {\n    var panel = LocusZoom.getToolTipPanel(node);\n    if (panel) { return panel.parent; }\n    return null;\n};\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nLocusZoom.generateCurtain = function() {\n    var curtain = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: function(content, css) {\n            if (!this.curtain.showing) {\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-curtain').attr('id', this.id + '.curtain');\n                this.curtain.content_selector = this.curtain.selector.append('div').attr('class', 'lz-curtain-content');\n                this.curtain.selector.append('div').attr('class', 'lz-curtain-dismiss').html('Dismiss')\n                    .on('click', function() {\n                        this.curtain.hide();\n                    }.bind(this));\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        }.bind(this),\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: function(content, css) {\n            if (!this.curtain.showing) { return this.curtain; }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == 'object') {\n                this.curtain.selector.style(css);\n            }\n            // Update size and position\n            var page_origin = this.getPageOrigin();\n            this.curtain.selector.style({\n                top: page_origin.y + 'px',\n                left: page_origin.x + 'px',\n                width: this.layout.width + 'px',\n                height: this.layout.height + 'px'\n            });\n            this.curtain.content_selector.style({\n                'max-width': (this.layout.width - 40) + 'px',\n                'max-height': (this.layout.height - 40) + 'px'\n            });\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        }.bind(this),\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay) {\n            if (!this.curtain.showing) { return this.curtain; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        }.bind(this)\n    };\n    return curtain;\n};\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nLocusZoom.generateLoader = function() {\n    var loader = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: function(content) {\n            // Generate loader\n            if (!this.loader.showing) {\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-loader').attr('id', this.id + '.loader');\n                this.loader.content_selector = this.loader.selector.append('div')\n                    .attr('class', 'lz-loader-content');\n                this.loader.progress_selector = this.loader.selector\n                    .append('div').attr('class', 'lz-loader-progress-container')\n                    .append('div').attr('class', 'lz-loader-progress');\n                /* TODO: figure out how to make this cancel button work\n                this.loader.cancel_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-cancel\").html(\"Cancel\")\n                    .on(\"click\", function(){\n                        this.loader.hide();\n                    }.bind(this));\n                */\n                this.loader.showing = true;\n                if (typeof content == 'undefined') { content = 'Loading...'; }\n            }\n            return this.loader.update(content);\n        }.bind(this),\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: function(content, percent) {\n            if (!this.loader.showing) { return this.loader; }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            var padding = 6; // is there a better place to store/define this?\n            var page_origin = this.getPageOrigin();\n            var loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector.style({\n                top: (page_origin.y + this.layout.height - loader_boundrect.height - padding) + 'px',\n                left: (page_origin.x + padding) + 'px'\n            });\n            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n            // Apply percent if provided\n            if (typeof percent == 'number') {\n                this.loader.progress_selector.style({\n                    width: (Math.min(Math.max(percent, 1), 100)) + '%'\n                });\n            }\n            return this.loader;\n        }.bind(this),\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: function() {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', true);\n            return this.loader;\n        }.bind(this),\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: function(percent) {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', false);\n            return this.loader.update(null, percent);\n        }.bind(this),\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay) {\n            if (!this.loader.showing) { return this.loader; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        }.bind(this)\n    };\n    return loader;\n};\n\n/**\n * Create a new subclass following classical inheritance patterns. Some registry singletons use this internally to\n *   enable code reuse and customization of known LZ core functionality.\n *\n * @param {Function} parent A parent class constructor that will be extended by the child class\n * @param {Object} extra An object of additional properties and methods to add/override behavior for the child class.\n *   The special \"constructor\" property can be used to specify a custom constructor, or it will call parent by default.\n *   Implementer must manage super calls when overriding the constructor.\n * @returns {Function} The constructor for the new child class\n */\nLocusZoom.subclass = function(parent, extra) {\n    if (typeof parent !== 'function' ) {\n        throw new Error('Parent must be a callable constructor');\n    }\n\n    extra = extra || {};\n    var Sub = extra.hasOwnProperty('constructor') ? extra.constructor : function() {\n        parent.apply(this, arguments);\n    };\n\n    Sub.prototype = Object.create(parent.prototype);\n    Object.keys(extra).forEach(function(k) {\n        Sub.prototype[k] = extra[k];\n    });\n    return Sub;\n};\n\n\n/**\n * LocusZoom optional extensions will live under this namespace.\n *\n * Extension code is not part of the core LocusZoom app.js bundle.\n * @namespace\n * @public\n */\nLocusZoom.ext = {};\n","/* global LocusZoom */\n'use strict';\n\nvar LZ_SIG_THRESHOLD_LOGP = 7.301; // -log10(.05/1e6)\n\n/**\n * Manage known layouts for all parts of the LocusZoom plot\n *\n * This registry allows for layouts to be reused and customized many times on a page, using a common base pattern.\n *   It handles the work of ensuring that each new instance of the layout has no shared state with other copies.\n *\n * @class\n */\nLocusZoom.Layouts = (function () {\n    var obj = {};\n    var layouts = {\n        'plot': {},\n        'panel': {},\n        'data_layer': {},\n        'dashboard': {},\n        'dashboard_components': {},\n        'tooltip': {}\n    };\n\n    /**\n     * Generate a layout configuration object\n     * @param {('plot'|'panel'|'data_layer'|'dashboard'|'tooltip')} type The type of layout to retrieve\n     * @param {string} name Identifier of the predefined layout within the specified type\n     * @param {object} [modifications] Custom properties that override default settings for this layout\n     * @returns {object} A JSON-serializable object representation\n     */\n    obj.get = function (type, name, modifications) {\n        if (typeof type != 'string' || typeof name != 'string') {\n            throw new Error('invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)');\n        } else if (layouts[type][name]) {\n            // Get the base layout\n            var layout = LocusZoom.Layouts.merge(modifications || {}, layouts[type][name]);\n            // If \"unnamespaced\" is true then strike that from the layout and return the layout without namespacing\n            if (layout.unnamespaced) {\n                delete layout.unnamespaced;\n                return JSON.parse(JSON.stringify(layout));\n            }\n            // Determine the default namespace for namespaced values\n            var default_namespace = '';\n            if (typeof layout.namespace == 'string') {\n                default_namespace = layout.namespace;\n            } else if (typeof layout.namespace == 'object' && Object.keys(layout.namespace).length) {\n                if (typeof layout.namespace.default != 'undefined') {\n                    default_namespace = layout.namespace.default;\n                } else {\n                    default_namespace = layout.namespace[Object.keys(layout.namespace)[0]].toString();\n                }\n            }\n            default_namespace += default_namespace.length ? ':' : '';\n            // Apply namespaces to layout, recursively\n            var applyNamespaces = function (element, namespace) {\n                if (namespace) {\n                    if (typeof namespace == 'string') {\n                        namespace = { default: namespace };\n                    }\n                } else {\n                    namespace = { default: '' };\n                }\n                if (typeof element == 'string') {\n                    var re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n                    var match, base, key, resolved_namespace;\n                    var replace = [];\n                    while ((match = re.exec(element)) !== null) {\n                        base = match[0];\n                        key = match[1].length ? match[1].replace(/(\\[|\\])/g, '') : null;\n                        resolved_namespace = default_namespace;\n                        if (namespace != null && typeof namespace == 'object' && typeof namespace[key] != 'undefined') {\n                            resolved_namespace = namespace[key] + (namespace[key].length ? ':' : '');\n                        }\n                        replace.push({ base: base, namespace: resolved_namespace });\n                    }\n                    for (var r in replace) {\n                        element = element.replace(replace[r].base, replace[r].namespace);\n                    }\n                } else if (typeof element == 'object' && element != null) {\n                    if (typeof element.namespace != 'undefined') {\n                        var merge_namespace = (typeof element.namespace == 'string') ? { default: element.namespace } : element.namespace;\n                        namespace = LocusZoom.Layouts.merge(namespace, merge_namespace);\n                    }\n                    var namespaced_element, namespaced_property;\n                    for (var property in element) {\n                        if (property === 'namespace') {\n                            continue;\n                        }\n                        namespaced_element = applyNamespaces(element[property], namespace);\n                        namespaced_property = applyNamespaces(property, namespace);\n                        if (property !== namespaced_property) {\n                            delete element[property];\n                        }\n                        element[namespaced_property] = namespaced_element;\n                    }\n                }\n                return element;\n            };\n            layout = applyNamespaces(layout, layout.namespace);\n            // Return the layout as valid JSON only\n            return JSON.parse(JSON.stringify(layout));\n        } else {\n            throw new Error('layout type [' + type + '] name [' + name + '] not found');\n        }\n    };\n\n    /** @private */\n    obj.set = function (type, name, layout) {\n        if (typeof type != 'string' || typeof name != 'string' || typeof layout != 'object') {\n            throw new Error('unable to set new layout; bad arguments passed to set()');\n        }\n        if (!layouts[type]) {\n            layouts[type] = {};\n        }\n        if (layout) {\n            return (layouts[type][name] = JSON.parse(JSON.stringify(layout)));\n        } else {\n            delete layouts[type][name];\n            return null;\n        }\n    };\n\n    /**\n     * Register a new layout definition by name.\n     *\n     * @param {string} type The type of layout to add. Usually, this will be one of the predefined LocusZoom types,\n     *   but if you pass a different name, this method will automatically create the new `type` bucket\n     * @param {string} name The identifier of the newly added layout\n     * @param {object} [layout] A JSON-serializable object containing configuration properties for this layout\n     * @returns The JSON representation of the newly created layout\n     */\n    obj.add = function (type, name, layout) {\n        return obj.set(type, name, layout);\n    };\n\n    /**\n     * List all registered layouts\n     * @param [type] Optionally narrow the list to only layouts of a specific type; else return all known layouts\n     * @returns {*}\n     */\n    obj.list = function (type) {\n        if (!layouts[type]) {\n            var list = {};\n            Object.keys(layouts).forEach(function (type) {\n                list[type] = Object.keys(layouts[type]);\n            });\n            return list;\n        } else {\n            return Object.keys(layouts[type]);\n        }\n    };\n\n    /**\n     * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n     *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n     *\n     * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n     *\n     * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n     * @param {object} default_layout An object containing default settings.\n     * @returns {object} The custom layout is modified in place and also returned from this method.\n     */\n    obj.merge = function (custom_layout, default_layout) {\n        if (typeof custom_layout !== 'object' || typeof default_layout !== 'object') {\n            throw new Error('LocusZoom.Layouts.merge only accepts two layout objects; ' + (typeof custom_layout) + ', ' + (typeof default_layout) + ' given');\n        }\n        for (var property in default_layout) {\n            if (!default_layout.hasOwnProperty(property)) {\n                continue;\n            }\n            // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n            // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n            // Also separate arrays from objects as a discrete type.\n            var custom_type = custom_layout[property] === null ? 'undefined' : typeof custom_layout[property];\n            var default_type = typeof default_layout[property];\n            if (custom_type === 'object' && Array.isArray(custom_layout[property])) {\n                custom_type = 'array';\n            }\n            if (default_type === 'object' && Array.isArray(default_layout[property])) {\n                default_type = 'array';\n            }\n            // Unsupported property types: throw an exception\n            if (custom_type === 'function' || default_type === 'function') {\n                throw new Error('LocusZoom.Layouts.merge encountered an unsupported property type');\n            }\n            // Undefined custom value: pull the default value\n            if (custom_type === 'undefined') {\n                custom_layout[property] = JSON.parse(JSON.stringify(default_layout[property]));\n                continue;\n            }\n            // Both values are objects: merge recursively\n            if (custom_type === 'object' && default_type === 'object') {\n                custom_layout[property] = LocusZoom.Layouts.merge(custom_layout[property], default_layout[property]);\n                continue;\n            }\n        }\n        return custom_layout;\n    };\n\n    return obj;\n})();\n\n\n/**\n * Tooltip Layouts\n * @namespace LocusZoom.Layouts.tooltips\n */\n\nLocusZoom.Layouts.add('tooltip', 'standard_association', {\n    namespace: { 'assoc': 'assoc' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<strong>{{{{namespace[assoc]}}variant|htmlescape}}</strong><br>'\n        + 'P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation|htmlescape}}</strong><br>'\n        + 'Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele|htmlescape}}</strong><br>'\n        + '<a href=\"javascript:void(0);\" onclick=\"LocusZoom.getToolTipDataLayer(this).makeLDReference(LocusZoom.getToolTipData(this));\">Make LD Reference</a><br>'\n});\n\nLocusZoom.Layouts.add('tooltip', 'standard_association_with_label', function() {\n    // Add a special \"toggle label\" button to the base tooltip. This must be used in tandem with a custom layout\n    //   directive (label.filters should check a boolean annotation field called \"lz_show_label\").\n    var base = LocusZoom.Layouts.get('tooltip', 'standard_association', { unnamespaced: true });\n    base.html += '<a href=\"javascript:void(0);\" onclick=\"var item = LocusZoom.getToolTipData(this), layer = LocusZoom.getToolTipDataLayer(this); var current = layer.getElementAnnotation(item, \\'lz_show_label\\'); layer.setElementAnnotation(item, \\'lz_show_label\\', !current ); layer.parent_plot.applyState();\">Toggle label</a>';\n    return base;\n}());\n\nLocusZoom.Layouts.add('tooltip', 'covariates_model_association', function () {\n    var covariates_model_association = LocusZoom.Layouts.get('tooltip', 'standard_association', { unnamespaced: true });\n    covariates_model_association.html += '<a href=\"javascript:void(0);\" onclick=\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\">Condition on Variant</a><br>';\n    return covariates_model_association;\n}());\n\nLocusZoom.Layouts.add('tooltip', 'standard_genes', {\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<h4><strong><i>{{gene_name|htmlescape}}</i></strong></h4>'\n        + 'Gene ID: <a href=\"https://useast.ensembl.org/homo_sapiens/Gene/Summary?g={{gene_id|htmlescape}}&db=core\" target=\"_blank\" rel=\"noopener\">{{gene_id|htmlescape}}</a><br>'\n        + 'Transcript ID: <strong>{{transcript_id|htmlescape}}</strong><br>'\n        + '{{#if pLI}}<table>'\n        + '<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>'\n        + '<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{obs_syn}}</td><td>z = {{syn_z}}<br>o/e = {{oe_syn}} ({{oe_syn_lower}} - {{oe_syn_upper}})</td></tr>'\n        + '<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{obs_mis}}</td><td>z = {{mis_z}}<br>o/e = {{oe_mis}} ({{oe_mis_lower}} - {{oe_mis_upper}})</td></tr>'\n        + '<tr><td>pLoF</td><td>{{exp_lof}}</td><td>{{obs_lof}}</td><td>pLI = {{pLI}}<br>o/e = {{oe_lof}} ({{oe_lof_lower}} - {{oe_lof_upper}})</td></tr>'\n        + '</table><br>{{/if}}'\n        + '<a href=\"https://gnomad.broadinstitute.org/gene/{{gene_id|htmlescape}}\" target=\"_blank\" rel=\"noopener\">More data on gnomAD</a>'\n});\n\nLocusZoom.Layouts.add('tooltip', 'standard_intervals', {\n    namespace: { 'intervals': 'intervals' },\n    closable: false,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '{{{{namespace[intervals]}}state_name|htmlescape}}<br>{{{{namespace[intervals]}}start|htmlescape}}-{{{{namespace[intervals]}}end|htmlescape}}'\n});\n\nLocusZoom.Layouts.add('tooltip', 'catalog_variant', {\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<strong>{{{{namespace[catalog]}}variant|htmlescape}}</strong><br>'\n        + 'Catalog entries: <strong>{{n_catalog_matches|htmlescape}}</strong><br>'\n        + 'Top Trait: <strong>{{{{namespace[catalog]}}trait|htmlescape}}</strong><br>'\n        + 'Top P Value: <strong>{{{{namespace[catalog]}}log_pvalue|logtoscinotation}}</strong><br>'\n        // User note: if a different catalog is used, the tooltip will need to be replaced with a different link URL\n        + 'More: <a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">GWAS catalog</a> / <a href=\"https://www.ncbi.nlm.nih.gov/snp/{{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">dbSNP</a>'\n});\n\n/**\n * Data Layer Layouts: represent specific information from a data source\n * @namespace Layouts.data_layer\n */\n\nLocusZoom.Layouts.add('data_layer', 'significance', {\n    id: 'significance',\n    type: 'orthogonal_line',\n    orientation: 'horizontal',\n    offset: LZ_SIG_THRESHOLD_LOGP\n});\n\nLocusZoom.Layouts.add('data_layer', 'recomb_rate', {\n    namespace: { 'recomb': 'recomb' },\n    id: 'recombrate',\n    type: 'line',\n    fields: ['{{namespace[recomb]}}position', '{{namespace[recomb]}}recomb_rate'],\n    z_index: 1,\n    style: {\n        'stroke': '#0000FF',\n        'stroke-width': '1.5px'\n    },\n    x_axis: {\n        field: '{{namespace[recomb]}}position'\n    },\n    y_axis: {\n        axis: 2,\n        field: '{{namespace[recomb]}}recomb_rate',\n        floor: 0,\n        ceiling: 100\n    }\n});\n\nLocusZoom.Layouts.add('data_layer', 'association_pvalues', {\n    namespace: { 'assoc': 'assoc', 'ld': 'ld' },\n    id: 'associationpvalues',\n    type: 'scatter',\n    point_shape: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 'diamond',\n            else: 'circle'\n        }\n    },\n    point_size: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40\n        }\n    },\n    color: [\n        {\n            scale_function: 'if',\n            field: '{{namespace[ld]}}isrefvar',\n            parameters: {\n                field_value: 1,\n                then: '#9632b8'\n            }\n        },\n        {\n            scale_function: 'numerical_bin',\n            field: '{{namespace[ld]}}state',\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                values: ['#357ebd', '#46b8da', '#5cb85c', '#eea236', '#d43f3a']\n            }\n        },\n        '#B8B8B8'\n    ],\n    legend: [\n        { shape: 'diamond', color: '#9632b8', size: 40, label: 'LD Ref Var', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#d43f3a', size: 40, label: '1.0 > r² ≥ 0.8', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#eea236', size: 40, label: '0.8 > r² ≥ 0.6', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#5cb85c', size: 40, label: '0.6 > r² ≥ 0.4', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#46b8da', size: 40, label: '0.4 > r² ≥ 0.2', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#357ebd', size: 40, label: '0.2 > r² ≥ 0.0', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#B8B8B8', size: 40, label: 'no r² data', class: 'lz-data_layer-scatter' }\n    ],\n    label: null,\n    fields: ['{{namespace[assoc]}}variant', '{{namespace[assoc]}}position', '{{namespace[assoc]}}log_pvalue', '{{namespace[assoc]}}log_pvalue|logtoscinotation', '{{namespace[assoc]}}ref_allele', '{{namespace[ld]}}state', '{{namespace[ld]}}isrefvar'],\n    id_field: '{{namespace[assoc]}}variant',\n    z_index: 2,\n    x_axis: {\n        field: '{{namespace[assoc]}}position'\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[assoc]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [0, 10]\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_association', { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add('data_layer', 'association_pvalues_catalog', function () {\n    // Slightly modify an existing layout\n    var l = LocusZoom.Layouts.get('data_layer', 'association_pvalues', {\n        unnamespaced: true,\n        id: 'associationpvaluescatalog',\n        fill_opacity: 0.7\n    });\n    l.tooltip.html += '{{#if {{namespace[catalog]}}rsid}}<br><a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">See hits in GWAS catalog</a>{{/if}}';\n    l.namespace.catalog = 'catalog';\n    l.fields.push('{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait', '{{namespace[catalog]}}log_pvalue');\n    return l;\n}());\n\nLocusZoom.Layouts.add('data_layer', 'phewas_pvalues', {\n    namespace: { 'phewas': 'phewas' },\n    id: 'phewaspvalues',\n    type: 'category_scatter',\n    point_shape: 'circle',\n    point_size: 70,\n    tooltip_positioning: 'vertical',\n    id_field: '{{namespace[phewas]}}id',\n    fields: ['{{namespace[phewas]}}id', '{{namespace[phewas]}}log_pvalue', '{{namespace[phewas]}}trait_group', '{{namespace[phewas]}}trait_label'],\n    x_axis: {\n        field: '{{namespace[phewas]}}x',  // Synthetic/derived field added by `category_scatter` layer\n        category_field: '{{namespace[phewas]}}trait_group',\n        lower_buffer: 0.025,\n        upper_buffer: 0.025\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[phewas]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.15\n    },\n    color: [{\n        field: '{{namespace[phewas]}}trait_group',\n        scale_function: 'categorical_bin',\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: '#B8B8B8'\n        }\n    }],\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: ['highlighted', 'selected'] },\n        hide: { and: ['unhighlighted', 'unselected'] },\n        html: [\n            '<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>',\n            '<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>',\n            '<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>'\n        ].join('')\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    label: {\n        text: '{{{{namespace[phewas]}}trait_label|htmlescape}}',\n        spacing: 6,\n        lines: {\n            style: {\n                'stroke-width': '2px',\n                'stroke': '#333333',\n                'stroke-dasharray': '2px 2px'\n            }\n        },\n        filters: [\n            {\n                field: '{{namespace[phewas]}}log_pvalue',\n                operator: '>=',\n                value: 20\n            }\n        ],\n        style: {\n            'font-size': '14px',\n            'font-weight': 'bold',\n            'fill': '#333333'\n        }\n    }\n});\n\nLocusZoom.Layouts.add('data_layer', 'genes', {\n    namespace: { 'gene': 'gene', 'constraint': 'constraint' },\n    id: 'genes',\n    type: 'genes',\n    fields: ['{{namespace[gene]}}all', '{{namespace[constraint]}}all'],\n    id_field: 'gene_id',\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_genes', { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add('data_layer', 'genome_legend', {\n    namespace: { 'genome': 'genome' },\n    id: 'genome_legend',\n    type: 'genome_legend',\n    fields: ['{{namespace[genome]}}chr', '{{namespace[genome]}}base_pairs'],\n    x_axis: {\n        floor: 0,\n        ceiling: 2881033286\n    }\n});\n\nLocusZoom.Layouts.add('data_layer', 'intervals', {\n    namespace: { 'intervals': 'intervals' },\n    id: 'intervals',\n    type: 'intervals',\n    fields: ['{{namespace[intervals]}}start', '{{namespace[intervals]}}end', '{{namespace[intervals]}}state_id', '{{namespace[intervals]}}state_name'],\n    id_field: '{{namespace[intervals]}}start',\n    start_field: '{{namespace[intervals]}}start',\n    end_field: '{{namespace[intervals]}}end',\n    track_split_field: '{{namespace[intervals]}}state_id',\n    split_tracks: true,\n    always_hide_legend: false,\n    color: {\n        field: '{{namespace[intervals]}}state_id',\n        scale_function: 'categorical_bin',\n        parameters: {\n            categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n            values: ['rgb(212,63,58)', 'rgb(250,120,105)', 'rgb(252,168,139)', 'rgb(240,189,66)', 'rgb(250,224,105)', 'rgb(240,238,84)', 'rgb(244,252,23)', 'rgb(23,232,252)', 'rgb(32,191,17)', 'rgb(23,166,77)', 'rgb(32,191,17)', 'rgb(162,133,166)', 'rgb(212,212,212)'],\n            null_value: '#B8B8B8'\n        }\n    },\n    legend: [\n        { shape: 'rect', color: 'rgb(212,63,58)', width: 9, label: 'Active Promoter', '{{namespace[intervals]}}state_id': 1 },\n        { shape: 'rect', color: 'rgb(250,120,105)', width: 9, label: 'Weak Promoter', '{{namespace[intervals]}}state_id': 2 },\n        { shape: 'rect', color: 'rgb(252,168,139)', width: 9, label: 'Poised Promoter', '{{namespace[intervals]}}state_id': 3 },\n        { shape: 'rect', color: 'rgb(240,189,66)', width: 9, label: 'Strong enhancer', '{{namespace[intervals]}}state_id': 4 },\n        { shape: 'rect', color: 'rgb(250,224,105)', width: 9, label: 'Strong enhancer', '{{namespace[intervals]}}state_id': 5 },\n        { shape: 'rect', color: 'rgb(240,238,84)', width: 9, label: 'Weak enhancer', '{{namespace[intervals]}}state_id': 6 },\n        { shape: 'rect', color: 'rgb(244,252,23)', width: 9, label: 'Weak enhancer', '{{namespace[intervals]}}state_id': 7 },\n        { shape: 'rect', color: 'rgb(23,232,252)', width: 9, label: 'Insulator', '{{namespace[intervals]}}state_id': 8 },\n        { shape: 'rect', color: 'rgb(32,191,17)', width: 9, label: 'Transcriptional transition', '{{namespace[intervals]}}state_id': 9 },\n        { shape: 'rect', color: 'rgb(23,166,77)', width: 9, label: 'Transcriptional elongation', '{{namespace[intervals]}}state_id': 10 },\n        { shape: 'rect', color: 'rgb(136,240,129)', width: 9, label: 'Weak transcribed', '{{namespace[intervals]}}state_id': 11 },\n        { shape: 'rect', color: 'rgb(162,133,166)', width: 9, label: 'Polycomb-repressed', '{{namespace[intervals]}}state_id': 12 },\n        { shape: 'rect', color: 'rgb(212,212,212)', width: 9, label: 'Heterochromatin / low signal', '{{namespace[intervals]}}state_id': 13 }\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_intervals', { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add('data_layer', 'annotation_catalog', {\n    // Identify GWAS hits that are present in the GWAS catalog\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    id: 'annotation_catalog',\n    type: 'annotation_track',\n    id_field: '{{namespace[catalog]}}variant',\n    x_axis: {\n        field: '{{namespace[assoc]}}position'\n    },\n    color: '#0000CC',\n    fields: [\n        '{{namespace[assoc]}}variant', '{{namespace[assoc]}}chromosome', '{{namespace[assoc]}}position',\n        '{{namespace[catalog]}}variant', '{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait',\n        '{{namespace[catalog]}}log_pvalue', '{{namespace[catalog]}}pos'\n    ],\n    filters: [\n        // Specify which points to show on the track. Any selection must satisfy ALL filters\n        ['{{namespace[catalog]}}rsid', '!=', null],\n        ['{{namespace[catalog]}}log_pvalue', '>', LZ_SIG_THRESHOLD_LOGP]\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'catalog_variant', { unnamespaced: true }),\n    tooltip_positioning: 'top'\n});\n\n/**\n * Individual dashboard buttons\n * @namespace Layouts.dashboard_components\n */\nLocusZoom.Layouts.add('dashboard_components', 'ldlz2_pop_selector', {\n    // **Note**: this widget is aimed at the LDLZ2 datasource, and the UM 1000G LDServer. Older LZ usages\n    //  (on the original LD data source) will not work with these population names.\n    type: 'set_state',\n    position: 'right',\n    color: 'blue',\n    button_html: 'LD Population: ',\n    show_selected: true,\n    button_title: 'Select LD Population: ',\n    state_field: 'ld_pop',\n    // This list below is hardcoded to work with the UMich LDServer, default 1000G populations\n    //  It can be customized to work with other LD servers that specify population differently\n    // https://portaldev.sph.umich.edu/ld/genome_builds/GRCh37/references/1000G/populations\n    options: [\n        { display_name: 'ALL (default)', value: 'ALL' },\n        { display_name: 'AFR', value: 'AFR' },\n        { display_name: 'AMR', value: 'AMR' },\n        { display_name: 'EAS', value: 'EAS' },\n        { display_name: 'EUR', value: 'EUR' },\n        { display_name: 'SAS', value: 'SAS' }\n    ]\n});\n\n/**\n * Dashboard Layouts: Collections of toolbar buttons etc\n * @namespace Layouts.dashboard\n */\nLocusZoom.Layouts.add('dashboard', 'standard_panel', {\n    components: [\n        {\n            type: 'remove_panel',\n            position: 'right',\n            color: 'red',\n            group_position: 'end'\n        },\n        {\n            type: 'move_panel_up',\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'move_panel_down',\n            position: 'right',\n            group_position: 'start',\n            style: { 'margin-left': '0.75em' }\n        }\n    ]\n});\n\nLocusZoom.Layouts.add('dashboard', 'standard_plot', {\n    components: [\n        {\n            type: 'title',\n            title: 'LocusZoom',\n            subtitle: '<a href=\"https://statgen.github.io/locuszoom/\" target=\"_blank\" rel=\"noopener\">v' + LocusZoom.version + '</a>',\n            position: 'left'\n        },\n        {\n            type: 'download',\n            position: 'right'\n        }\n    ]\n});\n\nLocusZoom.Layouts.add('dashboard', 'covariates_model_plot', function () {\n    var covariates_model_plot_dashboard = LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true });\n    covariates_model_plot_dashboard.components.push({\n        type: 'covariates_model',\n        button_html: 'Model',\n        button_title: 'Show and edit covariates currently in model',\n        position: 'left'\n    });\n    return covariates_model_plot_dashboard;\n}());\n\nLocusZoom.Layouts.add('dashboard', 'region_nav_plot', function () {\n    var region_nav_plot_dashboard = LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true });\n    region_nav_plot_dashboard.components.push(\n        {\n            type: 'shift_region',\n            step: 500000,\n            button_html: '>>',\n            position: 'right',\n            group_position: 'end'\n        }, {\n            type: 'shift_region',\n            step: 50000,\n            button_html: '>',\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'zoom_region',\n            step: 0.2,\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'zoom_region',\n            step: -0.2,\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'shift_region',\n            step: -50000,\n            button_html: '<',\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'shift_region',\n            step: -500000,\n            button_html: '<<',\n            position: 'right',\n            group_position: 'start'\n        }\n    );\n    return region_nav_plot_dashboard;\n}());\n\n/**\n * Panel Layouts\n * @namespace Layouts.panel\n */\n\nLocusZoom.Layouts.add('panel', 'association', {\n    id: 'association',\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 200,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    dashboard: (function () {\n        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n        l.components.push({\n            type: 'toggle_legend',\n            position: 'right'\n        });\n        return l;\n    })(),\n    axes: {\n        x: {\n            label: 'Chromosome {{chr}} (Mb)',\n            label_offset: 32,\n            tick_format: 'region',\n            extent: 'state'\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28\n        },\n        y2: {\n            label: 'Recombination Rate (cM/Mb)',\n            label_offset: 40\n        }\n    },\n    legend: {\n        orientation: 'vertical',\n        origin: { x: 55, y: 40 },\n        hidden: true\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'recomb_rate', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'association_pvalues', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'association_catalog', function () {\n    var l = LocusZoom.Layouts.get('panel', 'association', {\n        unnamespaced: true,\n        id: 'associationcatalog',\n        namespace: { 'assoc': 'assoc', 'ld': 'ld', 'catalog': 'catalog' } // Required to resolve display options\n    });\n    l.dashboard.components.push({\n        type: 'display_options',\n        position: 'right',\n        color: 'blue',\n        // Below: special config specific to this widget\n        button_html: 'Display options...',\n        button_title: 'Control how plot items are displayed',\n\n        layer_name: 'associationpvaluescatalog',\n        default_config_display_name: 'No catalog labels (default)', // display name for the default plot color option (allow user to revert to plot defaults)\n\n        options: [\n            {\n                // First dropdown menu item\n                display_name: 'Label catalog traits',  // Human readable representation of field name\n                display: {  // Specify layout directives that control display of the plot for this option\n                    label: {\n                        text: '{{{{namespace[catalog]}}trait|htmlescape}}',\n                        spacing: 6,\n                        lines: {\n                            style: {\n                                'stroke-width': '2px',\n                                'stroke': '#333333',\n                                'stroke-dasharray': '2px 2px'\n                            }\n                        },\n                        filters: [\n                            // Only label points if they are significant for some trait in the catalog, AND in high LD\n                            //  with the top hit of interest\n                            {\n                                field: '{{namespace[catalog]}}trait',\n                                operator: '!=',\n                                value: null\n                            },\n                            {\n                                field: '{{namespace[catalog]}}log_pvalue',\n                                operator: '>',\n                                value: LZ_SIG_THRESHOLD_LOGP\n                            },\n                            {\n                                field: '{{namespace[ld]}}state',\n                                operator: '>',\n                                value: 0.4\n                            },\n                        ],\n                        style: {\n                            'font-size': '10px',\n                            'font-weight': 'bold',\n                            'fill': '#333333'\n                        }\n                    }\n                }\n            }\n        ]\n    });\n    l.data_layers = [\n        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'recomb_rate', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'association_pvalues_catalog', { unnamespaced: true })\n    ];\n    return l;\n}());\n\nLocusZoom.Layouts.add('panel', 'genes', {\n    id: 'genes',\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 112.5,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    dashboard: (function () {\n        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n        l.components.push({\n            type: 'resize_to_data',\n            position: 'right',\n            button_html: 'Show all genes',\n        });\n        return l;\n    })(),\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'genes', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'phewas', {\n    id: 'phewas',\n    width: 800,\n    height: 300,\n    min_width: 800,\n    min_height: 300,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    'font-weight': 'bold',\n                    'font-size': '11px',\n                    'text-anchor': 'start'\n                },\n                transform: 'rotate(50)',\n                position: 'left'  // Special param recognized by `category_scatter` layers\n            }\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'phewas_pvalues', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'genome_legend', {\n    id: 'genome_legend',\n    width: 800,\n    height: 50,\n    origin: { x: 0, y: 300 },\n    min_width: 800,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 0, right: 50, bottom: 35, left: 50 },\n    axes: {\n        x: {\n            label: 'Genomic Position (number denotes chromosome)',\n            label_offset: 35,\n            ticks: [\n                {\n                    x: 124625310,\n                    text: '1',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 370850307,\n                    text: '2',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 591461209,\n                    text: '3',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 786049562,\n                    text: '4',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 972084330,\n                    text: '5',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1148099493,\n                    text: '6',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1313226358,\n                    text: '7',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1465977701,\n                    text: '8',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1609766427,\n                    text: '9',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1748140516,\n                    text: '10',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1883411148,\n                    text: '11',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2017840353,\n                    text: '12',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2142351240,\n                    text: '13',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2253610949,\n                    text: '14',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2358551415,\n                    text: '15',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2454994487,\n                    text: '16',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2540769469,\n                    text: '17',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2620405698,\n                    text: '18',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2689008813,\n                    text: '19',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2750086065,\n                    text: '20',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2805663772,\n                    text: '21',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2855381003,\n                    text: '22',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                }\n            ]\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'genome_legend', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'intervals', {\n    id: 'intervals',\n    width: 1000,\n    height: 50,\n    min_width: 500,\n    min_height: 50,\n    margin: { top: 25, right: 150, bottom: 5, left: 50 },\n    dashboard: (function () {\n        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n        l.components.push({\n            type: 'toggle_split_tracks',\n            data_layer_id: 'intervals',\n            position: 'right'\n        });\n        return l;\n    })(),\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    legend: {\n        hidden: true,\n        orientation: 'horizontal',\n        origin: { x: 50, y: 0 },\n        pad_from_bottom: 5\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'intervals', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'annotation_catalog', {\n    id: 'annotationcatalog',\n    width: 800,\n    height: 50,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 25, right: 50, bottom: 0, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true }),\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'annotation_catalog', { unnamespaced: true })\n    ]\n});\n\n/**\n * Plot Layouts\n * @namespace Layouts.plot\n */\n\nLocusZoom.Layouts.add('plot', 'standard_association', {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: 'both',\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'association', { unnamespaced: true, proportional_height: 0.5 }),\n        LocusZoom.Layouts.get('panel', 'genes', { unnamespaced: true, proportional_height: 0.5 })\n    ]\n});\n\nLocusZoom.Layouts.add('plot', 'association_catalog', {\n    state: {},\n    width: 800,\n    height: 500,\n    responsive_resize: 'width_only',\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'annotation_catalog', { unnamespaced: true }),\n        LocusZoom.Layouts.get('panel', 'association_catalog', { unnamespaced: true }),\n        LocusZoom.Layouts.get('panel', 'genes', { unnamespaced: true })\n    ]\n});\n\n// Shortcut to \"StandardLayout\" for backward compatibility\nLocusZoom.StandardLayout = LocusZoom.Layouts.get('plot', 'standard_association');\n\nLocusZoom.Layouts.add('plot', 'standard_phewas', {\n    width: 800,\n    height: 600,\n    min_width: 800,\n    min_height: 600,\n    responsive_resize: 'both',\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'phewas', { unnamespaced: true, proportional_height: 0.45 }),\n        LocusZoom.Layouts.get('panel', 'genome_legend', { unnamespaced: true, proportional_height: 0.1 }),\n        LocusZoom.Layouts.get('panel', 'genes', {\n            unnamespaced: true, proportional_height: 0.45,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: 'Chromosome {{chr}} (Mb)',\n                    label_offset: 32,\n                    tick_format: 'region',\n                    extent: 'state'\n                }\n            }\n        })\n    ],\n    mouse_guide: false\n});\n\nLocusZoom.Layouts.add('plot', 'interval_association', {\n    state: {},\n    width: 800,\n    height: 550,\n    responsive_resize: 'both',\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'association', {\n            unnamespaced: true,\n            width: 800,\n            proportional_height: (225 / 570)\n        }),\n        LocusZoom.Layouts.get('panel', 'intervals', { unnamespaced: true, proportional_height: (120 / 570) }),\n        LocusZoom.Layouts.get('panel', 'genes', { unnamespaced: true, width: 800, proportional_height: (225 / 570) })\n    ]\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @class\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n*/\nLocusZoom.DataLayer = function(layout, parent) {\n    /** @member {Boolean} */\n    this.initialized = false;\n    /** @member {Number} */\n    this.layout_idx = null;\n\n    /** @member {String} */\n    this.id     = null;\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent || null;\n    /**\n     * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n     */\n    this.svg    = {};\n\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    if (typeof parent != 'undefined' && parent instanceof LocusZoom.Panel) { this.parent_plot = parent.parent; }\n\n    /** @member {Object} */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.DataLayer.DefaultLayout);\n    if (this.layout.id) { this.id = this.layout.id; }\n\n    // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n    if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== 'number') { this.layout.x_axis.axis = 1; }\n    if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== 'number') { this.layout.y_axis.axis = 1; }\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n    /** @member {Object} */\n    this.state = {};\n    /** @member {String} */\n    this.state_id = null;\n\n    /** @member {Object} */\n    this.layer_state = null;\n    // Create a default state (and set any references to the parent as appropriate)\n    this._setDefaultState();\n\n    // Initialize parameters for storing data and tool tips\n    /** @member {Array} */\n    this.data = [];\n    if (this.layout.tooltip) {\n        /** @member {Object} */\n        this.tooltips = {};\n    }\n\n    // Initialize flags for tracking global statuses\n    this.global_statuses = {\n        'highlighted': false,\n        'selected': false,\n        'faded': false,\n        'hidden': false\n    };\n\n    return this;\n\n};\n\n/**\n * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n *\n * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn\n *\n *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n * @param fieldName\n * @param namespace\n * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n * @returns {String} The raw string added to the fields array\n */\nLocusZoom.DataLayer.prototype.addField = function(fieldName, namespace, transformations) {\n    if (!fieldName || !namespace) {\n        throw new Error('Must specify field name and namespace to use when adding field');\n    }\n    var fieldString = namespace + ':' + fieldName;\n    if (transformations) {\n        fieldString += '|';\n        if (typeof transformations === 'string') {\n            fieldString += transformations;\n        } else if (Array.isArray(transformations)) {\n            fieldString += transformations.join('|');\n        } else {\n            throw new Error('Must provide transformations as either a string or array of strings');\n        }\n    }\n    var fields = this.layout.fields;\n    if (fields.indexOf(fieldString) === -1) {\n        fields.push(fieldString);\n    }\n    return fieldString;\n};\n\n/**\n * Define default state that should get tracked during the lifetime of this layer.\n *\n * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n */\nLocusZoom.DataLayer.prototype._setDefaultState = function() {\n    // Each datalayer tracks two kinds of status: flags for internal state (highlighted, selected, tooltip),\n    //  and \"extra fields\" (annotations like \"show a tooltip\" that are not determined by the server, but need to\n    //  persist across re-render)\n    var layer_state = { status_flags: {}, extra_fields: {} };\n    var status_flags = layer_state.status_flags;\n    LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status) {\n        status_flags[status] = status_flags[status] || [];\n    });\n    // Also initialize \"internal-only\" state fields (things that are tracked, but not set directly by external events)\n    status_flags['has_tooltip'] = status_flags['has_tooltip'] || [];\n\n    if (this.parent) {\n        // If layer has a parent, store a reference in the overarching plot.state object\n        this.state_id = this.parent.id + '.' + this.id;\n        this.state = this.parent.state;\n        this.state[this.state_id] = layer_state;\n    }\n    this.layer_state = layer_state;\n};\n\n/**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nLocusZoom.DataLayer.DefaultLayout = {\n    type: '',\n    fields: [],\n    x_axis: {},\n    y_axis: {}\n};\n\n/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb/antiverb and an adjective. Verbs and antiverbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[], menu_antiverbs: String[]}}\n */\nLocusZoom.DataLayer.Statuses = {\n    verbs: ['highlight', 'select', 'fade', 'hide'],\n    adjectives: ['highlighted', 'selected', 'faded', 'hidden'],\n    menu_antiverbs: ['unhighlight', 'deselect', 'unfade', 'show']\n};\n\n/**\n * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n *\n * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n */\nLocusZoom.DataLayer.prototype.getBaseId = function() {\n    if (this.parent) {\n        return this.parent_plot.id + '.' + this.parent.id + '.' + this.id;\n    } else {\n        return '';\n    }\n};\n\n/**\n * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n *\n * May be used by operations that resize the data layer to fit available data\n *\n * @public\n * @returns {number}\n */\nLocusZoom.DataLayer.prototype.getAbsoluteDataHeight = function() {\n    var dataBCR = this.svg.group.node().getBoundingClientRect();\n    return dataBCR.height;\n};\n\n/**\n * Whether transitions can be applied to this data layer\n * @returns {boolean}\n */\nLocusZoom.DataLayer.prototype.canTransition = function() {\n    if (!this.layout.transition) { return false; }\n    return !(this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.panel_id);\n};\n\n/**\n * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n * @param {String|Object} element\n * @returns {String}\n */\nLocusZoom.DataLayer.prototype.getElementId = function(element) {\n    var element_id = 'element';\n    if (typeof element == 'string') {\n        element_id = element;\n    } else if (typeof element == 'object') {\n        var id_field = this.layout.id_field || 'id';\n        if (typeof element[id_field] == 'undefined') {\n            throw new Error('Unable to generate element ID');\n        }\n        element_id = element[id_field].toString().replace(/\\W/g,'');\n    }\n    return (this.getBaseId() + '-' + element_id).replace(/([:.[\\],])/g, '_');\n};\n\n/**\n * Fetch an ID that may bind a data element to a separate visual node for displaying status\n * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n * even a common/shared node to show status across many elements in a set.\n * Abstract method. It should be overridden by data layers that implement seperate status\n * nodes specifically to the use case of the data layer type.\n * @param {String|Object} element\n * @returns {String|null}\n */\nLocusZoom.DataLayer.prototype.getElementStatusNodeId = function(element) {\n    return null;\n};\n\n/**\n * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n *   referenced by the unique identifier for the element\n\n * @param {String} id The unique identifier for the element, as defined by `getElementId`\n * @returns {Object|null} The data bound to that element\n */\nLocusZoom.DataLayer.prototype.getElementById = function(id) {\n    var selector = d3.select('#' + id.replace(/([:.[\\],])/g, '\\\\$1')); // escape special characters\n    if (!selector.empty() && selector.data() && selector.data().length) {\n        return selector.data()[0];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Basic method to apply arbitrary methods and properties to data elements.\n *   This is called on all data immediately after being fetched.\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyDataMethods = function() {\n    var field_to_match = (this.layout.match && this.layout.match.receive);\n    var broadcast_value = this.parent_plot.state.lz_match_value;\n\n    var self = this;\n    this.data.forEach(function(d, i) {\n        // Basic toHTML() method - return the stringified value in the id_field, if defined.\n\n        // When this layer receives data, mark whether points match (via a synthetic boolean field)\n        //   Any field-based layout directives (color, size, shape) can then be used to control display\n        if (field_to_match && broadcast_value !== null && broadcast_value !== undefined) {\n            d.lz_highlight_match = (d[field_to_match] === broadcast_value);\n        }\n\n        self.data[i].toHTML = function() {\n            var id_field = self.layout.id_field || 'id';\n            var html = '';\n            if (self.data[i][id_field]) { html = self.data[i][id_field].toString(); }\n            return html;\n        };\n        // getDataLayer() method - return a reference to the data layer\n        self.data[i].getDataLayer = function() {\n            return self;\n        };\n        // deselect() method - shortcut method to deselect the element\n        self.data[i].deselect = function() {\n            var data_layer = self.getDataLayer();\n            data_layer.unselectElement(self); // dynamically generated method name. It exists, honest.\n        };\n    });\n    this.applyCustomDataMethods();\n    return this;\n};\n\n/**\n * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyCustomDataMethods = function() {\n    return this;\n};\n\n/**\n * Initialize a data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.initialize = function() {\n\n    // Append a container group element to house the main data layer group element and the clip path\n    this.svg.container = this.parent.svg.group.append('g')\n        .attr('class', 'lz-data_layer-container')\n        .attr('id', this.getBaseId() + '.data_layer_container');\n\n    // Append clip path to the container element\n    this.svg.clipRect = this.svg.container.append('clipPath')\n        .attr('id', this.getBaseId() + '.clip')\n        .append('rect');\n\n    // Append svg group for rendering all data layer elements, clipped by the clip path\n    this.svg.group = this.svg.container.append('g')\n        .attr('id', this.getBaseId() + '.data_layer')\n        .attr('clip-path', 'url(#' + this.getBaseId() + '.clip)');\n\n    return this;\n\n};\n\n/**\n * Move a data layer up relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveUp = function() {\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]) {\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Move a data layer down relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveDown = function() {\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]) {\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Apply scaling functions to an element or parameter as needed, based on its layout and the element's data\n * If the layout parameter is already a primitive type, simply return the value as given\n * @param {Array|Number|String|Object} layout A (section of) layout controlling display of the desired property\n * @param {*} data The value to be used with the filter\n * @returns {*} The transformed value\n */\nLocusZoom.DataLayer.prototype.resolveScalableParameter = function(layout, data) {\n    var ret = null;\n    if (Array.isArray(layout)) {\n        var idx = 0;\n        while (ret === null && idx < layout.length) {\n            ret = this.resolveScalableParameter(layout[idx], data);\n            idx++;\n        }\n    } else {\n        switch (typeof layout) {\n        case 'number':\n        case 'string':\n            ret = layout;\n            break;\n        case 'object':\n            if (layout.scale_function) {\n                if(layout.field) {\n                    var f = new LocusZoom.Data.Field(layout.field);\n                    var extra;\n                    try {\n                        extra = this.layer_state && this.layer_state.extra_fields[this.getElementId(data)];\n                    } catch (e) {\n                        extra = null;\n                    }\n\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, f.resolve(data, extra));\n                } else {\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, data);\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n};\n\n\n/**\n * Implementation hook for fetching the min and max values of available data. Used to determine axis range, if no other\n *   explicit axis settings override. Useful for data layers where the data extent depends on more than one field.\n *   (eg confidence intervals in a forest plot)\n * @param data\n * @param axis_config The configuration object for the specified axis.\n * @returns {Array} [min, max] without any padding applied\n * @private\n */\nLocusZoom.DataLayer.prototype._getDataExtent = function(data, axis_config) {\n    data = data || this.data;\n    // By default this depends only on a single field.\n    return d3.extent(data, function (d) {\n        var f = new LocusZoom.Data.Field(axis_config.field);\n        return +f.resolve(d);\n    });\n};\n\n/**\n * Generate dimension extent function based on layout parameters\n * @param {('x'|'y')} dimension\n */\nLocusZoom.DataLayer.prototype.getAxisExtent = function(dimension) {\n\n    if (['x', 'y'].indexOf(dimension) === -1) {\n        throw new Error('Invalid dimension identifier passed to LocusZoom.DataLayer.getAxisExtent()');\n    }\n\n    var axis_name = dimension + '_axis';\n    var axis_layout = this.layout[axis_name];\n\n    // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n    if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)) {\n        return [+axis_layout.floor, +axis_layout.ceiling];\n    }\n\n    // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n    var data_extent = [];\n    if (axis_layout.field && this.data) {\n        if (!this.data.length) {\n            // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n            //  because we don't need padding around an empty screen)\n            data_extent = axis_layout.min_extent || [];\n            return data_extent;\n        } else {\n            data_extent = this._getDataExtent(this.data, axis_layout);\n\n            // Apply upper/lower buffers, if applicable\n            var original_extent_span = data_extent[1] - data_extent[0];\n            if (!isNaN(axis_layout.lower_buffer)) {\n                data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n            }\n            if (!isNaN(axis_layout.upper_buffer)) {\n                data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n            }\n\n            if (typeof axis_layout.min_extent == 'object') {\n                // The data should span at least the range specified by min_extent, an array with [low, high]\n                var range_min = axis_layout.min_extent[0];\n                var range_max = axis_layout.min_extent[1];\n                if (!isNaN(range_min) && !isNaN(range_max)) {\n                    data_extent[0] = Math.min(data_extent[0], range_min);\n                }\n                if (!isNaN(range_max)) {\n                    data_extent[1] = Math.max(data_extent[1], range_max);\n                }\n            }\n            // If specified, floor and ceiling will override the actual data range\n            return [\n                isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling\n            ];\n        }\n    }\n\n    // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n    // then default to using the state-defined region as the extent\n    if (dimension === 'x' && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n        return [this.state.start, this.state.end];\n    }\n\n    // No conditions met for generating a valid extent, return an empty array\n    return [];\n\n};\n\n/**\n * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n *\n *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n *\n * @param {('x'|'y1'|'y2')} dimension\n * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n *   and meanings of these parameters may vary between different data layers.\n * @returns {Object[]}\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.DataLayer.prototype.getTicks = function (dimension, config) {\n    if (['x', 'y1', 'y2'].indexOf(dimension) === -1) {\n        throw new Error('Invalid dimension identifier at layer level' + dimension);\n    }\n    return [];\n};\n\n/**\n * Generate a tool tip for a given element\n * @param {String|Object} data Data for the element associated with the tooltip\n */\nLocusZoom.DataLayer.prototype.createTooltip = function(data) {\n    if (typeof this.layout.tooltip != 'object') {\n        throw new Error('DataLayer [' + this.id + '] layout does not define a tooltip');\n    }\n    var id = this.getElementId(data);\n    if (this.tooltips[id]) {\n        this.positionTooltip(id);\n        return;\n    }\n    this.tooltips[id] = {\n        data: data,\n        arrow: null,\n        selector: d3.select(this.parent_plot.svg.node().parentNode).append('div')\n            .attr('class', 'lz-data_layer-tooltip')\n            .attr('id', id + '-tooltip')\n    };\n    this.layer_state.status_flags['has_tooltip'].push(id);\n    this.updateTooltip(data);\n    return this;\n};\n\n/**\n * Update a tool tip (generate its inner HTML)\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.updateTooltip = function(d, id) {\n    if (typeof id == 'undefined') { id = this.getElementId(d); }\n    // Empty the tooltip of all HTML (including its arrow!)\n    this.tooltips[id].selector.html('');\n    this.tooltips[id].arrow = null;\n    // Set the new HTML\n    if (this.layout.tooltip.html) {\n        this.tooltips[id].selector.html(LocusZoom.parseFields(d, this.layout.tooltip.html));\n    }\n    // If the layout allows tool tips on this data layer to be closable then add the close button\n    // and add padding to the tooltip to accommodate it\n    if (this.layout.tooltip.closable) {\n        this.tooltips[id].selector.insert('button', ':first-child')\n            .attr('class', 'lz-tooltip-close-button')\n            .attr('title', 'Close')\n            .text('×')\n            .on('click', function() {\n                this.destroyTooltip(id);\n            }.bind(this));\n    }\n    // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n    this.tooltips[id].selector.data([d]);\n    // Reposition and draw a new arrow\n    this.positionTooltip(id);\n    return this;\n};\n\n/**\n * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n * @param {String|Object} element_or_id The element (or id) associated with the tooltip\n * @param {boolean} [temporary=false] Whether this is temporary (not to be tracked in state). Differentiates\n *  \"recreate tooltips on re-render\" (which is temporary) from \"user has closed this tooltip\" (permanent)\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyTooltip = function(element_or_id, temporary) {\n    var id;\n    if (typeof element_or_id == 'string') {\n        id = element_or_id;\n    } else {\n        id = this.getElementId(element_or_id);\n    }\n    if (this.tooltips[id]) {\n        if (typeof this.tooltips[id].selector == 'object') {\n            this.tooltips[id].selector.remove();\n        }\n        delete this.tooltips[id];\n    }\n    // When a tooltip is removed, also remove the reference from the state\n    if (!temporary) {\n        var state = this.layer_state.status_flags['has_tooltip'];\n        var label_mark_position = state.indexOf(id);\n        state.splice(label_mark_position, 1);\n    }\n    return this;\n};\n\n/**\n * Loop through and destroy all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyAllTooltips = function() {\n    for (var id in this.tooltips) {\n        this.destroyTooltip(id, true);\n    }\n    return this;\n};\n\n//\n/**\n * Position tool tip - naïve function to place a tool tip to the lower right of the current mouse element\n *   Most data layers reimplement this method to position tool tips specifically for the data they display\n * @param {String} id The identifier of the tooltip to position\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionTooltip = function(id) {\n    if (typeof id != 'string') {\n        throw new Error('Unable to position tooltip: id is not a string');\n    }\n    // Position the div itself\n    this.tooltips[id].selector\n        .style('left', (d3.event.pageX) + 'px')\n        .style('top', (d3.event.pageY) + 'px');\n    // Create / update position on arrow connecting tooltip to data\n    if (!this.tooltips[id].arrow) {\n        this.tooltips[id].arrow = this.tooltips[id].selector.append('div')\n            .style('position', 'absolute')\n            .attr('class', 'lz-data_layer-tooltip-arrow_top_left');\n    }\n    this.tooltips[id].arrow\n        .style('left', '-1px')\n        .style('top', '-1px');\n    return this;\n};\n\n/**\n * Loop through and position all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionAllTooltips = function() {\n    for (var id in this.tooltips) {\n        this.positionTooltip(id);\n    }\n    return this;\n};\n\n/**\n * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n * @param {String|Object} element The element associated with the tooltip\n * @param {boolean} first_time Because panels can re-render, the rules for showing a tooltip\n *  depend on whether this is the first time a status change affecting display has been applied.\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.showOrHideTooltip = function(element, first_time) {\n    if (typeof this.layout.tooltip != 'object') { return; }\n    var id = this.getElementId(element);\n\n    /**\n     * Apply rules and decide whether to show or hide the tooltip\n     * @param {Object} statuses All statuses that apply to an element\n     * @param {String[]|object} directive A layout directive object\n     * @param operator\n     * @returns {null|bool}\n     */\n    var resolveStatus = function(statuses, directive, operator) {\n        var status = null;\n        if (typeof statuses != 'object' || statuses === null) { return null; }\n        if (Array.isArray(directive)) {\n            // This happens when the function is called on the inner part of the directive\n            operator = operator || 'and';\n            if (directive.length === 1) {\n                status = statuses[directive[0]];\n            } else {\n                status = directive.reduce(function(previousValue, currentValue) {\n                    if (operator === 'and') {\n                        return statuses[previousValue] && statuses[currentValue];\n                    } else if (operator === 'or') {\n                        return statuses[previousValue] || statuses[currentValue];\n                    }\n                    return null;\n                });\n            }\n        } else if (typeof directive == 'object') {\n            var sub_status;\n            for (var sub_operator in directive) {\n                sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                if (status === null) {\n                    status = sub_status;\n                } else if (operator === 'and') {\n                    status = status && sub_status;\n                } else if (operator === 'or') {\n                    status = status || sub_status;\n                }\n            }\n        } else {\n            return false;\n        }\n        return status;\n    };\n\n    var show_directive = {};\n    if (typeof this.layout.tooltip.show == 'string') {\n        show_directive = { and: [ this.layout.tooltip.show ] };\n    } else if (typeof this.layout.tooltip.show == 'object') {\n        show_directive = this.layout.tooltip.show;\n    }\n\n    var hide_directive = {};\n    if (typeof this.layout.tooltip.hide == 'string') {\n        hide_directive = { and: [ this.layout.tooltip.hide ] };\n    } else if (typeof this.layout.tooltip.hide == 'object') {\n        hide_directive = this.layout.tooltip.hide;\n    }\n\n    // Find all the statuses that apply to just this single element\n    var layer_state = this.layer_state;\n    var statuses = {};  // {status_name: bool}\n    LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status) {\n        var antistatus = 'un' + status;\n        statuses[status] = (layer_state.status_flags[status].indexOf(id) !== -1);\n        statuses[antistatus] = !statuses[status];\n    });\n\n    // Decide whether to show/hide the tooltip based solely on the underlying element\n    var show_resolved = resolveStatus(statuses, show_directive);\n    var hide_resolved = resolveStatus(statuses, hide_directive);\n\n    // Most of the tooltip display logic depends on behavior layouts: was point (un)selected, (un)highlighted, etc.\n    // But sometimes, a point is selected, and the user then closes the tooltip. If the panel is re-rendered for\n    //  some outside reason (like state change), we must track this in the create/destroy events as tooltip state.\n    var has_tooltip = (layer_state.status_flags['has_tooltip'].indexOf(id) !== -1);\n    var tooltip_was_closed = first_time ? false : !has_tooltip;\n    if (show_resolved && !tooltip_was_closed && !hide_resolved) {\n        this.createTooltip(element);\n    } else {\n        this.destroyTooltip(element);\n    }\n\n    return this;\n};\n\n/**\n * Find the elements (or indices) that match any of a set of provided filters\n * @protected\n * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n *   [field, operator, value] for other operators\n * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n *   elements, or references to the elements themselves\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filter = function(filters, return_type) {\n    if (typeof return_type == 'undefined' || ['indexes','elements'].indexOf(return_type) === -1) {\n        return_type = 'indexes';\n    }\n    if (!Array.isArray(filters)) { return []; }\n    var test = function(element, filter) {\n        var operators = {\n            '=': function(a,b) { return a === b; },\n            // eslint-disable-next-line eqeqeq\n            '!=': function(a,b) { return a != b; }, // For absence of a value, deliberately allow weak comparisons (eg undefined/null)\n            '<': function(a,b) { return a < b; },\n            '<=': function(a,b) { return a <= b; },\n            '>': function(a,b) { return a > b; },\n            '>=': function(a,b) { return a >= b; },\n            '%': function(a,b) { return a % b; }\n        };\n        if (!Array.isArray(filter)) { return false; }\n        if (filter.length === 2) {\n            return element[filter[0]] === filter[1];\n        } else if (filter.length === 3 && operators[filter[1]]) {\n            return operators[filter[1]](element[filter[0]], filter[2]);\n        } else {\n            return false;\n        }\n    };\n    var matches = [];\n    this.data.forEach(function(element, idx) {\n        var match = true;\n        filters.forEach(function(filter) {\n            if (!test(element, filter)) { match = false; }\n        });\n        if (match) { matches.push(return_type === 'indexes' ? idx : element); }\n    });\n    return matches;\n};\n\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterIndexes = function(filters) { return this.filter(filters, 'indexes'); };\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterElements = function(filters) { return this.filter(filters, 'elements'); };\n\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx) {\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = 'un' + verb;\n    // Set/unset a single element's status\n    // TODO: Improve documentation for dynamically generated methods/properties\n    LocusZoom.DataLayer.prototype[verb + 'Element'] = function(element, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + 'Element'] = function(element, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.DataLayer.prototype[verb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.DataLayer.prototype[antiverb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.DataLayer.prototype[verb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n/**\n * Toggle a status (e.g. highlighted, selected, identified) on an element\n * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n * @param {String|Object} element The data bound to the element of interest\n * @param {Boolean} active True to add the status (and associated CSS styles); false to remove it\n * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatus = function(status, element, active, exclusive) {\n    if (status === 'has_tooltip') {\n        // This is a special adjective that exists solely to track tooltip state. It has no CSS and never gets set\n        //  directly. It is invisible to the official enums.\n        return this;\n    }\n    if (typeof active == 'undefined') {\n        active = true;\n    }\n\n    // Get an ID for the element or return having changed nothing\n    try {\n        var element_id = this.getElementId(element);\n    } catch (get_element_id_error) {\n        return this;\n    }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive) {\n        this.setAllElementStatus(status, !active);\n    }\n\n    // Set/unset the proper status class on the appropriate DOM element(s)\n    d3.select('#' + element_id).classed('lz-data_layer-' + this.layout.type + '-' + status, active);\n    var element_status_node_id = this.getElementStatusNodeId(element);\n    if (element_status_node_id !== null) {\n        d3.select('#' + element_status_node_id).classed('lz-data_layer-' + this.layout.type + '-statusnode-' + status, active);\n    }\n\n    // Track element ID in the proper status state array\n    var element_status_idx = this.layer_state.status_flags[status].indexOf(element_id);\n    var added_status = (element_status_idx === -1);  // On a re-render, existing statuses will be reapplied.\n    if (active && added_status) {\n        this.layer_state.status_flags[status].push(element_id);\n    }\n    if (!active && !added_status) {\n        this.layer_state.status_flags[status].splice(element_status_idx, 1);\n    }\n\n    // Trigger tool tip show/hide logic\n    this.showOrHideTooltip(element, added_status);\n\n    // Trigger layout changed event hook\n    if (added_status) {\n        this.parent.emit('layout_changed', true);\n    }\n\n    var is_selected =  (status === 'selected');\n    if (is_selected && (added_status || !active)) {\n        // Notify parents that an element has changed selection status (either active, or inactive)\n        this.parent.emit('element_selection', { element: element, active: active }, true);\n    }\n\n    var value_to_broadcast = (this.layout.match && this.layout.match.send);\n    if (is_selected && value_to_broadcast && (added_status || !active)) {\n        this.parent.emit(\n            'match_requested',\n            { value: element[value_to_broadcast], active: active },\n            true\n        );\n    }\n    return this;\n};\n\n/**\n * Toggle a status on elements in the data layer based on a set of filters\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive) {\n\n    // Sanity check\n    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n        throw new Error('Invalid status passed to DataLayer.setElementStatusByFilters()');\n    }\n    if (typeof this.layer_state.status_flags[status] == 'undefined') { return this; }\n    if (typeof toggle == 'undefined') { toggle = true; } else { toggle = !!toggle; }\n    if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n    if (!Array.isArray(filters)) { filters = []; }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive) {\n        this.setAllElementStatus(status, !toggle);\n    }\n\n    // Apply statuses\n    this.filterElements(filters).forEach(function(element) {\n        this.setElementStatus(status, element, toggle);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Toggle a status on all elements in the data layer\n * @param {String} status\n * @param {Boolean} toggle\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setAllElementStatus = function(status, toggle) {\n\n    // Sanity check\n    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n        throw new Error('Invalid status passed to DataLayer.setAllElementStatus()');\n    }\n    if (typeof this.layer_state.status_flags[status] == 'undefined') { return this; }\n    if (typeof toggle == 'undefined') { toggle = true; }\n\n    var self = this;\n    // Apply statuses\n    if (toggle) {\n        this.data.forEach(function(element) {\n            self.setElementStatus(status, element, true);\n        });\n    } else {\n        var status_ids = this.layer_state.status_flags[status].slice();\n        status_ids.forEach(function(id) {\n            var element = self.getElementById(id);\n            if (typeof element == 'object' && element !== null) {\n                self.setElementStatus(status, element, false);\n            }\n        });\n        this.layer_state.status_flags[status] = [];\n    }\n\n    // Update global status flag\n    this.global_statuses[status] = toggle;\n\n    return this;\n};\n\n/**\n * Annotations provide a way to save user-driven additions and have them persist across render. They can be referenced\n *  as a named pseudo-field in any filters and scalable parameters. (template support may be added in the future)\n * Sample use case: user clicks a tooltip to \"label this specific point\". (or change any other display property)\n * @param {String|Object} element The data object or ID string for the element\n * @param {String} key The name of the annotation to track\n * @param {*} value The value of the marked field\n */\nLocusZoom.DataLayer.prototype.setElementAnnotation = function (element, key, value) {\n    var id = this.getElementId(element);\n    if (!this.layer_state.extra_fields[id]) {\n        this.layer_state.extra_fields[id] = {};\n    }\n    this.layer_state.extra_fields[id][key] = value;\n    return this;\n};\n\nLocusZoom.DataLayer.prototype.getElementAnnotation = function (element, key) {\n    var id = this.getElementId(element);\n    var extra = this.layer_state.extra_fields[id];\n    return extra && extra[key];\n};\n\n/**\n * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n * @param {d3.selection} selection\n */\nLocusZoom.DataLayer.prototype.applyBehaviors = function(selection) {\n    if (typeof this.layout.behaviors != 'object') { return; }\n    Object.keys(this.layout.behaviors).forEach(function(directive) {\n        var event_match = /(click|mouseover|mouseout)/.exec(directive);\n        if (!event_match) { return; }\n        selection.on(event_match[0] + '.' + directive, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n    }.bind(this));\n};\n\n/**\n * Generate a function that executes an arbitrary list of behaviors on an element during an event\n * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n * @param {Object} behaviors An object describing the behavior to attach to this single element\n * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n *  selected, etc)\n * @param {string} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n * @returns {function(this:LocusZoom.DataLayer)} Return a function that handles the event in context with the behavior\n *   and the element- can be attached as an event listener\n */\nLocusZoom.DataLayer.prototype.executeBehaviors = function(directive, behaviors) {\n\n    // Determine the required state of control and shift keys during the event\n    var requiredKeyStates = {\n        'ctrl': (directive.indexOf('ctrl') !== -1),\n        'shift': (directive.indexOf('shift') !== -1)\n    };\n    var self = this;\n    return function(element) {\n\n        // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n        if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey) { return; }\n\n        // Loop through behaviors making each one go in succession\n        behaviors.forEach(function(behavior) {\n\n            // Route first by the action, if defined\n            if (typeof behavior != 'object' || behavior === null) { return; }\n\n            switch (behavior.action) {\n\n            // Set a status (set to true regardless of current status, optionally with exclusivity)\n            case 'set':\n                self.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                break;\n\n            // Unset a status (set to false regardless of current status, optionally with exclusivity)\n            case 'unset':\n                self.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                break;\n\n            // Toggle a status\n            case 'toggle':\n                var current_status_boolean = (self.layer_state.status_flags[behavior.status].indexOf(self.getElementId(element)) !== -1);\n                var exclusive = behavior.exclusive && !current_status_boolean;\n                self.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                break;\n\n            // Link to a dynamic URL\n            case 'link':\n                if (typeof behavior.href == 'string') {\n                    var url = LocusZoom.parseFields(element, behavior.href);\n                    if (typeof behavior.target == 'string') {\n                        window.open(url, behavior.target);\n                    } else {\n                        window.location.href = url;\n                    }\n                }\n                break;\n\n            // Action not defined, just return\n            default:\n                break;\n\n            }\n            return;\n        });\n    };\n};\n\n/**\n * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n *   Necessary for positioning any HTML elements over the panel\n * @returns {{x: Number, y: Number}}\n */\nLocusZoom.DataLayer.prototype.getPageOrigin = function() {\n    var panel_origin = this.parent.getPageOrigin();\n    return {\n        x: panel_origin.x + this.parent.layout.margin.left,\n        y: panel_origin.y + this.parent.layout.margin.top\n    };\n};\n\n/**\n * Get a data layer's current underlying data in a standard format (e.g. JSON or CSV)\n * @param {('csv'|'tsv'|'json')} format How to export the data\n * @returns {*}\n */\nLocusZoom.DataLayer.prototype.exportData = function(format) {\n    var default_format = 'json';\n    format = format || default_format;\n    format = (typeof format == 'string' ? format.toLowerCase() : default_format);\n    if (['json','csv','tsv'].indexOf(format) === -1) { format = default_format; }\n    var ret;\n    switch (format) {\n    case 'json':\n        try {\n            ret = JSON.stringify(this.data);\n        } catch (e) {\n            ret = null;\n            console.warn('Unable to export JSON data from data layer: ' + this.getBaseId());\n            console.error(e);\n        }\n        break;\n    case 'tsv':\n    case 'csv':\n        try {\n            var jsonified = JSON.parse(JSON.stringify(this.data));\n            if (typeof jsonified != 'object') {\n                ret = jsonified.toString();\n            } else if (!Array.isArray(jsonified)) {\n                ret = 'Object';\n            } else {\n                var delimiter = (format === 'tsv') ? '\\t' : ',';\n                var header = this.layout.fields.map(function(header) {\n                    return JSON.stringify(header);\n                }).join(delimiter) + '\\n';\n                ret = header + jsonified.map(function(record) {\n                    return this.layout.fields.map(function(field) {\n                        if (typeof record[field] == 'undefined') {\n                            return JSON.stringify(null);\n                        } else if (typeof record[field] == 'object' && record[field] !== null) {\n                            return Array.isArray(record[field]) ? '\"[Array(' + record[field].length + ')]\"' : '\"[Object]\"';\n                        } else {\n                            return JSON.stringify(record[field]);\n                        }\n                    }).join(delimiter);\n                }.bind(this)).join('\\n');\n            }\n        } catch (e) {\n            ret = null;\n            console.error('Unable to export CSV data from data layer: ' + this.getBaseId() + ';', e);\n        }\n        break;\n    }\n    return ret;\n};\n\n/**\n * Apply all tracked element statuses. This is primarily intended for re-rendering the plot, in order to preserve\n *  behaviors when items are updated.\n */\nLocusZoom.DataLayer.prototype.applyAllElementStatus = function () {\n    var status_flags = this.layer_state.status_flags;\n    var self = this;\n    for (var property in status_flags) {\n        if (!status_flags.hasOwnProperty(property)) { continue; }\n        if (Array.isArray(status_flags[property])) {\n            status_flags[property].forEach(function(element_id) {\n                try {\n                    self.setElementStatus(property, self.getElementById(element_id), true);\n                } catch (e) {\n                    console.warn('Unable to apply state: ' + self.state_id + ', ' + property);\n                    console.error(e);\n                }\n            });\n        }\n    }\n};\n\n/**\n * Position the datalayer and all tooltips\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.draw = function() {\n    this.svg.container.attr('transform', 'translate(' + this.parent.layout.cliparea.origin.x +  ',' + this.parent.layout.cliparea.origin.y + ')');\n    this.svg.clipRect\n        .attr('width', this.parent.layout.cliparea.width)\n        .attr('height', this.parent.layout.cliparea.height);\n    this.positionAllTooltips();\n    return this;\n};\n\n\n/**\n * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n * @return {Promise}\n */\nLocusZoom.DataLayer.prototype.reMap = function() {\n    this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n    // and then recreated if returning to visibility\n\n    // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n    var promise = this.parent_plot.lzd.getData(this.state, this.layout.fields);\n    promise.then(function(new_data) {\n        this.data = new_data.body;\n        this.applyDataMethods();\n        this.initialized = true;\n    }.bind(this));\n\n    return promise;\n};\n\n\n/**\n * The central registry of known data layer definitions (which may be stored in separate files due to length)\n * @namespace\n */\nLocusZoom.DataLayers = (function() {\n    var obj = {};\n    var datalayers = {};\n    /**\n     * @name LocusZoom.DataLayers.get\n     * @param {String} name The name of the datalayer\n     * @param {Object} layout The configuration object for this data layer\n     * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n     * @returns {LocusZoom.DataLayer}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (datalayers[name]) {\n            if (typeof layout != 'object') {\n                throw new Error('invalid layout argument for data layer [' + name + ']');\n            } else {\n                return new datalayers[name](layout, parent);\n            }\n        } else {\n            throw new Error('data layer [' + name + '] not found');\n        }\n    };\n\n    /**\n     * @name LocusZoom.DataLayers.set\n     * @protected\n     * @param {String} name\n     * @param {Function} datalayer Constructor for the datalayer\n     */\n    obj.set = function(name, datalayer) {\n        if (datalayer) {\n            if (typeof datalayer != 'function') {\n                throw new Error('unable to set data layer [' + name + '], argument provided is not a function');\n            } else {\n                datalayers[name] = datalayer;\n                datalayers[name].prototype = new LocusZoom.DataLayer();\n            }\n        } else {\n            delete datalayers[name];\n        }\n    };\n\n    /**\n     * Add a new type of datalayer to the registry of known layer types\n     * @name LocusZoom.DataLayers.add\n     * @param {String} name The name of the data layer to register\n     * @param {Function} datalayer\n     */\n    obj.add = function(name, datalayer) {\n        if (datalayers[name]) {\n            throw new Error('data layer already exists with name: ' + name);\n        } else {\n            obj.set(name, datalayer);\n        }\n    };\n\n    /**\n     * Register a new datalayer that inherits and extends basic behaviors from a known datalayer\n     * @param {String} parent_name The name of the parent data layer whose behavior is to be extended\n     * @param {String} name The name of the new datalayer to register\n     * @param {Object} [overrides] Object of properties and methods to combine with the prototype of the parent datalayer\n     * @returns {Function} The constructor for the new child class\n     */\n    obj.extend = function(parent_name, name, overrides) {\n        // TODO: Consider exposing additional constructor argument, if there is a use case for very granular extension\n        overrides = overrides || {};\n\n        var parent = datalayers[parent_name];\n        if (!parent) {\n            throw new Error('Attempted to subclass an unknown or unregistered datalayer type');\n        }\n        if (typeof overrides !== 'object') {\n            throw new Error('Must specify an object of properties and methods');\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        // Bypass .set() because we want a layer of inheritance below `DataLayer`\n        datalayers[name] = child;\n        return child;\n    };\n\n    /**\n     * List the names of all known datalayers\n     * @name LocusZoom.DataLayers.list\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(datalayers);\n    };\n\n    return obj;\n})();\n","'use strict';\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @class LocusZoom.DataLayers.annotation_track\n * @augments LocusZoom.DataLayer\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `LocusZoom.DataLayer.filter` for details\n */\nLocusZoom.DataLayers.add('annotation_track', function(layout) {\n    // In the future we may add additional options for controlling marker size/ shape, based on user feedback\n    this.DefaultLayout = {\n        color: '#000000',\n        filters: [],\n        tooltip_positioning: 'middle', // Allowed values: top, middle, bottom\n        hit_area_width: 8,\n    };\n\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    if (!Array.isArray(layout.filters)) {\n        throw new Error('Annotation track must specify array of filters for selecting points to annotate');\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    this.render = function() {\n        var self = this;\n        // Only render points that currently satisfy all provided filter conditions.\n        var trackData = this.filter(this.layout.filters, 'elements');\n\n        // Put the <g> containing visible lines before the one containing hit areas, so that the hit areas will be on top.\n        var visible_lines_group = this.svg.group.select('g.lz-data_layer-' + self.layout.type + '-visible_lines');\n        if (visible_lines_group.size() === 0) {\n            visible_lines_group = this.svg.group.append('g').attr('class', 'lz-data_layer-' + self.layout.type + '-visible_lines');\n        }\n        var selection = visible_lines_group.selectAll('rect.lz-data_layer-' + self.layout.type)\n            .data(trackData, function (d) { return d[self.layout.id_field]; });\n\n        // Draw rectangles (visual and tooltip positioning)\n        selection.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-' + this.layout.type)\n            .attr('id', function (d) { return self.getElementId(d); });\n\n        var width = 1;\n        selection\n            .attr('x', function (d) {return self.parent['x_scale'](d[self.layout.x_axis.field]) - width / 2; })\n            .attr('width', width)\n            .attr('height', self.parent.layout.height)\n            .attr('fill', function(d) { return self.resolveScalableParameter(self.layout.color, d); });\n\n        // Remove unused elements\n        selection.exit()\n            .remove();\n\n        var hit_areas_group = this.svg.group.select('g.lz-data_layer-' + self.layout.type + '-hit_areas');\n        if (hit_areas_group.size() === 0) {\n            hit_areas_group = this.svg.group.append('g').attr('class', 'lz-data_layer-' + self.layout.type + '-hit_areas');\n        }\n        var hit_areas_selection = hit_areas_group.selectAll('rect.lz-data_layer-' + self.layout.type)\n            .data(trackData, function (d) { return d[self.layout.id_field]; });\n\n        // Add new elements as needed\n        hit_areas_selection.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-' + this.layout.type)\n            .attr('id', function (d) { return self.getElementId(d); });\n\n        // Update the set of elements to reflect new data\n\n        var _getX = function (d, i) { // Helper for position calcs below\n            var x_center = self.parent['x_scale'](d[self.layout.x_axis.field]);\n            var x_left = x_center - self.layout.hit_area_width / 2;\n            if (i >= 1) {\n                // This assumes that the data are in sorted order.\n                var left_node = trackData[i - 1];\n                var left_node_x_center = self.parent['x_scale'](left_node[self.layout.x_axis.field]);\n                x_left = Math.max(x_left, (x_center + left_node_x_center) / 2);\n            }\n            return [x_left, x_center];\n        };\n        hit_areas_selection\n            .attr('height', self.parent.layout.height)\n            .attr('opacity', 0)\n            .attr('x', function (d, i) {\n                var crds = _getX(d,i);\n                return crds[0];\n            }).attr('width', function (d, i) {\n                var crds = _getX(d,i);\n                return (crds[1] - crds[0]) + self.layout.hit_area_width / 2;\n            });\n\n        // Remove unused elements\n        hit_areas_selection.exit().remove();\n\n        // Set up tooltips and mouse interaction\n        this.applyBehaviors(hit_areas_selection);\n    };\n\n    // Reimplement the positionTooltip() method to be annotation-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var offset = stroke_width / 2;\n        var page_origin = this.getPageOrigin();\n\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_center = data_layer_height / 2;\n\n        // Tooltip should be horizontally centered above the point to be annotated. (or below if space is limited)\n        var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n        left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n        arrow_left = (tooltip_box.width / 2) - (arrow_width) + offset_left - offset_right - offset;\n\n        var top_offset = 0;\n        switch(this.layout.tooltip_positioning) {\n        case 'top':\n            arrow_type = 'down';\n            break;\n        case 'bottom':\n            top_offset = data_layer_height;\n            arrow_type = 'up';\n            break;\n        case 'middle':\n        default:\n            var position = d3.mouse(this.svg.container.node());\n            // Position the tooltip so that it does not overlap the mouse pointer\n            top_offset = y_center;\n            if (position[1] > (data_layer_height / 2)) {\n                arrow_type = 'down';\n            } else {\n                arrow_type = 'up';\n            }\n        }\n\n        if (arrow_type === 'up') {\n            top = page_origin.y + top_offset + stroke_width + arrow_width;\n            arrow_top = 0 - stroke_width - arrow_width;\n        } else if (arrow_type === 'down') {\n            top = page_origin.y + top_offset - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_top = tooltip_box.height - stroke_width;\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    return this;\n});\n","'use strict';\n\n/**\n * Forest Data Layer\n * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n *  and extent in advance.\n *\n * If you are using dynamically fetched data, consider using `category_forest` instead.\n *\n * @class LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.add('forest', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: 'square',\n        color: '#888888',\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2\n        },\n        id_field: 'id',\n        confidence_intervals: {\n            start_field: 'ci_start',\n            end_field: 'ci_end'\n        },\n        show_no_significance_line: true\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be forest-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = 'y' + this.layout.y_axis.axis + '_scale';\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        // Position horizontally on the left or the right depending on which side of the plot the point is on\n        var offset = Math.sqrt(point_size / Math.PI);\n        var left, arrow_type, arrow_left;\n        if (x_center <= this.parent.layout.width / 2) {\n            left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n            arrow_type = 'left';\n            arrow_left = -1 * (arrow_width + stroke_width);\n        } else {\n            left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n            arrow_type = 'right';\n            arrow_left = tooltip_box.width - stroke_width;\n        }\n        // Position vertically centered unless we're at the top or bottom of the plot\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var top, arrow_top;\n        if (y_center - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n            top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n            arrow_top = border_radius;\n        } else if (y_center + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n            top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n            arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n        } else { // vertically centered\n            top = page_origin.y + y_center - (tooltip_box.height / 2);\n            arrow_top = (tooltip_box.height / 2) - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    // Implement the main render function\n    this.render = function() {\n\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n\n        // Generate confidence interval paths if fields are defined\n        if (this.layout.confidence_intervals\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.start_field) !== -1\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.end_field) !== -1) {\n            // Generate a selection for all forest plot confidence intervals\n            var ci_selection = this.svg.group\n                .selectAll('rect.lz-data_layer-forest.lz-data_layer-forest-ci')\n                .data(this.data, function(d) { return d[this.layout.id_field]; }.bind(this));\n            // Create confidence interval rect elements\n            ci_selection.enter()\n                .append('rect')\n                .attr('class', 'lz-data_layer-forest lz-data_layer-forest-ci')\n                .attr('id', function(d) { return this.getElementId(d) + '_ci'; }.bind(this))\n                .attr('transform', 'translate(0,' + (isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height) + ')');\n            // Apply position and size parameters using transition if necessary\n            var ci_transform = function(d) {\n                var x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)) { x = -1000; }\n                if (isNaN(y)) { y = -1000; }\n                return 'translate(' + x + ',' + y + ')';\n            }.bind(this);\n            var ci_width = function(d) {\n                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                     - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n            }.bind(this);\n            var ci_height = 1;\n            if (this.canTransition()) {\n                ci_selection\n                    .transition()\n                    .duration(this.layout.transition.duration || 0)\n                    .ease(this.layout.transition.ease || 'cubic-in-out')\n                    .attr('transform', ci_transform)\n                    .attr('width', ci_width).attr('height', ci_height);\n            } else {\n                ci_selection\n                    .attr('transform', ci_transform)\n                    .attr('width', ci_width).attr('height', ci_height);\n            }\n            // Remove old elements as needed\n            ci_selection.exit().remove();\n        }\n\n        // Generate a selection for all forest plot points\n        var points_selection = this.svg.group\n            .selectAll('path.lz-data_layer-forest.lz-data_layer-forest-point')\n            .data(this.data, function(d) { return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        points_selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-forest lz-data_layer-forest-point')\n            .attr('id', function(d) { return this.getElementId(d); }.bind(this))\n            .attr('transform', 'translate(0,' + initial_y + ')');\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)) { x = -1000; }\n            if (isNaN(y)) { y = -1000; }\n            return 'translate(' + x + ',' + y + ')';\n        }.bind(this);\n\n        var fill = function(d) { return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d) { return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d) { return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d) { return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n        if (this.canTransition()) {\n            points_selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        } else {\n            points_selection\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        }\n\n        // Remove old elements as needed\n        points_selection.exit().remove();\n\n        // Apply default event emitters to selection\n        points_selection.on('click.event_emitter', function(element_data) {\n            this.parent.emit('element_clicked', element_data, true);\n        }.bind(this));\n\n        // Apply behaviors to points\n        this.applyBehaviors(points_selection);\n    };\n    return this;\n\n});\n\n/**\n * A y-aligned forest plot in which the y-axis represents item labels, which are dynamically chosen when data is loaded.\n *   Each item is assumed to include both data and confidence intervals.\n *   This allows generating forest plots without defining the layout in advance.\n *\n * @class LocusZoom.DataLayers.category_forest\n * @augments LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.extend('forest', 'category_forest', {\n    _getDataExtent: function(data, axis_config) {\n        // In a forest plot, the data range is determined by *three* fields (beta + CI start/end)\n        var ci_config = this.layout.confidence_intervals;\n        if (ci_config\n            && this.layout.fields.indexOf(ci_config.start_field) !== -1\n            && this.layout.fields.indexOf(ci_config.end_field) !== -1) {\n            var min = function(d) {\n                var f = new LocusZoom.Data.Field(ci_config.start_field);\n                return +f.resolve(d);\n            };\n\n            var max = function(d) {\n                var f = new LocusZoom.Data.Field(ci_config.end_field);\n                return +f.resolve(d);\n            };\n\n            return [d3.min(data, min), d3.max(data, max)];\n        }\n\n        // If there are no confidence intervals set, then range must depend only on a single field\n        return LocusZoom.DataLayer.prototype._getDataExtent.call(this, data, axis_config);\n    },\n\n    getTicks: function(dimension, config) { // Overrides parent method\n        if (['x', 'y1', 'y2'].indexOf(dimension) === -1) {\n            throw new Error('Invalid dimension identifier' + dimension);\n        }\n\n        // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n        // Also assumes that every tick gets assigned a unique matching label\n        var axis_num = this.layout.y_axis.axis;\n        if (dimension === ('y' + axis_num)) {\n            var category_field = this.layout.y_axis.category_field;\n            if (!category_field) {\n                throw new Error('Layout for ' + this.layout.id + ' must specify category_field');\n            }\n\n            return this.data.map(function (item, index) {\n                return {\n                    y: index + 1,\n                    text: item[category_field]\n                };\n            });\n        } else {\n            return [];\n        }\n    },\n\n    applyCustomDataMethods: function () {\n        // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n        //  correct extents.\n        var field_to_add = this.layout.y_axis.field;\n        if (!field_to_add) {\n            throw new Error('Layout for ' + this.layout.id + ' must specify yaxis.field');\n        }\n\n        this.data = this.data.map(function (item, index) {\n            item[field_to_add] = index + 1;\n            return item;\n        });\n        // Update axis extents based on one label for every point (with a bit of padding above and below)\n        this.layout.y_axis.floor = 0;\n        this.layout.y_axis.ceiling = this.data.length + 1;\n        return this;\n    }\n});\n","'use strict';\n\n/*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add('genes', function(layout) {\n    /**\n     * Define a default layout for this DataLayer type and merge it with the passed argument\n     * @protected\n     * @member {Object}\n     * */\n    this.DefaultLayout = {\n        // Optionally specify different fill and stroke properties\n        stroke: 'rgb(54, 54, 150)',\n        color: '#363696',\n        label_font_size: 12,\n        label_exon_spacing: 4,\n        exon_height: 16,\n        bounding_box_padding: 6,\n        track_vertical_spacing: 10\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element) {\n        return this.getElementId(element) + '-statusnode';\n    };\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    this.getTrackHeight = function() {\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    };\n\n    /**\n     * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n     * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n     * @member {number}\n     * @type {number}\n     */\n    this.transcript_idx = 0;\n\n    /**\n     * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n     *   over positions / assignments\n     * @protected\n     * @member {number}\n     */\n    this.tracks = 1;\n\n    /**\n     * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n     * @member {Object.<Number, Array>}\n     */\n    this.gene_track_index = { 1: [] };\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.assignTracks = function() {\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         *      TODO: Move to outer scope?\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        this.getLabelWidth = function(gene_name, font_size) {\n            try {\n                var temp_text = this.svg.group.append('text')\n                    .attr('x', 0).attr('y', 0).attr('class', 'lz-data_layer-genes lz-label')\n                    .style('font-size', font_size)\n                    .text(gene_name + '→');\n                var label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e) {\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        this.data.map(function(d, g) {\n\n            // If necessary, split combined gene id / version fields into discrete fields.\n            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n            if (this.data[g].gene_id && this.data[g].gene_id.indexOf('.')) {\n                var split = this.data[g].gene_id.split('.');\n                this.data[g].gene_id = split[0];\n                this.data[g].gene_version = split[1];\n            }\n\n            // Stash the transcript ID on the parent gene\n            this.data[g].transcript_id = this.data[g].transcripts[this.transcript_idx].transcript_id;\n\n            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n            // (range: values in terms of pixels on the screen)\n            this.data[g].display_range = {\n                start: this.parent.x_scale(Math.max(d.start, this.state.start)),\n                end:   this.parent.x_scale(Math.min(d.end, this.state.end))\n            };\n            this.data[g].display_range.label_width = this.getLabelWidth(this.data[g].gene_name, this.layout.label_font_size);\n            this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            // Determine label text anchor (default to middle)\n            this.data[g].display_range.text_anchor = 'middle';\n            if (this.data[g].display_range.width < this.data[g].display_range.label_width) {\n                if (d.start < this.state.start) {\n                    this.data[g].display_range.end = this.data[g].display_range.start\n                        + this.data[g].display_range.label_width\n                        + this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = 'start';\n                } else if (d.end > this.state.end) {\n                    this.data[g].display_range.start = this.data[g].display_range.end\n                        - this.data[g].display_range.label_width\n                        - this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = 'end';\n                } else {\n                    var centered_margin = ((this.data[g].display_range.label_width - this.data[g].display_range.width) / 2)\n                        + this.layout.label_font_size;\n                    if ((this.data[g].display_range.start - centered_margin) < this.parent.x_scale(this.state.start)) {\n                        this.data[g].display_range.start = this.parent.x_scale(this.state.start);\n                        this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = 'start';\n                    } else if ((this.data[g].display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                        this.data[g].display_range.end = this.parent.x_scale(this.state.end);\n                        this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = 'end';\n                    } else {\n                        this.data[g].display_range.start -= centered_margin;\n                        this.data[g].display_range.end += centered_margin;\n                    }\n                }\n                this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            }\n            // Add bounding box padding to the calculated display range start, end, and width\n            this.data[g].display_range.start -= this.layout.bounding_box_padding;\n            this.data[g].display_range.end   += this.layout.bounding_box_padding;\n            this.data[g].display_range.width += 2 * this.layout.bounding_box_padding;\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[g].display_domain = {\n                start: this.parent.x_scale.invert(this.data[g].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[g].display_range.end)\n            };\n            this.data[g].display_domain.width = this.data[g].display_domain.end - this.data[g].display_domain.start;\n\n            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n            this.data[g].track = null;\n            var potential_track = 1;\n            while (this.data[g].track === null) {\n                var collision_on_potential_track = false;\n                this.gene_track_index[potential_track].map(function(placed_gene) {\n                    if (!collision_on_potential_track) {\n                        var min_start = Math.min(placed_gene.display_range.start, this.display_range.start);\n                        var max_end = Math.max(placed_gene.display_range.end, this.display_range.end);\n                        if ((max_end - min_start) < (placed_gene.display_range.width + this.display_range.width)) {\n                            collision_on_potential_track = true;\n                        }\n                    }\n                }.bind(this.data[g]));\n                if (!collision_on_potential_track) {\n                    this.data[g].track = potential_track;\n                    this.gene_track_index[potential_track].push(this.data[g]);\n                } else {\n                    potential_track++;\n                    if (potential_track > this.tracks) {\n                        this.tracks = potential_track;\n                        this.gene_track_index[potential_track] = [];\n                    }\n                }\n            }\n\n            // Stash parent references on all genes, trascripts, and exons\n            this.data[g].parent = this;\n            this.data[g].transcripts.map(function(d, t) {\n                this.data[g].transcripts[t].parent = this.data[g];\n                this.data[g].transcripts[t].exons.map(function(d, e) {\n                    this.data[g].transcripts[t].exons[e].parent = this.data[g].transcripts[t];\n                }.bind(this));\n            }.bind(this));\n\n        }.bind(this));\n        return this;\n    };\n\n    /**\n     * Main render function\n     */\n    this.render = function() {\n\n        var self = this;\n        this.assignTracks();\n\n        var width, height, x, y;\n\n        // Render gene groups\n        var selection = this.svg.group.selectAll('g.lz-data_layer-genes')\n            .data(this.data, function(d) { return d.gene_name; });\n\n        selection.enter().append('g')\n            .attr('class', 'lz-data_layer-genes');\n\n        selection.attr('id', function(d) { return this.getElementId(d); }.bind(this))\n            .each(function(gene) {\n\n                var data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                var bboxes = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-data_layer-genes-statusnode')\n                    .data([gene], function(d) { return data_layer.getElementStatusNodeId(d); });\n\n                bboxes.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-data_layer-genes-statusnode');\n\n                bboxes\n                    .attr('id', function(d) {\n                        return data_layer.getElementStatusNodeId(d);\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    bboxes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    bboxes\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                bboxes.exit().remove();\n\n                // Render gene boundaries\n                var boundary_fill = function(d) { return self.resolveScalableParameter(self.layout.color, d); };\n                var boundary_stroke = function(d) { return self.resolveScalableParameter(self.layout.stroke, d); };\n                var boundaries = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-boundary')\n                    .data([gene], function(d) { return d.gene_name + '_boundary'; })\n                    .style({ fill: boundary_fill, stroke: boundary_stroke });\n\n                boundaries.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-boundary');\n\n                width = function(d) {\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function() {\n                    return 1; // TODO: scale dynamically?\n                };\n                x = function(d) {\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing\n                        + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                };\n                if (data_layer.canTransition()) {\n                    boundaries\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    boundaries\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                boundaries.exit().remove();\n\n                // Render gene labels\n                var labels = d3.select(this).selectAll('text.lz-data_layer-genes.lz-label')\n                    .data([gene], function(d) { return d.gene_name + '_label'; });\n\n                labels.enter().append('text')\n                    .attr('class', 'lz-data_layer-genes lz-label');\n\n                labels\n                    .attr('text-anchor', function(d) {\n                        return d.display_range.text_anchor;\n                    })\n                    .text(function(d) {\n                        return (d.strand === '+') ? d.gene_name + '→' : '←' + d.gene_name;\n                    })\n                    .style('font-size', gene.parent.layout.label_font_size);\n\n                x = function(d) {\n                    if (d.display_range.text_anchor === 'middle') {\n                        return d.display_range.start + (d.display_range.width / 2);\n                    } else if (d.display_range.text_anchor === 'start') {\n                        return d.display_range.start + data_layer.layout.bounding_box_padding;\n                    } else if (d.display_range.text_anchor === 'end') {\n                        return d.display_range.end - data_layer.layout.bounding_box_padding;\n                    }\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size;\n                };\n                if (data_layer.canTransition()) {\n                    labels\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('x', x).attr('y', y);\n                } else {\n                    labels\n                        .attr('x', x).attr('y', y);\n                }\n\n                labels.exit().remove();\n\n                // Render exon rects (first transcript only, for now)\n                // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                var exon_fill = function(d) { return self.resolveScalableParameter(self.layout.color, d.parent.parent); };\n                var exon_stroke = function(d) { return self.resolveScalableParameter(self.layout.stroke, d.parent.parent); };\n\n                var exons = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-exon')\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, function(d) { return d.exon_id; });\n\n                exons.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-exon');\n\n                exons\n                    .style({ fill: exon_fill, stroke: exon_stroke });\n\n                width = function(d) {\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function() {\n                    return data_layer.layout.exon_height;\n                };\n                x = function(d) {\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function() {\n                    return ((gene.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing;\n                };\n                if (data_layer.canTransition()) {\n                    exons\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    exons\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                exons.exit().remove();\n\n                // Render gene click area\n                var clickareas = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-clickarea')\n                    .data([gene], function(d) { return d.gene_name + '_clickarea'; });\n\n                clickareas.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-clickarea');\n\n                clickareas\n                    .attr('id', function(d) {\n                        return data_layer.getElementId(d) + '_clickarea';\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    clickareas\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on('click.event_emitter', function(element) {\n                    element.parent.parent.emit('element_clicked', element, true);\n                });\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be gene-specific\n     * @param {String} id\n     */\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        var gene_bbox = d3.select('#' + gene_bbox_id).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the gene that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var gene_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - gene_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + gene_center_x - data_layer_width, 0);\n        var left = page_origin.x + gene_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the gene unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (gene_bbox.y + gene_bbox.height)) {\n            top = page_origin.y + gene_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = 'down';\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + gene_bbox.y + gene_bbox.height + stroke_width + arrow_width;\n            arrow_type = 'up';\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/*********************\n  Genome Legend Data Layer\n  Implements a data layer that will render a genome legend\n*/\n\n// Build a custom data layer for a genome legend\nLocusZoom.DataLayers.add('genome_legend', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        chromosome_fill_colors: {\n            light: 'rgb(155, 155, 188)',\n            dark: 'rgb(95, 95, 128)'\n        },\n        chromosome_label_colors: {\n            light: 'rgb(120, 120, 186)',\n            dark: 'rgb(0, 0, 66)'\n        }\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Implement the main render function\n    this.render = function() {\n\n        // Iterate over data to generate genome-wide start/end values for each chromosome\n        var position = 0;\n        this.data.forEach(function(d, i) {\n            this.data[i].genome_start = position;\n            this.data[i].genome_end = position + d['genome:base_pairs'];\n            position += d['genome:base_pairs'];\n        }.bind(this));\n\n        var chromosomes = this.svg.group\n            .selectAll('rect.lz-data_layer-genome_legend')\n            .data(this.data, function(d) { return d['genome:chr']; });\n\n        // Create chromosome elements, apply class\n        chromosomes.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-genome_legend');\n\n        // Position and fill chromosome rects\n        var data_layer = this;\n        var panel = this.parent;\n\n        chromosomes\n            .attr('fill', function(d) { return (d['genome:chr'] % 2 ? data_layer.layout.chromosome_fill_colors.light : data_layer.layout.chromosome_fill_colors.dark); })\n            .attr('x', function(d) { return panel.x_scale(d.genome_start); })\n            .attr('y', 0)\n            .attr('width', function(d) { return panel.x_scale(d['genome:base_pairs']); })\n            .attr('height', panel.layout.cliparea.height);\n\n        // Remove old elements as needed\n        chromosomes.exit().remove();\n\n        // Parse current state variant into a position\n        // Assumes that variant string is of the format 10:123352136_C/T or 10:123352136\n        var variant_parts = /([^:]+):(\\d+)(?:_.*)?/.exec(this.state.variant);\n        if (!variant_parts) {\n            throw new Error('Genome legend cannot understand the specified variant position');\n        }\n        var chr = variant_parts[1];\n        var offset = variant_parts[2];\n        // TODO: How does this handle representation of X or Y chromosomes?\n        position = +this.data[chr - 1].genome_start + +offset;\n\n        // Render the position\n        var region = this.svg.group\n            .selectAll('rect.lz-data_layer-genome_legend-marker')\n            .data([{ start: position, end: position + 1 }]);\n\n        region.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-genome_legend-marker');\n\n        region\n            .transition()\n            .duration(500)\n            .style({\n                'fill': 'rgba(255, 250, 50, 0.8)',\n                'stroke': 'rgba(255, 250, 50, 0.8)',\n                'stroke-width': '3px'\n            })\n            .attr('x', function(d) { return panel.x_scale(d.start); })\n            .attr('y', 0)\n            .attr('width', function(d) { return panel.x_scale(d.end - d.start); })\n            .attr('height', panel.layout.cliparea.height);\n\n        region.exit().remove();\n\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/**\n * Intervals Data Layer\n * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)\n * @class LocusZoom.DataLayers.intervals\n * @augments LocusZoom.DataLayer\n */\nLocusZoom.DataLayers.add('intervals', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        start_field: 'start',\n        end_field: 'end',\n        track_split_field: 'state_id',\n        track_split_order: 'DESC',\n        track_split_legend_to_y_axis: 2,\n        split_tracks: true,\n        track_height: 15,\n        track_vertical_spacing: 3,\n        bounding_box_padding: 2,\n        always_hide_legend: false,\n        color: '#B8B8B8',\n        fill_opacity: 1\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * To define shared highlighting on the track split field define the status node id override\n     * to generate an ID common to the track when we're actively splitting data out to separate tracks\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element) {\n        if (this.layout.split_tracks) {\n            return (this.getBaseId() + '-statusnode-' + element[this.layout.track_split_field]).replace(/[:.[\\],]/g, '_');\n        }\n        return this.getElementId(element) + '-statusnode';\n    }.bind(this);\n\n    // Helper function to sum layout values to derive total height for a single interval track\n    this.getTrackHeight = function() {\n        return this.layout.track_height\n            + this.layout.track_vertical_spacing\n            + (2 * this.layout.bounding_box_padding);\n    };\n\n    this.tracks = 1;\n    this.previous_tracks = 1;\n\n    // track-number-indexed object with arrays of interval indexes in the dataset\n    this.interval_track_index = { 1: [] };\n\n    // After we've loaded interval data interpret it to assign\n    // each to a track so that they do not overlap in the view\n    this.assignTracks = function() {\n\n        // Reinitialize some metadata\n        this.previous_tracks = this.tracks;\n        this.tracks = 0;\n        this.interval_track_index = { 1: [] };\n        this.track_split_field_index = {};\n\n        // If splitting tracks by a field's value then do a first pass determine\n        // a value/track mapping that preserves the order of possible values\n        if (this.layout.track_split_field && this.layout.split_tracks) {\n            this.data.map(function(d) {\n                this.track_split_field_index[d[this.layout.track_split_field]] = null;\n            }.bind(this));\n            var index = Object.keys(this.track_split_field_index);\n            if (this.layout.track_split_order === 'DESC') { index.reverse(); }\n            index.forEach(function(val) {\n                this.track_split_field_index[val] = this.tracks + 1;\n                this.interval_track_index[this.tracks + 1] = [];\n                this.tracks++;\n            }.bind(this));\n        }\n\n        this.data.map(function(d, i) {\n\n            // Stash a parent reference on the interval\n            this.data[i].parent = this;\n\n            // Determine display range start and end, based on minimum allowable interval display width,\n            // bounded by what we can see (range: values in terms of pixels on the screen)\n            this.data[i].display_range = {\n                start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),\n                end:   this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))\n            };\n            this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start;\n\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[i].display_domain = {\n                start: this.parent.x_scale.invert(this.data[i].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[i].display_range.end)\n            };\n            this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start;\n\n            // If splitting to tracks based on the value of the designated track split field\n            // then don't bother with collision detection (intervals will be grouped on tracks\n            // solely by the value of track_split_field)\n            if (this.layout.track_split_field && this.layout.split_tracks) {\n                var val = this.data[i][this.layout.track_split_field];\n                this.data[i].track = this.track_split_field_index[val];\n                this.interval_track_index[this.data[i].track].push(i);\n            } else {\n                // If not splitting to tracks based on a field value then do so based on collision\n                // detection (as how it's done for genes). Use display range/domain data generated\n                // above and cast each interval to tracks such that none overlap\n                this.tracks = 1;\n                this.data[i].track = null;\n                var potential_track = 1;\n                while (this.data[i].track === null) {\n                    var collision_on_potential_track = false;\n                    this.interval_track_index[potential_track].map(function(placed_interval) {\n                        if (!collision_on_potential_track) {\n                            var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);\n                            var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);\n                            if ((max_end - min_start) < (placed_interval.display_range.width + this.display_range.width)) {\n                                collision_on_potential_track = true;\n                            }\n                        }\n                    }.bind(this.data[i]));\n                    if (!collision_on_potential_track) {\n                        this.data[i].track = potential_track;\n                        this.interval_track_index[potential_track].push(this.data[i]);\n                    } else {\n                        potential_track++;\n                        if (potential_track > this.tracks) {\n                            this.tracks = potential_track;\n                            this.interval_track_index[potential_track] = [];\n                        }\n                    }\n                }\n\n            }\n\n        }.bind(this));\n\n        return this;\n    };\n\n    // Implement the main render function\n    this.render = function() {\n\n        this.assignTracks();\n\n        // Remove any shared highlight nodes and re-render them if we're splitting on tracks\n        // At most there will only be dozen or so nodes here (one per track) and each time\n        // we render data we may have new tracks, so wiping/redrawing all is reasonable.\n        this.svg.group.selectAll('.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared').remove();\n        Object.keys(this.track_split_field_index).forEach(function(key) {\n            // Make a psuedo-element so that we can generate an id for the shared node\n            var psuedoElement = {};\n            psuedoElement[this.layout.track_split_field] = key;\n            // Insert the shared node\n            var sharedstatusnode_style = {display: (this.layout.split_tracks ? null : 'none')};\n            this.svg.group.insert('rect', ':first-child')\n                .attr('id', this.getElementStatusNodeId(psuedoElement))\n                .attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared')\n                .attr('rx', this.layout.bounding_box_padding).attr('ry', this.layout.bounding_box_padding)\n                .attr('width', this.parent.layout.cliparea.width)\n                .attr('height', this.getTrackHeight() - this.layout.track_vertical_spacing)\n                .attr('x', 0)\n                .attr('y', (this.track_split_field_index[key] - 1) * this.getTrackHeight())\n                .style(sharedstatusnode_style);\n        }.bind(this));\n\n        var width, height, x, y, fill, fill_opacity;\n\n        // Render interval groups\n        var selection = this.svg.group.selectAll('g.lz-data_layer-intervals')\n            .data(this.data, function(d) { return d[this.layout.id_field]; }.bind(this));\n\n        selection.enter().append('g')\n            .attr('class', 'lz-data_layer-intervals');\n\n        selection.attr('id', function(d) { return this.getElementId(d); }.bind(this))\n            .each(function(interval) {\n\n                var data_layer = interval.parent;\n\n                // Render interval status nodes (displayed behind intervals to show highlight\n                // without needing to modify interval display element(s))\n                var statusnode_style = {display: (data_layer.layout.split_tracks ? 'none' : null)};\n                var statusnodes = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete')\n                    .data([interval], function(d) { return data_layer.getElementId(d) + '-statusnode'; });\n                statusnodes.enter().insert('rect', ':first-child')\n                    .attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete');\n                statusnodes\n                    .attr('id', function(d) {\n                        return data_layer.getElementId(d) + '-statusnode';\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .style(statusnode_style);\n                width = function(d) {\n                    return d.display_range.width + (2 * data_layer.layout.bounding_box_padding);\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start - data_layer.layout.bounding_box_padding;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    statusnodes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    statusnodes\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n                statusnodes.exit().remove();\n\n                // Render primary interval rects\n                var rects = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-interval_rect')\n                    .data([interval], function(d) { return d[data_layer.layout.id_field] + '_interval_rect'; });\n\n                rects.enter().append('rect')\n                    .attr('class', 'lz-data_layer-intervals lz-interval_rect');\n\n                height = data_layer.layout.track_height;\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding;\n                };\n                fill = function(d) {\n                    return data_layer.resolveScalableParameter(data_layer.layout.color, d);\n                };\n                fill_opacity = function(d) {\n                    return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d);\n                };\n\n\n                if (data_layer.canTransition()) {\n                    rects\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height)\n                        .attr('x', x).attr('y', y)\n                        .attr('fill', fill)\n                        .attr('fill-opacity', fill_opacity);\n                } else {\n                    rects\n                        .attr('width', width).attr('height', height)\n                        .attr('x', x).attr('y', y)\n                        .attr('fill', fill)\n                        .attr('fill-opacity', fill_opacity);\n                }\n\n                rects.exit().remove();\n\n                // Render interval click areas\n                var clickareas = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-clickarea')\n                    .data([interval], function(d) { return d.interval_name + '_clickarea'; });\n\n                clickareas.enter().append('rect')\n                    .attr('class', 'lz-data_layer-intervals lz-clickarea');\n\n                clickareas\n                    .attr('id', function(d) {\n                        return data_layer.getElementId(d) + '_clickarea';\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    clickareas\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on('click', function(element_data) {\n                    element_data.parent.parent.emit('element_clicked', element_data, true);\n                }.bind(this));\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Update the legend axis if the number of ticks changed\n        if (this.previous_tracks !== this.tracks) {\n            this.updateSplitTrackAxis();\n        }\n\n        return this;\n\n    };\n\n    // Reimplement the positionTooltip() method to be interval-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var interval_bbox = d3.select('#' + this.getElementStatusNodeId(tooltip.data)).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the interval that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var interval_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - interval_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + interval_center_x - data_layer_width, 0);\n        var left = page_origin.x + interval_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the interval unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (interval_bbox.y + interval_bbox.height)) {\n            top = page_origin.y + interval_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = 'down';\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + interval_bbox.y + interval_bbox.height + stroke_width + arrow_width;\n            arrow_type = 'up';\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    // Redraw split track axis or hide it, and show/hide the legend, as determined\n    // by current layout parameters and data\n    this.updateSplitTrackAxis = function() {\n        var legend_axis = this.layout.track_split_legend_to_y_axis ? 'y' + this.layout.track_split_legend_to_y_axis : false;\n        if (this.layout.split_tracks) {\n            var tracks = +this.tracks || 0;\n            var track_height = +this.layout.track_height || 0;\n            var track_spacing =  2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);\n            var target_height = (tracks * track_height) + ((tracks - 1) * track_spacing);\n            this.parent.scaleHeightToData(target_height);\n            if (legend_axis && this.parent.legend) {\n                this.parent.legend.hide();\n                this.parent.layout.axes[legend_axis] = {\n                    render: true,\n                    ticks: [],\n                    range: {\n                        start: (target_height - (this.layout.track_height / 2)),\n                        end: (this.layout.track_height / 2)\n                    }\n                };\n                this.layout.legend.forEach(function(element) {\n                    var key = element[this.layout.track_split_field];\n                    var track = this.track_split_field_index[key];\n                    if (track) {\n                        if (this.layout.track_split_order === 'DESC') {\n                            track = Math.abs(track - tracks - 1);\n                        }\n                        this.parent.layout.axes[legend_axis].ticks.push({\n                            y: track,\n                            text: element.label\n                        });\n                    }\n                }.bind(this));\n                this.layout.y_axis = {\n                    axis: this.layout.track_split_legend_to_y_axis,\n                    floor: 1,\n                    ceiling: tracks\n                };\n                this.parent.render();\n            }\n            this.parent_plot.positionPanels();\n        } else {\n            if (legend_axis && this.parent.legend) {\n                if (!this.layout.always_hide_legend) { this.parent.legend.show(); }\n                this.parent.layout.axes[legend_axis] = { render: false };\n                this.parent.render();\n            }\n        }\n        return this;\n    };\n\n    // Method to not only toggle the split tracks boolean but also update\n    // necessary display values to animate a complete merge/split\n    this.toggleSplitTracks = function() {\n        this.layout.split_tracks = !this.layout.split_tracks;\n        if (this.parent.legend && !this.layout.always_hide_legend) {\n            this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);\n        }\n        this.render();\n        this.updateSplitTrackAxis();\n        return this;\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot, representing either a trace or a filled curve.\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add('line', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    /** @member {Object} */\n    this.DefaultLayout = {\n        style: {\n            fill: 'none',\n            'stroke-width': '2px'\n        },\n        interpolate: 'linear',\n        x_axis: { field: 'x' },\n        y_axis: { field: 'y', axis: 1 },\n        hitarea_width: 5\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Var for storing mouse events for use in tool tip positioning\n    /** @member {String} */\n    this.mouse_event = null;\n\n    /**\n     * Var for storing the generated line function itself\n     * @member {d3.svg.line}\n     * */\n    this.line = null;\n\n    /**\n     * The timeout identifier returned by setTimeout\n     * @member {Number}\n     */\n    this.tooltip_timeout = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n\n    /**\n     * Helper function to get display and data objects representing\n     *   the x/y coordinates of the current mouse event with respect to the line in terms of the display\n     *   and the interpolated values of the x/y fields with respect to the line\n     * @returns {{display: {x: *, y: null}, data: {}, slope: null}}\n     */\n    this.getMouseDisplayAndData = function() {\n        var ret = {\n            display: {\n                x: d3.mouse(this.mouse_event)[0],\n                y: null\n            },\n            data: {},\n            slope: null\n        };\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n        ret.data[x_field] = this.parent[x_scale].invert(ret.display.x);\n        var bisect = d3.bisector(function(datum) { return +datum[x_field]; }).left;\n        var index = bisect(this.data, ret.data[x_field]) - 1;\n        var startDatum = this.data[index];\n        var endDatum = this.data[index + 1];\n        var interpolate = d3.interpolateNumber(+startDatum[y_field], +endDatum[y_field]);\n        var range = +endDatum[x_field] - +startDatum[x_field];\n        ret.data[y_field] = interpolate((ret.data[x_field] % range) / range);\n        ret.display.y = this.parent[y_scale](ret.data[y_field]);\n        if (this.layout.tooltip.x_precision) {\n            ret.data[x_field] = ret.data[x_field].toPrecision(this.layout.tooltip.x_precision);\n        }\n        if (this.layout.tooltip.y_precision) {\n            ret.data[y_field] = ret.data[y_field].toPrecision(this.layout.tooltip.y_precision);\n        }\n        ret.slope = (this.parent[y_scale](endDatum[y_field]) - this.parent[y_scale](startDatum[y_field]))\n                  / (this.parent[x_scale](endDatum[x_field]) - this.parent[x_scale](startDatum[x_field]));\n        return ret;\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be line-specific\n     * @param {String} id Identify the tooltip to be positioned\n     */\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var arrow_width = 7; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var stroke_width = parseFloat(this.layout.style['stroke-width']) || 1;\n        var page_origin = this.getPageOrigin();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        var top, left, arrow_top, arrow_left, arrow_type;\n\n        // Determine x/y coordinates for display and data\n        var dd = this.getMouseDisplayAndData();\n\n        // If the absolute value of the slope of the line at this point is above 1 (including Infinity)\n        // then position the tool tip left/right. Otherwise position top/bottom.\n        if (Math.abs(dd.slope) > 1) {\n\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (dd.display.x <= this.parent.layout.width / 2) {\n                left = page_origin.x + dd.display.x + stroke_width + arrow_width + stroke_width;\n                arrow_type = 'left';\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + dd.display.x - tooltip_box.width - stroke_width - arrow_width - stroke_width;\n                arrow_type = 'right';\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            if (dd.display.y - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n                top = page_origin.y + dd.display.y - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (dd.display.y + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n                top = page_origin.y + dd.display.y + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + dd.display.y - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n\n        } else {\n\n            // Position horizontally: attempt to center on the mouse's x coordinate\n            // pad to either side if bumping up against the edge of the data layer\n            var offset_right = Math.max((tooltip_box.width / 2) - dd.display.x, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + dd.display.x - data_layer_width, 0);\n            left = page_origin.x + dd.display.x - (tooltip_box.width / 2) - offset_left + offset_right;\n            var min_arrow_left = arrow_width / 2;\n            var max_arrow_left = tooltip_box.width - (2.5 * arrow_width);\n            arrow_left = (tooltip_box.width / 2) - arrow_width + offset_left - offset_right;\n            arrow_left = Math.min(Math.max(arrow_left, min_arrow_left), max_arrow_left);\n\n            // Position vertically above the line unless there's insufficient space\n            if (tooltip_box.height + stroke_width + arrow_width > dd.display.y) {\n                top = page_origin.y + dd.display.y + stroke_width + arrow_width;\n                arrow_type = 'up';\n                arrow_top = 0 - stroke_width - arrow_width;\n            } else {\n                top = page_origin.y + dd.display.y - (tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = 'down';\n                arrow_top = tooltip_box.height - stroke_width;\n            }\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style({ left: left + 'px', top: top + 'px' });\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style({ 'left': arrow_left + 'px', top: arrow_top + 'px' });\n\n    };\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function() {\n\n        // Several vars needed to be in scope\n        var data_layer = this;\n        var panel = this.parent;\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line');\n\n        // Generate the line\n        if (this.layout.style.fill && this.layout.style.fill !== 'none') {\n            // Filled curve: define the line as a filled boundary\n            this.line = d3.svg.area()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y0(function(d) {return parseFloat(panel[y_scale](0));})\n                .y1(function(d) { return parseFloat(panel[y_scale](d[y_field])); });\n        } else {\n            // Basic line\n            this.line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n        }\n\n        // Apply line and style\n        if (this.canTransition()) {\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('d', this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr('d', this.line)\n                .style(this.layout.style);\n        }\n\n        // Apply tooltip, etc\n        if (this.layout.tooltip) {\n            // Generate an overlaying transparent \"hit area\" line for more intuitive mouse events\n            var hitarea_width = parseFloat(this.layout.hitarea_width).toString() + 'px';\n            var hitarea = this.svg.group\n                .selectAll('path.lz-data_layer-line-hitarea')\n                .data([this.data]);\n            hitarea.enter()\n                .append('path')\n                .attr('class', 'lz-data_layer-line-hitarea')\n                .style('stroke-width', hitarea_width);\n            var hitarea_line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n            hitarea\n                .attr('d', hitarea_line)\n                .on('mouseover', function() {\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.createTooltip(dd.data);\n                })\n                .on('mousemove', function() {\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.updateTooltip(dd.data);\n                    data_layer.positionTooltip(data_layer.getElementId());\n                })\n                .on('mouseout', function() {\n                    data_layer.tooltip_timeout = setTimeout(function() {\n                        data_layer.mouse_event = null;\n                        data_layer.destroyTooltip(data_layer.getElementId());\n                    }, 300);\n                });\n            hitarea.exit().remove();\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.setElementStatus = function(status, element, toggle) {\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setElementStatusByFilters = function(status, toggle) {\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setAllElementStatus = function(status, toggle) {\n        // Sanity check\n        if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n            throw new Error('Invalid status passed to DataLayer.setAllElementStatus()');\n        }\n        if (typeof this.layer_state.status_flags[status] == 'undefined') { return this; }\n        if (typeof toggle == 'undefined') { toggle = true; }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        var path_class = 'lz-data_layer-line';\n        Object.keys(this.global_statuses).forEach(function(global_status) {\n            if (this.global_statuses[global_status]) { path_class += ' lz-data_layer-line-' + global_status; }\n        }.bind(this));\n        this.path.attr('class', path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit('layout_changed', true);\n        return this;\n    };\n\n    return this;\n\n});\n\n\n/***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add('orthogonal_line', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        style: {\n            'stroke': '#D3D3D3',\n            'stroke-width': '3px',\n            'stroke-dasharray': '10px 10px'\n        },\n        orientation: 'horizontal',\n        x_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        y_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        offset: 0\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Require that orientation be \"horizontal\" or \"vertical\" only\n    if (['horizontal','vertical'].indexOf(layout.orientation) === -1) {\n        layout.orientation = 'horizontal';\n    }\n\n    // Vars for storing the data generated line\n    /** @member {Array} */\n    this.data = [];\n    /** @member {d3.svg.line} */\n    this.line = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function() {\n\n        // Several vars needed to be in scope\n        var panel = this.parent;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n        var x_extent = 'x_extent';\n        var y_extent = 'y' + this.layout.y_axis.axis + '_extent';\n        var x_range = 'x_range';\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === 'horizontal') {\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset }\n            ];\n        } else if (this.layout.orientation === 'vertical') {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] }\n            ];\n        } else {\n            throw new Error('Unrecognized vertical line type. Must be \"vertical\" or \"horizontal\"');\n        }\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line');\n\n        // In some cases, a vertical line may overlay a track that has no inherent y-values (extent)\n        //  When that happens, provide a default height based on the current panel dimensions (accounting\n        //      for any resizing that happened after the panel was created)\n        var default_y = [panel.layout.cliparea.height, 0];\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d, i) {\n                var x = parseFloat(panel[x_scale](d['x']));\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y(function(d, i) {\n                var y = parseFloat(panel[y_scale](d['y']));\n                return isNaN(y) ? default_y[i] : y;\n            })\n            .interpolate('linear');\n\n        // Apply line and style\n        if (this.canTransition()) {\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('d', this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr('d', this.line)\n                .style(this.layout.style);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/**\n * Scatter Data Layer\n * Implements a standard scatter plot\n * @class LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.add('scatter', function(layout) {\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: 'circle',\n        tooltip_positioning: 'horizontal',\n        color: '#888888',\n        fill_opacity: 1,\n        y_axis: {\n            axis: 1\n        },\n        id_field: 'id'\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Extra default for layout spacing\n    // Not in default layout since that would make the label attribute always present\n    if (layout.label && isNaN(layout.label.spacing)) {\n        layout.label.spacing = 4;\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be scatter-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var offset = Math.sqrt(point_size / Math.PI);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = 'y' + this.layout.y_axis.axis + '_scale';\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        if (this.layout.tooltip_positioning === 'vertical') {\n            // Position horizontally centered above the point\n            var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right - offset;\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (y_center + offset)) {\n                top = page_origin.y + y_center - (offset + tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = 'down';\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                top = page_origin.y + y_center + offset + stroke_width + arrow_width;\n                arrow_type = 'up';\n                arrow_top = 0 - stroke_width - arrow_width;\n            }\n        } else {\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (x_center <= this.parent.layout.width / 2) {\n                left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                arrow_type = 'left';\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                arrow_type = 'right';\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n            if (y_center - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n                top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n                top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    this.flip_labels = function() {\n        var data_layer = this;\n        // Base positions on the default point size (which is what resolve scalable param returns if no data provided)\n        var point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        var spacing = data_layer.layout.label.spacing;\n        var handle_lines = Boolean(data_layer.layout.label.lines);\n        var min_x = 2 * spacing;\n        var max_x = data_layer.parent.layout.width - data_layer.parent.layout.margin.left - data_layer.parent.layout.margin.right - (2 * spacing);\n        var flip = function(dn, dnl) {\n            var dnx = +dn.attr('x');\n            var text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            if (handle_lines) {\n                var dnlx2 = +dnl.attr('x2');\n                var line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style('text-anchor') === 'start') {\n                dn.style('text-anchor', 'end');\n                dn.attr('x', dnx - text_swing);\n                if (handle_lines) { dnl.attr('x2', dnlx2 - line_swing); }\n            } else {\n                dn.style('text-anchor', 'start');\n                dn.attr('x', dnx + text_swing);\n                if (handle_lines) { dnl.attr('x2', dnlx2 + line_swing); }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            var dax = +da.attr('x');\n            var abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x) {\n                var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            if (da.style('text-anchor') === 'end') {\n                return;\n            }\n            var dax = +da.attr('x');\n            var abound = da.node().getBoundingClientRect();\n            var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n            data_layer.label_texts.each(function () {\n                var b = this;\n                var db = d3.select(b);\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (collision) {\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr('x');\n                    if (dax - abound.width - spacing < min_x) {\n                        flip(da, dal);\n                    }\n                }\n                return;\n            });\n        });\n    };\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    this.separate_labels = function() {\n        this.seperate_iterations++;\n        var data_layer = this;\n        var alpha = 0.5;\n        if (!this.layout.label) {\n            // Guard against layout changing in the midst of iterative rerender\n            return;\n        }\n        var spacing = this.layout.label.spacing;\n        var again = false;\n        data_layer.label_texts.each(function () {\n            var a = this;\n            var da = d3.select(a);\n            var y1 = da.attr('y');\n            data_layer.label_texts.each(function () {\n                var b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) {\n                    return;\n                }\n                var db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr('text-anchor') !== db.attr('text-anchor')) {\n                    return;\n                }\n                // Determine if the  bounding rects for the two text elements collide\n                var abound = da.node().getBoundingClientRect();\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (!collision) {\n                    return;\n                }\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                var y2 = db.attr('y');\n                var sign = abound.top < bbound.top ? 1 : -1;\n                var adjust = sign * alpha;\n                var new_a_y = +y1 - adjust;\n                var new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                var min_y = 2 * spacing;\n                var max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                var delta;\n                if (new_a_y - (abound.height / 2) < min_y) {\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height / 2) < min_y) {\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height / 2) > max_y) {\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height / 2) > max_y) {\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr('y',new_a_y);\n                db.attr('y',new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines) {\n                var label_elements = data_layer.label_texts[0];\n                data_layer.label_lines.attr('y2',function(d,i) {\n                    var label_line = d3.select(label_elements[i]);\n                    return label_line.attr('y');\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150) {\n                setTimeout(function() {\n                    this.separate_labels();\n                }.bind(this), 1);\n            }\n        }\n    };\n\n    // Implement the main render function\n    this.render = function() {\n        var self = this;\n        var data_layer = this;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n\n        if (this.layout.label) {\n            // Apply filters to generate a filtered data set\n            var filtered_data;\n            var filters = data_layer.layout.label.filters || [];\n            if (!filters.length) {\n                filtered_data = this.data;\n            } else {\n                filtered_data = this.data.filter(function(d) {\n                    // Start by assuming a match (base case = no filters).\n                    // Test each filters: ALL must be satisfied for match to occur.\n                    var match = true;\n                    filters.forEach(function(filter) {\n                        var extra = self.layer_state.extra_fields[self.getElementId(d)];\n                        var field_value = (new LocusZoom.Data.Field(filter.field)).resolve(d, extra);\n\n                        if (['!=', '='].indexOf(filter.operator) === -1 && isNaN(field_value)) {\n                            // If the filter can only be used with numbers, then the value must be numeric.\n                            match = false;\n                        } else {\n                            switch (filter.operator) {\n                            case '<':\n                                if (!(field_value < filter.value)) { match = false; }\n                                break;\n                            case '<=':\n                                if (!(field_value <= filter.value)) { match = false; }\n                                break;\n                            case '>':\n                                if (!(field_value > filter.value)) { match = false; }\n                                break;\n                            case '>=':\n                                if (!(field_value >= filter.value)) { match = false; }\n                                break;\n                            case '=':\n                                if (!(field_value === filter.value)) { match = false; }\n                                break;\n                            case '!=':\n                                // Deliberately allow weak comparisons to test for \"anything with a value present\" (null or undefined)\n                                // eslint-disable-next-line eqeqeq\n                                if (field_value == filter.value) { match = false; }\n                                break;\n                            default:\n                                // If we got here the operator is not valid, so the filter should fail\n                                match = false;\n                                break;\n                            }\n                        }\n                    });\n                    return match;\n                });\n            }\n\n            // Render label groups\n            this.label_groups = this.svg.group\n                .selectAll('g.lz-data_layer-' + this.layout.type + '-label')\n                .data(filtered_data, function(d) { return d[self.layout.id_field]  + '_label'; });\n            this.label_groups.enter()\n                .append('g')\n                .attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n            // Render label texts\n            if (this.label_texts) { this.label_texts.remove(); }\n            this.label_texts = this.label_groups.append('text')\n                .attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n            this.label_texts\n                .text(function(d) {\n                    return LocusZoom.parseFields(d, data_layer.layout.label.text || '');\n                })\n                .style(data_layer.layout.label.style || {})\n                .attr({\n                    'x': function(d) {\n                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                              + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                              + data_layer.layout.label.spacing;\n                        if (isNaN(x)) { x = -1000; }\n                        return x;\n                    },\n                    'y': function(d) {\n                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)) { y = -1000; }\n                        return y;\n                    },\n                    'text-anchor': function() {\n                        return 'start';\n                    }\n                });\n            // Render label lines\n            if (data_layer.layout.label.lines) {\n                if (this.label_lines) { this.label_lines.remove(); }\n                this.label_lines = this.label_groups.append('line')\n                    .attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n                this.label_lines\n                    .style(data_layer.layout.label.lines.style || {})\n                    .attr({\n                        'x1': function(d) {\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                            if (isNaN(x)) { x = -1000; }\n                            return x;\n                        },\n                        'y1': function(d) {\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)) { y = -1000; }\n                            return y;\n                        },\n                        'x2': function(d) {\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                                  + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                                  + (data_layer.layout.label.spacing / 2);\n                            if (isNaN(x)) { x = -1000; }\n                            return x;\n                        },\n                        'y2': function(d) {\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)) { y = -1000; }\n                            return y;\n                        }\n                    });\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit().remove();\n        } else {\n            // If the layout definition has changed (& no longer specifies labels), strip any previously rendered\n            if (this.label_groups) { this.label_groups.remove(); }\n            if (this.label_lines) { this.label_lines.remove(); }\n        }\n\n        // Generate main scatter data elements\n        var selection = this.svg.group\n            .selectAll('path.lz-data_layer-' + this.layout.type)\n            .data(this.data, function(d) { return d[self.layout.id_field]; });\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-' + this.layout.type)\n            .attr('id', function(d) { return self.getElementId(d); })\n            .attr('transform', 'translate(0,' + initial_y + ')');\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = self.parent[x_scale](d[self.layout.x_axis.field]);\n            var y = self.parent[y_scale](d[self.layout.y_axis.field]);\n            if (isNaN(x)) { x = -1000; }\n            if (isNaN(y)) { y = -1000; }\n            return 'translate(' + x + ',' + y + ')';\n        };\n\n        var fill = function(d) { return self.resolveScalableParameter(self.layout.color, d); };\n        var fill_opacity = function(d) { return self.resolveScalableParameter(self.layout.fill_opacity, d); };\n\n        var shape = d3.svg.symbol()\n            .size(function(d) { return self.resolveScalableParameter(self.layout.point_size, d); })\n            .type(function(d) { return self.resolveScalableParameter(self.layout.point_shape, d); });\n\n        // Apply position and color, using a transition if necessary\n\n        if (this.canTransition()) {\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        } else {\n            selection\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Apply default event emitters to selection\n        selection.on('click.event_emitter', function(element) {\n            self.parent.emit('element_clicked', element, true);\n        });\n\n        // Apply mouse behaviors\n        this.applyBehaviors(selection);\n\n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label) {\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n            // Apply default event emitters to selection\n            this.label_texts.on('click.event_emitter', function(element) {\n                self.parent.emit('element_clicked', element, true);\n            });\n            // Extend mouse behaviors to labels\n            this.applyBehaviors(this.label_texts);\n        }\n\n    };\n\n    // Method to set a passed element as the LD reference in the plot-level state\n    this.makeLDReference = function(element) {\n        var ref = null;\n        if (typeof element == 'undefined') {\n            throw new Error('makeLDReference requires one argument of any type');\n        } else if (typeof element == 'object') {\n            if (this.layout.id_field && typeof element[this.layout.id_field] != 'undefined') {\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element['id'] != 'undefined') {\n                ref = element['id'].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent_plot.applyState({ ldrefvar: ref });\n    };\n\n    return this;\n\n});\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n * @class LocusZoom.DataLayers.category_scatter\n * @augments LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.extend('scatter', 'category_scatter', {\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData: function() {\n        var xField = this.layout.x_axis.field || 'x';\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw new Error('Layout for ' + this.layout.id + ' must specify category_field');\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        var sourceData = this.data\n            .sort(function(a, b) {\n                var ak = a[category_field];\n                var bk = b[category_field];\n                var av = (typeof ak === 'string') ? ak.toLowerCase() : ak;\n                var bv = (typeof bk === 'string') ? bk.toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);});\n        sourceData.forEach(function(d, i) {\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    },\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds: function() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        var xField = this.layout.x_axis.field || 'x';\n        var uniqueCategories = {};\n        this.data.forEach(function(item) {\n            var category = item[category_field];\n            var x = item[xField];\n            var bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        var categoryNames = Object.keys(uniqueCategories);\n        this._setDynamicColorScheme(categoryNames);\n\n        return uniqueCategories;\n    },\n\n    /**\n     * This layer relies on defining its own category-based color scheme. Find the correct color config object to\n     *  be modified.\n     * @param [from_source]\n     * @returns {Object} A mutable reference to the layout configuration object\n     * @private\n     */\n    _getColorScale: function(from_source) {\n        from_source = from_source || this.layout;\n        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n\n        // For legacy reasons, layouts can specify color as an object (only one way to set color), as opposed to the\n        //  preferred mechanism of array (multiple coloring options)\n        var color_params = from_source.color || []; // Object or scalar, no other options allowed\n        if (Array.isArray(color_params)) {\n            color_params = color_params.find(function(item) { return item.scale_function === 'categorical_bin'; });\n        }\n        if (!color_params || color_params.scale_function !== 'categorical_bin') {\n            throw new Error('This layer requires that color options be provided as a `categorical_bin`');\n        }\n        return color_params;\n    },\n\n    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n    _setDynamicColorScheme: function(categoryNames) {\n        var colorParams = this._getColorScale(this.layout).parameters;\n        var baseParams = this._getColorScale(this._base_layout).parameters;\n\n        if (baseParams.categories.length && baseParams.values.length) {\n            // If there are preset category/color combos, make sure that they apply to the actual dataset\n            var parameters_categories_hash = {};\n            baseParams.categories.forEach(function (category) { parameters_categories_hash[category] = 1; });\n            if (categoryNames.every(function (name) { return parameters_categories_hash.hasOwnProperty(name); })) {\n                // The layout doesn't have to specify categories in order, but make sure they are all there\n                colorParams.categories = baseParams.categories;\n            } else {\n                colorParams.categories = categoryNames;\n            }\n        } else {\n            colorParams.categories = categoryNames;\n        }\n        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n        var colors;\n        if (baseParams.values.length) {\n            colors = baseParams.values;\n        } else {\n            var color_scale = categoryNames.length <= 10 ? d3.scale.category10 : d3.scale.category20;\n            colors = color_scale().range();\n        }\n        while (colors.length < categoryNames.length) { colors = colors.concat(colors); }\n        colors = colors.slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n        colorParams.values = colors;\n    },\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks: function(dimension, config) { // Overrides parent method\n        if (['x', 'y1', 'y2'].indexOf(dimension) === -1) {\n            throw new Error('Invalid dimension identifier');\n        }\n        var position = config.position || 'left';\n        if (['left', 'center', 'right'].indexOf(position) === -1) {\n            throw new Error('Invalid tick position');\n        }\n\n        var categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === 'y') {\n            return [];\n        }\n\n        if (dimension === 'x') {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            var colors = this._getColorScale(this.layout);\n            var knownCategories = colors.parameters.categories || [];\n            var knownColors = colors.parameters.values || [];\n\n            return Object.keys(categoryBounds).map(function (category, index) {\n                var bounds = categoryBounds[category];\n                var xPos;\n\n                switch(position) {\n                case 'left':\n                    xPos = bounds[0];\n                    break;\n                case 'center':\n                    // Center tick under one or many elements as appropriate\n                    var diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case 'right':\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        'fill': knownColors[knownCategories.indexOf(category)] || '#000000'\n                    }\n                };\n            });\n        }\n    },\n\n    applyCustomDataMethods: function() {\n        this.data = this._prepareData();\n        /**\n         * Define category names and extents (boundaries) for plotting.  TODO: properties in constructor\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n *\n * LocusZoom has various singleton objects that are used for registering functions or classes.\n * These objects provide safe, standard methods to redefine or delete existing functions/classes\n * as well as define new custom functions/classes to be used in a plot.\n *\n * @namespace Singletons\n */\n\n\n/*\n * The Collection of \"Known\" Data Sources. This registry is used internally by the `DataSources` class\n * @class\n * @static\n */\nLocusZoom.KnownDataSources = (function() {\n    /** @lends LocusZoom.KnownDataSources */\n    var obj = {};\n    /* @member {function[]} */\n    var sources = [];\n\n    var findSourceByName = function(x) {\n        for(var i = 0; i < sources.length; i++) {\n            if (!sources[i].SOURCE_NAME) {\n                throw new Error('KnownDataSources at position ' + i + \" does not have a 'SOURCE_NAME' static property\");\n            }\n            if (sources[i].SOURCE_NAME === x) {\n                return sources[i];\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Identify the datasource associated with a given name\n     * @param {String} name\n     * @returns {function} The constructor for the data source; will usually extend `Data.Source`\n     */\n    obj.get = function(name) {\n        return findSourceByName(name);\n    };\n\n    /**\n     * Register a data source constructor so that it may be located by name\n     * @param {function} source A constructor function for a data source; will usually extend `Data.Source`,\n     *   and should have a `SOURCE_NAME` property\n     */\n    obj.add = function(source) {\n        if (!source.SOURCE_NAME) {\n            console.warn('Data source added does not have a SOURCE_NAME');\n        }\n        sources.push(source);\n    };\n\n    /**\n     * Create a custom source type that extends the behavior of an existing source, and registers that\n     *  source by the provided name\n     * @param {String} parent_name The name of a previously registered data source type to use as a template\n     * @param {String} source_name The new name to use when registering this data source\n     * @param {Object} overrides An object of additional properties and methods to add/override behavior\n     * @returns {LocusZoom.Data.Source} The newly defined class for this source\n     */\n    obj.extend = function(parent_name, source_name, overrides) {\n        var parent = findSourceByName(parent_name);\n        if (!parent) {\n            throw new Error('Attempted to subclass an unknown or unregistered data source');\n        }\n        if (!source_name) {\n            throw new Error('Must provide a name for the new data source');\n        }\n        if (typeof overrides !== 'object') {\n            throw new Error('Must specify an object of properties and methods');\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        child.SOURCE_NAME = source_name;\n        sources.push(child);\n        return child;\n    };\n\n    /** @deprecated */\n    obj.push = function(source) {\n        console.warn('Warning: KnownDataSources.push() is deprecated. Use .add() instead');\n        obj.add(source);\n    };\n\n    /**\n     * List the names of all registered datasources\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return sources.map(function(x) {return x.SOURCE_NAME;});\n    };\n\n    /**\n     * Create a datasource instance\n     * @param {String} name The name of the desired datasource to instantiate (must be defined in the registry)\n     * @returns {LocusZoom.Data.Source}\n     */\n    obj.create = function(name) {\n        //create new object (pass additional parameters to constructor)\n        var newObj = findSourceByName(name);\n        if (newObj) {\n            var params = arguments;\n            params[0] = null;\n            return new (Function.prototype.bind.apply(newObj, params));\n        } else {\n            throw new Error('Unable to find data source for name: ' + name);\n        }\n    };\n\n    /**\n     * Get the array of all registered constructors\n     *   Generally only used for unit tests internally\n     * @private\n     * @returns {function[]}\n     */\n    obj.getAll = function() {\n        return sources;\n    };\n\n    /**\n     * Register an entire collection of data sources\n     *   Generally only used for unit tests internally\n     * @private\n     * @param {function[]} x An array of datasource constructors\n     */\n    obj.setAll = function(x) {\n        sources = x;\n    };\n\n    /**\n     * Unregister all known data sources\n     *   Generally only used for unit tests internally\n     * @private\n     */\n    obj.clear = function() {\n        sources = [];\n    };\n\n    return obj;\n})();\n\n/**************************\n * Transformation Functions\n *\n * Singleton for formatting or transforming a single input, for instance turning raw p values into negative log10 form\n * Transformation functions are chainable with a pipe on a field name, like so: \"pvalue|neglog10\"\n *\n * NOTE: Because these functions are chainable the FUNCTION is returned by get(), not the result of that function.\n *\n * All transformation functions must accept an object of parameters and a value to process.\n * @class\n */\nLocusZoom.TransformationFunctions = (function() {\n    /** @lends LocusZoom.TransformationFunctions */\n    var obj = {};\n    var transformations = {};\n\n    var getTrans = function(name) {\n        if (!name) {\n            return null;\n        }\n        var fun = transformations[name];\n        if (fun)  {\n            return fun;\n        } else {\n            throw new Error('transformation ' + name + ' not found');\n        }\n    };\n\n    //a single transformation with any parameters\n    //(parameters not currently supported)\n    var parseTrans = function(name) {\n        return getTrans(name);\n    };\n\n    //a \"raw\" transformation string with a leading pipe\n    //and one or more transformations\n    var parseTransString = function(x) {\n        var funs = [];\n        var re = /\\|([^|]+)/g;\n        var result;\n        while((result = re.exec(x)) !== null) {\n            funs.push(result[1]);\n        }\n        if (funs.length === 1) {\n            return parseTrans(funs[0]);\n        } else if (funs.length > 1) {\n            return function(x) {\n                var val = x;\n                for(var i = 0; i < funs.length; i++) {\n                    val = parseTrans(funs[i])(val);\n                }\n                return val;\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Retrieve a transformation function by name\n     * @param {String} name The name of the transformation function to retrieve. May optionally be prefixed with a\n     *   pipe (`|`) when chaining multiple transformation functions.\n     * @returns {function} The constructor for the transformation function\n     */\n    obj.get = function(name) {\n        if (name && name.substring(0,1) === '|') {\n            return parseTransString(name);\n        } else {\n            return parseTrans(name);\n        }\n    };\n    /**\n     * Internal logic that registers a transformation function\n     * @protected\n     * @param {String} name\n     * @param {function} fn\n     */\n    obj.set = function(name, fn) {\n        if (name.substring(0,1) === '|') {\n            throw new Error('transformation name should not start with a pipe');\n        } else {\n            if (fn) {\n                transformations[name] = fn;\n            } else {\n                delete transformations[name];\n            }\n        }\n    };\n\n    /**\n     * Register a transformation function\n     * @param {String} name\n     * @param {function} fn A transformation function (should accept one argument with the value)\n     */\n    obj.add = function(name, fn) {\n        if (transformations[name]) {\n            throw new Error('transformation already exists with name: ' + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n    /**\n     * List the names of all registered transformation functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(transformations);\n    };\n\n    return obj;\n})();\n\n/**\n * Return the -log (base 10)\n * @function neglog10\n */\nLocusZoom.TransformationFunctions.add('neglog10', function(x) {\n    if (isNaN(x) || x <= 0) { return null; }\n    return -Math.log(x) / Math.LN10;\n});\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\nLocusZoom.TransformationFunctions.add('logtoscinotation', function(x) {\n    if (isNaN(x)) { return 'NaN'; }\n    if (x === 0) { return '1'; }\n    var exp = Math.ceil(x);\n    var diff = exp - x;\n    var base = Math.pow(10, diff);\n    if (exp === 1) {\n        return (base / 10).toFixed(4);\n    } else if (exp === 2) {\n        return (base / 100).toFixed(3);\n    } else {\n        return base.toFixed(2) + ' × 10^-' + exp;\n    }\n});\n\n/**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} x\n * @returns {String}\n */\nLocusZoom.TransformationFunctions.add('scinotation', function(x) {\n    if (isNaN(x)) { return 'NaN'; }\n    if (x === 0) { return '0'; }\n\n    var abs = Math.abs(x);\n    var log;\n    if (abs > 1) {\n        log = Math.ceil(Math.log(abs) / Math.LN10);\n    } else {  // 0...1\n        log = Math.floor(Math.log(abs) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3) {\n        return x.toFixed(3);\n    } else {\n        return x.toExponential(2).replace('+', '').replace('e', ' × 10^');\n    }\n});\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} str\n */\nLocusZoom.TransformationFunctions.add('urlencode', function(str) {\n    return encodeURIComponent(str);\n});\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} str HTML-escape the provided value\n */\nLocusZoom.TransformationFunctions.add('htmlescape', function(str) {\n    if ( !str ) {\n        return '';\n    }\n    str = str + '';\n\n    return str.replace( /['\"<>&`]/g, function( s ) {\n        switch ( s ) {\n        case \"'\":\n            return '&#039;';\n        case '\"':\n            return '&quot;';\n        case '<':\n            return '&lt;';\n        case '>':\n            return '&gt;';\n        case '&':\n            return '&amp;';\n        case '`':\n            return '&#x60;';\n        }\n    });\n});\n\n/**\n * Singleton for accessing/storing functions that will convert arbitrary data points to values in a given scale\n * Useful for anything that needs to scale discretely with data (e.g. color, point size, etc.)\n *\n * A Scale Function can be thought of as a modifier to a layout directive that adds extra logic to how a piece of data\n *   can be resolved to a value.\n *\n * All scale functions must accept an object of parameters and a value to process.\n * @class\n * @static\n */\nLocusZoom.ScaleFunctions = (function() {\n    /** @lends LocusZoom.ScaleFunctions */\n    var obj = {};\n    var functions = {};\n\n    /**\n     * Find a scale function and return it. If parameters and values are passed, calls the function directly; otherwise\n     *   returns a callable.\n     * @param {String} name\n     * @param {Object} [parameters] Configuration parameters specific to the specified scale function\n     * @param {*} [value] The value to operate on\n     * @returns {*}\n     */\n    obj.get = function(name, parameters, value) {\n        if (!name) {\n            return null;\n        } else if (functions[name]) {\n            if (typeof parameters === 'undefined' && typeof value === 'undefined') {\n                return functions[name];\n            } else {\n                return functions[name](parameters, value);\n            }\n        } else {\n            throw new Error('scale function [' + name + '] not found');\n        }\n    };\n\n    /**\n     * @protected\n     * @param {String} name The name of the function to set/unset\n     * @param {Function} [fn] The function to register. If blank, removes this function name from the registry.\n     */\n    obj.set = function(name, fn) {\n        if (fn) {\n            functions[name] = fn;\n        } else {\n            delete functions[name];\n        }\n    };\n\n    /**\n     * Add a new scale function to the registry\n     * @param {String} name The name of the scale function\n     * @param {function} fn A scale function that accepts two parameters: an object of configuration and a value\n     */\n    obj.add = function(name, fn) {\n        if (functions[name]) {\n            throw new Error('scale function already exists with name: ' + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n\n    /**\n     * List the names of all registered scale functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(functions);\n    };\n\n    return obj;\n})();\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nLocusZoom.ScaleFunctions.add('if', function(parameters, input) {\n    if (typeof input == 'undefined' || parameters.field_value !== input) {\n        if (typeof parameters.else != 'undefined') {\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n});\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} null_value\n * @param {*} input value\n * @returns\n */\nLocusZoom.ScaleFunctions.add('numerical_bin', function(parameters, input) {\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    var threshold = breaks.reduce(function(prev, curr) {\n        if (+input < prev || (+input >= prev && +input < curr)) {\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n});\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nLocusZoom.ScaleFunctions.add('categorical_bin', function(parameters, value) {\n    if (typeof value == 'undefined' || parameters.categories.indexOf(value) === -1) {\n        return (parameters.null_value ? parameters.null_value : null);\n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n});\n\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nLocusZoom.ScaleFunctions.add('interpolate', function(parameters, input) {\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length) { return nullval; }\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) { return nullval; }\n    if (+input <= parameters.breaks[0]) {\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length - 1]) {\n        return values[breaks.length - 1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function(brk, idx) {\n            if (!idx) { return; }\n            if (breaks[idx - 1] <= +input && breaks[idx] >= +input) { upper_idx = idx; }\n        });\n        if (upper_idx === null) { return nullval; }\n        var normalized_input = (+input - breaks[upper_idx - 1]) / (breaks[upper_idx] - breaks[upper_idx - 1]);\n        if (!isFinite(normalized_input)) { return nullval; }\n        return d3.interpolate(values[upper_idx - 1], values[upper_idx])(normalized_input);\n    }\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n * A Dashboard is an HTML element used for presenting arbitrary user interface components. Dashboards are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each dashboard is an HTML-based (read: not SVG) collection of components used to display information or provide\n *   user interface. Dashboards can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n * @class\n */\nLocusZoom.Dashboard = function(parent) {\n    // parent must be a locuszoom plot or panel\n    if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)) {\n        throw new Error('Unable to create dashboard, parent must be a locuszoom plot or panel');\n    }\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + '.dashboard';\n    /** @member {('plot'|'panel')} */\n    this.type = (this.parent instanceof LocusZoom.Plot) ? 'plot' : 'panel';\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = this.type === 'plot' ? this.parent : this.parent.parent;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {LocusZoom.Dashboard.Component[]} */\n    this.components = [];\n    /**\n     * The timer identifier as returned by setTimeout\n     * @member {Number}\n     */\n    this.hide_timeout = null;\n    /**\n     * Whether to hide the dashboard. Can be overridden by a child component. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n\n    // TODO: Return value from constructor function?\n    return this.initialize();\n};\n\n/**\n * Prepare the dashboard for first use: generate all component instances for this dashboard, based on the provided\n *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.initialize = function() {\n    // Parse layout to generate component instances\n    if (Array.isArray(this.parent.layout.dashboard.components)) {\n        this.parent.layout.dashboard.components.forEach(function(layout) {\n            try {\n                var component = LocusZoom.Dashboard.Components.get(layout.type, layout, this);\n                this.components.push(component);\n            } catch (e) {\n                console.warn(e);\n            }\n        }.bind(this));\n    }\n\n    // Add mouseover event handlers to show/hide panel dashboard\n    if (this.type === 'panel') {\n        d3.select(this.parent.parent.svg.node().parentNode).on('mouseover.' + this.id, function() {\n            clearTimeout(this.hide_timeout);\n            if (!this.selector || this.selector.style('visibility') === 'hidden') { this.show(); }\n        }.bind(this));\n        d3.select(this.parent.parent.svg.node().parentNode).on('mouseout.' + this.id, function() {\n            clearTimeout(this.hide_timeout);\n            this.hide_timeout = setTimeout(function() { this.hide(); }.bind(this), 300);\n        }.bind(this));\n    }\n\n    return this;\n\n};\n\n/**\n * Whether to persist the dashboard. Returns true if at least one component should persist, or if the panel is engaged\n *   in an active drag event.\n * @returns {boolean}\n */\nLocusZoom.Dashboard.prototype.shouldPersist = function() {\n    if (this.persist) { return true; }\n    var persist = false;\n    // Persist if at least one component should also persist\n    this.components.forEach(function(component) {\n        persist = persist || component.shouldPersist();\n    });\n    // Persist if in a parent drag event\n    persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n    return !!persist;\n};\n\n/**\n * Make the dashboard appear. If it doesn't exist yet create it, including creating/positioning all components within,\n *   and make sure it is set to be visible.\n */\nLocusZoom.Dashboard.prototype.show = function() {\n    if (!this.selector) {\n        switch (this.type) {\n        case 'plot':\n            this.selector = d3.select(this.parent.svg.node().parentNode)\n                .insert('div',':first-child');\n            break;\n        case 'panel':\n            this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                .insert('div', '.lz-data_layer-tooltip, .lz-dashboard-menu, .lz-curtain').classed('lz-panel-dashboard', true);\n            break;\n        }\n        this.selector.classed('lz-dashboard', true).classed('lz-' + this.type + '-dashboard', true).attr('id', this.id);\n    }\n    this.components.forEach(function(component) { component.show(); });\n    this.selector.style({ visibility: 'visible' });\n    return this.update();\n};\n\n/**\n * Update the dashboard and rerender all child components. This can be called whenever plot state changes.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.update = function() {\n    if (!this.selector) { return this; }\n    this.components.forEach(function(component) { component.update(); });\n    return this.position();\n};\n\n/**\n * Position the dashboard (and child components) within the panel\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.position = function() {\n    if (!this.selector) { return this; }\n    // Position the dashboard itself (panel only)\n    if (this.type === 'panel') {\n        var page_origin = this.parent.getPageOrigin();\n        var top = (page_origin.y + 3.5).toString() + 'px';\n        var left = page_origin.x.toString() + 'px';\n        var width = (this.parent.layout.width - 4).toString() + 'px';\n        this.selector.style({ position: 'absolute', top: top, left: left, width: width });\n    }\n    // Recursively position components\n    this.components.forEach(function(component) { component.position(); });\n    return this;\n};\n\n/**\n * Hide the dashboard (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n *\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.hide = function() {\n    if (!this.selector || this.shouldPersist()) { return this; }\n    this.components.forEach(function(component) { component.hide(); });\n    this.selector.style({ visibility: 'hidden' });\n    return this;\n};\n\n/**\n * Completely remove dashboard and all child components. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.destroy = function(force) {\n    if (typeof force == 'undefined') { force = false; }\n    if (!this.selector) { return this; }\n    if (this.shouldPersist() && !force) { return this; }\n    this.components.forEach(function(component) { component.destroy(true); });\n    this.components = [];\n    this.selector.remove();\n    this.selector = null;\n    return this;\n};\n\n/**\n *\n * A dashboard component is an empty div rendered on a dashboard that can display custom\n * html of user interface elements. LocusZoom.Dashboard.Components is a singleton used to\n * define and manage an extendable collection of dashboard components.\n * (e.g. by LocusZoom.Dashboard.Components.add())\n * @class\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the component left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot dashboard is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple'} [layout.color='gray']  Color scheme for the\n *   component. Applies to buttons and menus.\n * @param {LocusZoom.Dashboard} parent The dashboard that contains this component\n*/\nLocusZoom.Dashboard.Component = function(layout, parent) {\n    /** @member {Object} */\n    this.layout = layout || {};\n    if (!this.layout.color) { this.layout.color = 'gray'; }\n\n    /** @member {LocusZoom.Dashboard|*} */\n    this.parent = parent || null;\n    /**\n     * Some dashboards are attached to a panel, rather than directly to a plot\n     * @member {LocusZoom.Panel|null}\n     */\n    this.parent_panel = null;\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    /**\n     * This is a reference to either the panel or the plot, depending on what the dashboard is\n     *   tied to. Useful when absolutely positioning dashboard components relative to their SVG anchor.\n     * @member {LocusZoom.Plot|LocusZoom.Panel}\n     */\n    this.parent_svg = null;\n    if (this.parent instanceof LocusZoom.Dashboard) {\n        // TODO: when is the immediate parent *not* a dashboard?\n        if (this.parent.type === 'panel') {\n            this.parent_panel = this.parent.parent;\n            this.parent_plot = this.parent.parent.parent;\n            this.parent_svg = this.parent_panel;\n        } else {\n            this.parent_plot = this.parent.parent;\n            this.parent_svg = this.parent_plot;\n        }\n    }\n    /** @member {d3.selection} */\n    this.selector = null;\n    /**\n     * If this is an interactive component, it will contain a button or menu instance that handles the interactivity.\n     *   There is a 1-to-1 relationship of dashboard component to button\n     * @member {null|LocusZoom.Dashboard.Component.Button}\n     */\n    this.button  = null;\n    /**\n     * If any single component is marked persistent, it will bubble up to prevent automatic hide behavior on a\n     *   component's parent dashboard. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    if (!this.layout.position) { this.layout.position = 'left'; }\n\n    // TODO: Return value in constructor\n    return this;\n};\n/**\n * Perform all rendering of component, including toggling visibility to true. Will initialize and create SVG element\n *   if necessary, as well as updating with new data and performing layout actions.\n */\nLocusZoom.Dashboard.Component.prototype.show = function() {\n    if (!this.parent || !this.parent.selector) { return; }\n    if (!this.selector) {\n        var group_position = (['start','middle','end'].indexOf(this.layout.group_position) !== -1 ? ' lz-dashboard-group-' + this.layout.group_position : '');\n        this.selector = this.parent.selector.append('div')\n            .attr('class', 'lz-dashboard-' + this.layout.position + group_position);\n        if (this.layout.style) { this.selector.style(this.layout.style); }\n        if (typeof this.initialize == 'function') { this.initialize(); }\n    }\n    if (this.button && this.button.status === 'highlighted') { this.button.menu.show(); }\n    this.selector.style({ visibility: 'visible' });\n    this.update();\n    return this.position();\n};\n/**\n * Update the dashboard component with any new data or plot state as appropriate. This method performs all\n *  necessary rendering steps.\n */\nLocusZoom.Dashboard.Component.prototype.update = function() { /* stub */ };\n/**\n * Place the component correctly in the plot\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.position = function() {\n    if (this.button) { this.button.menu.position(); }\n    return this;\n};\n/**\n * Determine whether the component should persist (will bubble up to parent dashboard)\n * @returns {boolean}\n */\nLocusZoom.Dashboard.Component.prototype.shouldPersist = function() {\n    if (this.persist) { return true; }\n    if (this.button && this.button.persist) { return true; }\n    return false;\n};\n/**\n * Toggle visibility to hidden, unless marked as persistent\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.hide = function() {\n    if (!this.selector || this.shouldPersist()) { return this; }\n    if (this.button) { this.button.menu.hide(); }\n    this.selector.style({ visibility: 'hidden' });\n    return this;\n};\n/**\n * Completely remove component and button. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.Component.prototype.destroy = function(force) {\n    if (typeof force == 'undefined') { force = false; }\n    if (!this.selector) { return this; }\n    if (this.shouldPersist() && !force) { return this; }\n    if (this.button && this.button.menu) { this.button.menu.destroy(); }\n    this.selector.remove();\n    this.selector = null;\n    this.button = null;\n    return this;\n};\n\n/**\n * Singleton registry of all known components\n * @class\n * @static\n */\nLocusZoom.Dashboard.Components = (function() {\n    /** @lends LocusZoom.Dashboard.Components */\n    var obj = {};\n    var components = {};\n\n    /**\n     * Create a new component instance by name\n     * @param {String} name The string identifier of the desired component\n     * @param {Object} layout The layout to use to create the component\n     * @param {LocusZoom.Dashboard} parent The containing dashboard to use when creating the component\n     * @returns {LocusZoom.Dashboard.Component}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (components[name]) {\n            if (typeof layout != 'object') {\n                throw new Error('invalid layout argument for dashboard component [' + name + ']');\n            } else {\n                return new components[name](layout, parent);\n            }\n        } else {\n            throw new Error('dashboard component [' + name + '] not found');\n        }\n    };\n    /**\n     * Add a new component constructor to the registry and ensure that it extends the correct parent class\n     * @protected\n     * @param name\n     * @param component\n     */\n    obj.set = function(name, component) {\n        if (component) {\n            if (typeof component != 'function') {\n                throw new Error('unable to set dashboard component [' + name + '], argument provided is not a function');\n            } else {\n                components[name] = component;\n                components[name].prototype = new LocusZoom.Dashboard.Component();\n            }\n        } else {\n            delete components[name];\n        }\n    };\n\n    /**\n     * Register a new component constructor by name\n     * @param {String} name\n     * @param {function} component The component constructor\n     */\n    obj.add = function(name, component) {\n        if (components[name]) {\n            throw new Error('dashboard component already exists with name: ' + name);\n        } else {\n            obj.set(name, component);\n        }\n    };\n\n    /**\n     * List the names of all registered components\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(components);\n    };\n\n    return obj;\n})();\n\n/**\n * Plots and panels may have a \"dashboard\" element suited for showing HTML components that may be interactive.\n *   When components need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @class\n * @param {LocusZoom.Dashboard.Component} parent\n */\nLocusZoom.Dashboard.Component.Button = function(parent) {\n\n    if (!(parent instanceof LocusZoom.Dashboard.Component)) {\n        throw new Error('Unable to create dashboard component button, invalid parent');\n    }\n    /** @member {LocusZoom.Dashboard.Component} */\n    this.parent = parent;\n    /** @member {LocusZoom.Dashboard.Panel} */\n    this.parent_panel = this.parent.parent_panel;\n    /** @member {LocusZoom.Dashboard.Plot} */\n    this.parent_plot = this.parent.parent_plot;\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent_svg = this.parent.parent_svg;\n\n    /** @member {LocusZoom.Dashboard|null|*} */\n    this.parent_dashboard = this.parent.parent;\n    /** @member {d3.selection} */\n    this.selector = null;\n\n    /**\n     * Tag to use for the button (default: a)\n     * @member {String}\n     */\n    this.tag = 'a';\n\n    /**\n     * TODO This method does not appear to be used anywhere\n     * @param {String} tag\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTag = function(tag) {\n        if (typeof tag != 'undefined') { this.tag = tag.toString(); }\n        return this;\n    };\n\n    /**\n     * HTML for the button to show.\n     * @protected\n     * @member {String}\n     */\n    this.html = '';\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setHtml = function(html) {\n        if (typeof html != 'undefined') { this.html = html.toString(); }\n        return this;\n    };\n    /**\n     * @deprecated since 0.5.6; use setHtml instead\n     */\n    this.setText = this.setHtml;\n\n    /**\n     * Mouseover title text for the button to show\n     * @protected\n     * @member {String}\n     */\n    this.title = '';\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTitle = function(title) {\n        if (typeof title != 'undefined') { this.title = title.toString(); }\n        return this;\n    };\n\n    /**\n     * Color of the button\n     * @member {String}\n     */\n    this.color = 'gray';\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setColor = function(color) {\n        if (typeof color != 'undefined') {\n            if (['gray', 'red', 'orange', 'yellow', 'green', 'blue', 'purple'].indexOf(color) !== -1) { this.color = color; }\n            else { this.color = 'gray'; }\n        }\n        return this;\n    };\n\n    /**\n     * Hash of arbitrary button styles to apply as {name: value} entries\n     * @protected\n     * @member {Object}\n     */\n    this.style = {};\n    /**\n     * Set a collection of custom styles to be used by the button\n     * @param {Object} style Hash of {name:value} entries\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setStyle = function(style) {\n        if (typeof style != 'undefined') { this.style = style; }\n        return this;\n    };\n\n    //\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    this.getClass = function() {\n        var group_position = (['start','middle','end'].indexOf(this.parent.layout.group_position) !== -1 ? ' lz-dashboard-button-group-' + this.parent.layout.group_position : '');\n        return 'lz-dashboard-button lz-dashboard-button-' + this.color + (this.status ? '-' + this.status : '') + group_position;\n    };\n\n    // Permanence\n    /**\n     * Track internal state on whether to keep showing the button/ menu contents at the moment\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    /**\n     * Configuration when defining a button: track whether this component should be allowed to keep open\n     *   menu/button contents in response to certain events\n     * @protected\n     * @member {Boolean}\n     */\n    this.permanent = false;\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setPermanent = function(bool) {\n        if (typeof bool == 'undefined') { bool = true; } else { bool = Boolean(bool); }\n        this.permanent = bool;\n        if (this.permanent) { this.persist = true; }\n        return this;\n    };\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    this.shouldPersist = function() {\n        return this.permanent || this.persist;\n    };\n\n    /**\n     * Button status (highlighted / disabled/ etc)\n     * @protected\n     * @member {String}\n     */\n    this.status = '';\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    this.setStatus = function(status) {\n        if (typeof status != 'undefined' && ['', 'highlighted', 'disabled'].indexOf(status) !== -1) { this.status = status; }\n        return this.update();\n    };\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.highlight = function(bool) {\n        if (typeof bool == 'undefined') { bool = true; } else { bool = Boolean(bool); }\n        if (bool) { return this.setStatus('highlighted'); }\n        else if (this.status === 'highlighted') { return this.setStatus(''); }\n        return this;\n    };\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.disable = function(bool) {\n        if (typeof bool == 'undefined') { bool = true; } else { bool = Boolean(bool); }\n        if (bool) { return this.setStatus('disabled'); }\n        else if (this.status === 'disabled') { return this.setStatus(''); }\n        return this;\n    };\n\n    // Mouse events\n    /** @member {function} */\n    this.onmouseover = function() {};\n    this.setOnMouseover = function(onmouseover) {\n        if (typeof onmouseover == 'function') { this.onmouseover = onmouseover; }\n        else { this.onmouseover = function() {}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onmouseout = function() {};\n    this.setOnMouseout = function(onmouseout) {\n        if (typeof onmouseout == 'function') { this.onmouseout = onmouseout; }\n        else { this.onmouseout = function() {}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onclick = function() {};\n    this.setOnclick = function(onclick) {\n        if (typeof onclick == 'function') { this.onclick = onclick; }\n        else { this.onclick = function() {}; }\n        return this;\n    };\n\n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    this.show = function() {\n        if (!this.parent) { return; }\n        if (!this.selector) {\n            this.selector = this.parent.selector.append(this.tag).attr('class', this.getClass());\n        }\n        return this.update();\n    };\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.preUpdate = function() { return this; };\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.update = function() {\n        if (!this.selector) { return this; }\n        this.preUpdate();\n        this.selector\n            .attr('class', this.getClass())\n            .attr('title', this.title).style(this.style)\n            .on('mouseover', (this.status === 'disabled') ? null : this.onmouseover)\n            .on('mouseout', (this.status === 'disabled') ? null : this.onmouseout)\n            .on('click', (this.status === 'disabled') ? null : this.onclick)\n            .html(this.html);\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    };\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.postUpdate = function() { return this; };\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.hide = function() {\n        if (this.selector && !this.shouldPersist()) {\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    };\n\n    /**\n     * Button Menu Object\n     * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n     *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n     * @member {Object}\n     */\n    this.menu = {\n        outer_selector: null,\n        inner_selector: null,\n        scroll_position: 0,\n        hidden: true,\n        /**\n         * Show the button menu, including setting up any DOM elements needed for first rendering\n         */\n        show: function() {\n            if (!this.menu.outer_selector) {\n                this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append('div')\n                    .attr('class', 'lz-dashboard-menu lz-dashboard-menu-' + this.color)\n                    .attr('id', this.parent_svg.getBaseId() + '.dashboard.menu');\n                this.menu.inner_selector = this.menu.outer_selector.append('div')\n                    .attr('class', 'lz-dashboard-menu-content');\n                this.menu.inner_selector.on('scroll', function() {\n                    this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                }.bind(this));\n            }\n            this.menu.outer_selector.style({ visibility: 'visible' });\n            this.menu.hidden = false;\n            return this.menu.update();\n        }.bind(this),\n        /**\n         * Update the rendering of the menu\n         */\n        update: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in component definition\n            if (this.menu.inner_selector) { this.menu.inner_selector.node().scrollTop = this.menu.scroll_position; }\n            return this.menu.position();\n        }.bind(this),\n        position: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n            this.menu.outer_selector.style({ height: null });\n            var padding = 3;\n            var scrollbar_padding = 20;\n            var menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n            var page_origin = this.parent_svg.getPageOrigin();\n            var page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n            var container_offset = this.parent_plot.getContainerOffset();\n            var dashboard_client_rect = this.parent_dashboard.selector.node().getBoundingClientRect();\n            var button_client_rect = this.selector.node().getBoundingClientRect();\n            var menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n            var total_content_height = this.menu.inner_selector.node().scrollHeight;\n            var top = 0; var left = 0;\n            if (this.parent_dashboard.type === 'panel') {\n                top = (page_origin.y + dashboard_client_rect.height + (2 * padding));\n                left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n            } else {\n                top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n            }\n            var base_max_width = Math.max(this.parent_svg.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n            var container_max_width = base_max_width;\n            var content_max_width = (base_max_width - (4 * padding));\n            var base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n            var height = Math.min(total_content_height, base_max_height);\n            var max_height = base_max_height;\n            this.menu.outer_selector.style({\n                'top': top.toString() + 'px',\n                'left': left.toString() + 'px',\n                'max-width': container_max_width.toString() + 'px',\n                'max-height': max_height.toString() + 'px',\n                'height': height.toString() + 'px'\n            });\n            this.menu.inner_selector.style({ 'max-width': content_max_width.toString() + 'px' });\n            this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n            return this.menu;\n        }.bind(this),\n        hide: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            this.menu.outer_selector.style({ visibility: 'hidden' });\n            this.menu.hidden = true;\n            return this.menu;\n        }.bind(this),\n        destroy: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            this.menu.inner_selector.remove();\n            this.menu.outer_selector.remove();\n            this.menu.inner_selector = null;\n            this.menu.outer_selector = null;\n            return this.menu;\n        }.bind(this),\n        /**\n         * Internal method definition\n         * By convention populate() does nothing and should be reimplemented with each dashboard button definition\n         *   Reimplement by way of Dashboard.Component.Button.menu.setPopulate to define the populate method and hook\n         *   up standard menu click-toggle behavior prototype.\n         * @protected\n         */\n        populate: function() { /* stub */ }.bind(this),\n        /**\n         * Define how the menu is populated with items, and set up click and display properties as appropriate\n         * @public\n         */\n        setPopulate: function(menu_populate_function) {\n            if (typeof menu_populate_function == 'function') {\n                this.menu.populate = menu_populate_function;\n                this.setOnclick(function() {\n                    if (this.menu.hidden) {\n                        this.menu.show();\n                        this.highlight().update();\n                        this.persist = true;\n                    } else {\n                        this.menu.hide();\n                        this.highlight(false).update();\n                        if (!this.permanent) { this.persist = false; }\n                    }\n                }.bind(this));\n            } else {\n                this.setOnclick();\n            }\n            return this;\n        }.bind(this)\n    };\n\n};\n\n/**\n * Renders arbitrary text with title formatting\n * @class LocusZoom.Dashboard.Components.title\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\nLocusZoom.Dashboard.Components.add('title', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.show = function() {\n        if (!this.div_selector) {\n            this.div_selector = this.parent.selector.append('div')\n                .attr('class', 'lz-dashboard-title lz-dashboard-' + this.layout.position);\n            this.title_selector = this.div_selector.append('h3');\n        }\n        return this.update();\n    };\n    this.update = function() {\n        var title = layout.title.toString();\n        if (this.layout.subtitle) { title += ' <small>' + this.layout.subtitle + '</small>'; }\n        this.title_selector.html(title);\n        return this;\n    };\n});\n\n/**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n * @class LocusZoom.Dashboard.Components.dimensions\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('dimensions', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        var display_width = this.parent_plot.layout.width.toString().indexOf('.') === -1 ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n        var display_height = this.parent_plot.layout.height.toString().indexOf('.') === -1 ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n        this.selector.html(display_width + 'px × ' + display_height + 'px');\n        if (layout.class) { this.selector.attr('class', layout.class); }\n        if (layout.style) { this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n * @class LocusZoom.Dashboard.Components.region_scale\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('region_scale', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null) {\n            this.selector.style('display', null);\n            this.selector.html(LocusZoom.positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style('display', 'none');\n        }\n        if (layout.class) { this.selector.attr('class', layout.class); }\n        if (layout.style) { this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Button to export current plot to an SVG image\n * @class LocusZoom.Dashboard.Components.download\n * @augments LocusZoom.Dashboard.Component\n * @param {string} [layout.button_html=\"Download Image\"]\n * @param {string} [layout.button_title=\"Download image of the current plot as locuszoom.svg\"]\n * @param {string} [layout.filename=\"locuszoom.svg\"] The default filename to use when saving the image\n */\nLocusZoom.Dashboard.Components.add('download', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html || 'Download Image')\n            .setTitle(layout.button_title || 'Download image of the current plot as locuszoom.svg')\n            .setOnMouseover(function() {\n                this.button.selector\n                    .classed('lz-dashboard-button-gray-disabled', true)\n                    .html('Preparing Image');\n                this.generateBase64SVG().then(function(url) {\n                    var old = this.button.selector.attr('href');\n                    if (old) { URL.revokeObjectURL(old); }  // Clean up old url instance to prevent memory leaks\n                    this.button.selector\n                        .attr('href', url)\n                        .classed('lz-dashboard-button-gray-disabled', false)\n                        .classed('lz-dashboard-button-gray-highlighted', true)\n                        .html(layout.button_html || 'Download Image');\n                }.bind(this));\n            }.bind(this))\n            .setOnMouseout(function() {\n                this.button.selector.classed('lz-dashboard-button-gray-highlighted', false);\n            }.bind(this));\n        this.button.show();\n        this.button.selector.attr('href-lang', 'image/svg+xml').attr('download', layout.filename || 'locuszoom.svg');\n        return this;\n    };\n    this.css_string = '';\n    for (var stylesheet in Object.keys(document.styleSheets)) {\n        if ( document.styleSheets[stylesheet].href !== null\n             && document.styleSheets[stylesheet].href.indexOf('locuszoom.css') !== -1) {\n            // TODO: \"Download image\" button will render the image incorrectly if the stylesheet has been renamed or concatenated\n            LocusZoom.createCORSPromise('GET', document.styleSheets[stylesheet].href)\n                .then(function(response) {\n                    this.css_string = response.replace(/[\\r\\n]/g,' ').replace(/\\s+/g,' ');\n                    if (this.css_string.indexOf('/* ! LocusZoom HTML Styles */')) {\n                        this.css_string = this.css_string.substring(0, this.css_string.indexOf('/* ! LocusZoom HTML Styles */'));\n                    }\n                }.bind(this));\n            break;\n        }\n    }\n    this.generateBase64SVG = function() {\n        return new Promise(function (resolve, reject) {\n            // Insert a hidden div, clone the node into that so we can modify it with d3\n            var container = this.parent.selector.append('div').style('display', 'none')\n                .html(this.parent_plot.svg.node().outerHTML);\n            // Remove unnecessary elements\n            container.selectAll('g.lz-curtain').remove();\n            container.selectAll('g.lz-mouse_guide').remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            container.selectAll('g.tick text').each(function() {\n                var dy = +(d3.select(this).attr('dy').substring(-2).slice(0,-2)) * 10;\n                d3.select(this).attr('dy', dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            var initial_html = d3.select(container.select('svg').node().parentNode).html();\n            var style_def = '<style type=\"text/css\"><![CDATA[ ' + this.css_string + ' ]]></style>';\n            var insert_at = initial_html.indexOf('>') + 1;\n            initial_html = initial_html.slice(0,insert_at) + style_def + initial_html.slice(insert_at);\n            // Delete the container node\n            container.remove();\n            // Create an object URL based on the rendered markup\n            var content = new Blob([initial_html], { type: 'image/svg+xml' });\n            resolve(URL.createObjectURL(content));\n        }.bind(this));\n    };\n});\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.remove_panel\n * @augments LocusZoom.Dashboard.Component\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\nLocusZoom.Dashboard.Components.add('remove_panel', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml('×')\n            .setTitle('Remove panel')\n            .setOnclick(function() {\n                if (!layout.suppress_confirm && !confirm('Are you sure you want to remove this panel? This cannot be undone!')) {\n                    return false;\n                }\n                var panel = this.parent_panel;\n                panel.dashboard.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on('mouseover.' + panel.getBaseId() + '.dashboard', null);\n                d3.select(panel.parent.svg.node().parentNode).on('mouseout.' + panel.getBaseId() + '.dashboard', null);\n                return panel.parent.removePanel(panel.id);\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_up\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('move_panel_up', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) {\n            var is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml('▴')\n            .setTitle('Move panel up')\n            .setOnclick(function() {\n                this.parent_panel.moveUp();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_down\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('move_panel_down', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) {\n            var is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length - 1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml('▾')\n            .setTitle('Move panel down')\n            .setOnclick(function() {\n                this.parent_panel.moveDown();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @class LocusZoom.Dashboard.Components.shift_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\nLocusZoom.Dashboard.Components.add('shift_region', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n        this.update = function() {};\n        console.warn('Unable to add shift_region dashboard component: plot state does not have region bounds');\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0) { layout.step = 50000; }\n    if (typeof layout.button_html !== 'string') { layout.button_html = layout.step > 0 ? '>' : '<'; }\n    if (typeof layout.button_title !== 'string') {\n        layout.button_title = 'Shift region by ' + (layout.step > 0 ? '+' : '-') + LocusZoom.positionIntToString(Math.abs(layout.step),null,true);\n    }\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html)\n            .setTitle(layout.button_title)\n            .setOnclick(function() {\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + layout.step, 1),\n                    end: this.parent_plot.state.end + layout.step\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @class LocusZoom.Dashboard.Components.zoom_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\nLocusZoom.Dashboard.Components.add('zoom_region', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n        this.update = function() {};\n        console.warn('Unable to add zoom_region dashboard component: plot state does not have region bounds');\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0) { layout.step = 0.2; }\n    if (typeof layout.button_html != 'string') { layout.button_html = layout.step > 0 ? 'z–' : 'z+'; }\n    if (typeof layout.button_title != 'string') {\n        layout.button_title = 'Zoom region ' + (layout.step > 0 ? 'out' : 'in') + ' by ' + (Math.abs(layout.step) * 100).toFixed(1) + '%';\n    }\n    this.update = function() {\n        if (this.button) {\n            var can_zoom = true;\n            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale) {\n                can_zoom = false;\n            }\n            if (layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale) {\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html)\n            .setTitle(layout.button_title)\n            .setOnclick(function() {\n                var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                var zoom_factor = 1 + layout.step;\n                var new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)) {\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)) {\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                var delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @class LocusZoom.Dashboard.Components.menu\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nLocusZoom.Dashboard.Components.add('menu', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title);\n        this.button.menu.setPopulate(function() {\n            this.button.menu.inner_selector.html(layout.menu_html);\n        }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n *   objects and store them in the special `model.covariates` field of plot `state`.\n * @class LocusZoom.Dashboard.Components.covariates_model\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n */\nLocusZoom.Dashboard.Components.add('covariates_model', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.initialize = function() {\n        // Initialize state.model.covariates\n        this.parent_plot.state.model = this.parent_plot.state.model || {};\n        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n        // Create an object at the plot level for easy access to interface methods in custom client-side JS\n        /**\n         * When a covariates model dashboard element is present, create (one) object at the plot level that exposes\n         *   component data and state for custom interactions with other plot elements.\n         * @class LocusZoom.Plot.CovariatesModel\n         */\n        this.parent_plot.CovariatesModel = {\n            /** @member {LocusZoom.Dashboard.Component.Button} */\n            button: this,\n            /**\n             * Add an element to the model and show a representation of it in the dashboard component menu. If the\n             *   element is already part of the model, do nothing (to avoid adding duplicates).\n             * When plot state is changed, this will automatically trigger requests for new data accordingly.\n             * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n             *   to create a serialized representation of itself.\n             */\n            add: function(element_reference) {\n                var element = JSON.parse(JSON.stringify(element_reference));\n                if (typeof element_reference == 'object' && typeof element.html != 'string') {\n                    element.html = ( (typeof element_reference.toHTML == 'function') ? element_reference.toHTML() : element_reference.toString());\n                }\n                // Check if the element is already in the model covariates array and return if it is.\n                for (var i = 0; i < this.state.model.covariates.length; i++) {\n                    if (JSON.stringify(this.state.model.covariates[i]) === JSON.stringify(element)) {\n                        return this;\n                    }\n                }\n                this.state.model.covariates.push(element);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Remove an element from `state.model.covariates` (and from the dashboard component menu's\n             *  representation of the state model). When plot state is changed, this will automatically trigger\n             *  requests for new data accordingly.\n             * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n             */\n            removeByIdx: function(idx) {\n                if (typeof this.state.model.covariates[idx] == 'undefined') {\n                    throw new Error('Unable to remove model covariate, invalid index: ' + idx.toString());\n                }\n                this.state.model.covariates.splice(idx, 1);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Empty the `state.model.covariates` array (and dashboard component menu representation thereof) of all\n             *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n             */\n            removeAll: function() {\n                this.state.model.covariates = [];\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Manually trigger the update methods on the dashboard component's button and menu elements to force\n             *   display of most up-to-date content. Can be used to force the dashboard to reflect changes made, eg if\n             *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n             */\n            updateComponent: function() {\n                this.button.update();\n                this.button.menu.update();\n            }.bind(this)\n        };\n    }.bind(this);\n\n    this.update = function() {\n\n        if (this.button) { return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html)\n            .setTitle(layout.button_title)\n            .setOnclick(function() {\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function() {\n            var selector = this.button.menu.inner_selector;\n            selector.html('');\n            // General model HTML representation\n            if (typeof this.parent_plot.state.model.html != 'undefined') {\n                selector.append('div').html(this.parent_plot.state.model.html);\n            }\n            // Model covariates table\n            if (!this.parent_plot.state.model.covariates.length) {\n                selector.append('i').html('no covariates in model');\n            } else {\n                selector.append('h5').html('Model Covariates (' + this.parent_plot.state.model.covariates.length + ')');\n                var table = selector.append('table');\n                this.parent_plot.state.model.covariates.forEach(function(covariate, idx) {\n                    var html = ( (typeof covariate == 'object' && typeof covariate.html == 'string') ? covariate.html : covariate.toString() );\n                    var row = table.append('tr');\n                    row.append('td').append('button')\n                        .attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color)\n                        .style({ 'margin-left': '0em' })\n                        .on('click', function() {\n                            this.parent_plot.CovariatesModel.removeByIdx(idx);\n                        }.bind(this))\n                        .html('×');\n                    row.append('td').html(html);\n                }.bind(this));\n                selector.append('button')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color)\n                    .style({ 'margin-left': '4px' }).html('× Remove All Covariates')\n                    .on('click', function() {\n                        this.parent_plot.CovariatesModel.removeAll();\n                    }.bind(this));\n            }\n        }.bind(this));\n\n        this.button.preUpdate = function() {\n            var html = 'Model';\n            if (this.parent_plot.state.model.covariates.length) {\n                var cov = this.parent_plot.state.model.covariates.length > 1 ? 'covariates' : 'covariate';\n                html += ' (' + this.parent_plot.state.model.covariates.length + ' ' + cov + ')';\n            }\n            this.button.setHtml(html).disable(false);\n        }.bind(this);\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Button to toggle split tracks\n * @class LocusZoom.Dashboard.Components.toggle_split_tracks\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('toggle_split_tracks', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (!layout.data_layer_id) { layout.data_layer_id = 'intervals'; }\n    if (!this.parent_panel.data_layers[layout.data_layer_id]) {\n        throw new Error('Dashboard toggle split tracks component missing valid data layer ID');\n    }\n    this.update = function() {\n        var data_layer = this.parent_panel.data_layers[layout.data_layer_id];\n        var html = data_layer.layout.split_tracks ? 'Merge Tracks' : 'Split Tracks';\n        if (this.button) {\n            this.button.setHtml(html);\n            this.button.show();\n            this.parent.position();\n            return this;\n        } else {\n            this.button = new LocusZoom.Dashboard.Component.Button(this)\n                .setColor(layout.color)\n                .setHtml(html)\n                .setTitle('Toggle whether tracks are split apart or merged together')\n                .setOnclick(function() {\n                    data_layer.toggleSplitTracks();\n                    if (this.scale_timeout) { clearTimeout(this.scale_timeout); }\n                    var timeout = data_layer.layout.transition ? +data_layer.layout.transition.duration || 0 : 0;\n                    this.scale_timeout = setTimeout(function() {\n                        this.parent_panel.scaleHeightToData();\n                        this.parent_plot.positionPanels();\n                    }.bind(this), timeout);\n                    this.update();\n                }.bind(this));\n            return this.update();\n        }\n    };\n});\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @class LocusZoom.Dashboard.Components.resize_to_data\n * @augments LocusZoom.Dashboard.Component\n * @param {string} [layout.button_html=\"Resize to Data\"]\n * @param {string} [layout.button_title]\n */\nLocusZoom.Dashboard.Components.add('resize_to_data', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html || 'Resize to Data')\n            .setTitle(layout.button_title || 'Automatically resize this panel to show all data available')\n            .setOnclick(function() {\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to toggle legend\n * @class LocusZoom.Dashboard.Components.toggle_legend\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('toggle_legend', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        var html = this.parent_panel.legend.layout.hidden ? 'Show Legend' : 'Hide Legend';\n        if (this.button) {\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setTitle('Show or hide the legend for this panel')\n            .setOnclick(function() {\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            }.bind(this));\n        return this.update();\n    };\n});\n\n/**\n * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n * @class LocusZoom.Dashboard.Components.data_layers\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('data_layers', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.update = function() {\n\n        if (typeof layout.button_html != 'string') { layout.button_html = 'Data Layers'; }\n        if (typeof layout.button_title != 'string') { layout.button_title = 'Manipulate Data Layers (sort, dim, show/hide, etc.)'; }\n\n        if (this.button) { return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html)\n            .setTitle(layout.button_title)\n            .setOnclick(function() {\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function() {\n            this.button.menu.inner_selector.html('');\n            var table = this.button.menu.inner_selector.append('table');\n            this.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function(id, idx) {\n                var data_layer = this.parent_panel.data_layers[id];\n                var name = (typeof data_layer.layout.name != 'string') ? data_layer.id : data_layer.layout.name;\n                var row = table.append('tr');\n                // Layer name\n                row.append('td').html(name);\n                // Status toggle buttons\n                layout.statuses.forEach(function(status_adj) {\n                    var status_idx = LocusZoom.DataLayer.Statuses.adjectives.indexOf(status_adj);\n                    var status_verb = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                    var html, onclick, highlight;\n                    if (data_layer.global_statuses[status_adj]) {\n                        html = LocusZoom.DataLayer.Statuses.menu_antiverbs[status_idx];\n                        onclick = 'un' + status_verb + 'AllElements';\n                        highlight = '-highlighted';\n                    } else {\n                        html = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                        onclick = status_verb + 'AllElements';\n                        highlight = '';\n                    }\n                    row.append('td').append('a')\n                        .attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color + highlight)\n                        .style({ 'margin-left': '0em' })\n                        .on('click', function() { data_layer[onclick](); this.button.menu.populate(); }.bind(this))\n                        .html(html);\n                }.bind(this));\n                // Sort layer buttons\n                var at_top = (idx === 0);\n                var at_bottom = (idx === (this.parent_panel.data_layer_ids_by_z_index.length - 1));\n                var td = row.append('td');\n                td.append('a')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-group-start lz-dashboard-button-' + this.layout.color + (at_bottom ? '-disabled' : ''))\n                    .style({ 'margin-left': '0em' })\n                    .on('click', function() { data_layer.moveDown(); this.button.menu.populate(); }.bind(this))\n                    .html('▾').attr('title', 'Move layer down (further back)');\n                td.append('a')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-group-middle lz-dashboard-button-' + this.layout.color + (at_top ? '-disabled' : ''))\n                    .style({ 'margin-left': '0em' })\n                    .on('click', function() { data_layer.moveUp(); this.button.menu.populate(); }.bind(this))\n                    .html('▴').attr('title', 'Move layer up (further front)');\n                td.append('a')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-group-end lz-dashboard-button-red')\n                    .style({ 'margin-left': '0em' })\n                    .on('click', function() {\n                        if (confirm('Are you sure you want to remove the ' + name + ' layer? This cannot be undone!')) {\n                            data_layer.parent.removeDataLayer(id);\n                        }\n                        return this.button.menu.populate();\n                    }.bind(this))\n                    .html('×').attr('title', 'Remove layer');\n            }.bind(this));\n            return this;\n        }.bind(this));\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @class LocusZoom.Dashboard.Components.display_options\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options...\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\nLocusZoom.Dashboard.Components.add('display_options', function (layout) {\n    if (typeof layout.button_html != 'string') { layout.button_html = 'Display options...'; }\n    if (typeof layout.button_title != 'string') { layout.button_title = 'Control how plot items are displayed'; }\n\n    // Call parent constructor\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n    //  information (like plot height etc) while changing point rendering\n    var allowed_fields = layout.fields_whitelist || ['color', 'fill_opacity', 'label', 'legend',\n        'point_shape', 'point_size', 'tooltip', 'tooltip_positioning'];\n\n    var dataLayer = this.parent_panel.data_layers[layout.layer_name];\n    if (!dataLayer) {\n        throw new Error(\"Display options could not locate the specified layer_name: '\" + layout.layer_name + \"'\");\n    }\n    var dataLayerLayout = dataLayer.layout;\n\n    // Store default configuration for the layer as a clean deep copy, so we may revert later\n    var defaultConfig = {};\n    allowed_fields.forEach(function(name) {\n        var configSlot = dataLayerLayout[name];\n        if (configSlot !== undefined) {\n            defaultConfig[name] = JSON.parse(JSON.stringify(configSlot));\n        }\n    });\n\n    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n    this._selected_item = 'default';\n\n    // Define the button + menu that provides the real functionality for this dashboard component\n    var self = this;\n    this.button = new LocusZoom.Dashboard.Component.Button(self)\n        .setColor(layout.color)\n        .setHtml(layout.button_html)\n        .setTitle(layout.button_title)\n        .setOnclick(function () {\n            self.button.menu.populate();\n        });\n    this.button.menu.setPopulate(function () {\n        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n        var uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n        self.button.menu.inner_selector.html('');\n        var table = self.button.menu.inner_selector.append('table');\n\n        var menuLayout = self.layout;\n\n        var renderRow = function(display_name, display_options, row_id) { // Helper method\n            var row = table.append('tr');\n            var radioId = '' + uniqueID + row_id;\n            row.append('td')\n                .append('input')\n                .attr({id: radioId, type: 'radio', name: 'display-option-' + uniqueID, value: row_id})\n                .style('margin', 0) // Override css libraries (eg skeleton) that style form inputs\n                .property('checked', (row_id === self._selected_item))\n                .on('click', function () {\n                    // If an option is not specified in these display options, use the original defaults\n                    allowed_fields.forEach(function(field_name) {\n                        dataLayer.layout[field_name] = display_options[field_name] || defaultConfig[field_name];\n                    });\n\n                    self._selected_item = row_id;\n                    self.parent_panel.render();\n                    var legend = self.parent_panel.legend;\n                    if (legend) {\n                        legend.render();\n                    }\n                });\n            row.append('td').append('label')\n                .style('font-weight', 'normal')\n                .attr('for', radioId)\n                .text(display_name);\n        };\n        // Render the \"display options\" menu: default and special custom options\n        var defaultName = menuLayout.default_config_display_name || 'Default style';\n        renderRow(defaultName, defaultConfig, 'default');\n        menuLayout.options.forEach(function (item, index) {\n            renderRow(item.display_name, item.display, index);\n        });\n        return self;\n    });\n\n    this.update = function () {\n        this.button.show();\n        return this;\n    };\n});\n\n\n/**\n * Dropdown menu allowing the user to set the value of a specific `state_field` in plot.state\n * This is useful for things (like datasources) that allow dynamic configuration based on global information in state\n *\n * For example, the LDLZ2 data source can use it to change LD reference population (for all panels) after render\n *\n * @class LocusZoom.Dashboard.Components.set_state\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Set option...\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Choose an option to customize the plot\"] Hover text for the toolbar button\n * @param {bool} [layout.show_selected=false] Whether to append the selected value to the button label\n * @param {string} [layout.state_field] The name of the field in plot.state that will be set by this button\n * @typedef {{display_name: string, value: *}} SetStateOptionsConfigField\n * @param {SetStateOptionsConfigField[]} layout.options Specify human labels and associated values for the dropdown menu\n */\nLocusZoom.Dashboard.Components.add('set_state', function (layout) {\n    var self = this;\n    if (typeof layout.button_html != 'string') { layout.button_html = 'Set option...'; }\n    if (typeof layout.button_title != 'string') { layout.button_title = 'Choose an option to customize the plot'; }\n\n    // Call parent constructor\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    if (this.parent_panel) {\n        throw new Error('This widget is designed to set global options, so it can only be used at the top (plot) level');\n    }\n    if (!layout.state_field) {\n        throw new Error('Must specify the `state_field` that this widget controls');\n    }\n\n    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n    // The first option listed is automatically assumed to be the default, unless a value exists in plot.state\n    this._selected_item = this.parent_plot.state[layout.state_field] || layout.options[0].value;\n    if (!layout.options.find(function(item) { return item.value === self._selected_item; })) {\n        // Check only gets run at widget creation, but generally this widget is assumed to be an exclusive list of options\n        throw new Error('There is an existing state value that does not match the known values in this widget');\n    }\n\n    // Define the button + menu that provides the real functionality for this dashboard component\n    this.button = new LocusZoom.Dashboard.Component.Button(self)\n        .setColor(layout.color)\n        .setHtml(layout.button_html + (layout.show_selected ? this._selected_item : ''))\n        .setTitle(layout.button_title)\n        .setOnclick(function () {\n            self.button.menu.populate();\n        });\n    this.button.menu.setPopulate(function () {\n        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n        var uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n        self.button.menu.inner_selector.html('');\n        var table = self.button.menu.inner_selector.append('table');\n\n        var renderRow = function(display_name, value, row_id) { // Helper method\n            var row = table.append('tr');\n            var radioId = '' + uniqueID + row_id;\n            row.append('td')\n                .append('input')\n                .attr({id: radioId, type: 'radio', name: 'set-state-' + uniqueID, value: row_id})\n                .style('margin', 0) // Override css libraries (eg skeleton) that style form inputs\n                .property('checked', (value === self._selected_item))\n                .on('click', function () {\n                    var new_state = {};\n                    new_state[layout.state_field] = value;\n                    self._selected_item = value;\n                    self.parent_plot.applyState(new_state);\n                    self.button.setHtml(layout.button_html + (layout.show_selected ? self._selected_item : ''));\n                });\n            row.append('td').append('label')\n                .style('font-weight', 'normal')\n                .attr('for', radioId)\n                .text(display_name);\n        };\n        layout.options.forEach(function (item, index) {\n            renderRow(item.display_name, item.value, index);\n        });\n        return self;\n    });\n\n    this.update = function () {\n        this.button.show();\n        return this;\n    };\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @class\n * @param {LocusZoom.Panel} parent\n*/\nLocusZoom.Legend = function(parent) {\n    if (!(parent instanceof LocusZoom.Panel)) {\n        throw new Error('Unable to create legend, parent must be a locuszoom panel');\n    }\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + '.legend';\n\n    this.parent.layout.legend = LocusZoom.Layouts.merge(this.parent.layout.legend || {}, LocusZoom.Legend.DefaultLayout);\n    /** @member {Object} */\n    this.layout = this.parent.layout.legend;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {d3.selection} */\n    this.background_rect = null;\n    /** @member {d3.selection[]} */\n    this.elements = [];\n    /**\n     * SVG selector for the group containing all elements in the legend\n     * @protected\n     * @member {d3.selection|null}\n     */\n    this.elements_group = null;\n\n    /**\n     * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n     * @deprecated\n     * @protected\n     * @member {Boolean}\n     */\n    this.hidden = false;\n\n    // TODO Revisit constructor return value; see https://stackoverflow.com/a/3350364/1422268\n    return this.render();\n};\n\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nLocusZoom.Legend.DefaultLayout = {\n    orientation: 'vertical',\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false\n};\n\n/**\n * Render the legend in the parent panel\n */\nLocusZoom.Legend.prototype.render = function() {\n\n    // Get a legend group selector if not yet defined\n    if (!this.selector) {\n        this.selector = this.parent.svg.group.append('g')\n            .attr('id', this.parent.getBaseId() + '.legend').attr('class', 'lz-legend');\n    }\n\n    // Get a legend background rect selector if not yet defined\n    if (!this.background_rect) {\n        this.background_rect = this.selector.append('rect')\n            .attr('width', 100).attr('height', 100).attr('class', 'lz-legend-background');\n    }\n\n    // Get a legend elements group selector if not yet defined\n    if (!this.elements_group) {\n        this.elements_group = this.selector.append('g');\n    }\n\n    // Remove all elements from the document and re-render from scratch\n    this.elements.forEach(function(element) {\n        element.remove();\n    });\n    this.elements = [];\n\n    // Gather all elements from data layers in order (top to bottom) and render them\n    var padding = +this.layout.padding || 1;\n    var x = padding;\n    var y = padding;\n    var line_height = 0;\n    this.parent.data_layer_ids_by_z_index.slice().reverse().forEach(function(id) {\n        if (Array.isArray(this.parent.data_layers[id].layout.legend)) {\n            this.parent.data_layers[id].layout.legend.forEach(function(element) {\n                var selector = this.elements_group.append('g')\n                    .attr('transform', 'translate(' + x + ',' + y + ')');\n                var label_size = +element.label_size || +this.layout.label_size || 12;\n                var label_x = 0;\n                var label_y = (label_size / 2) + (padding / 2);\n                line_height = Math.max(line_height, label_size + padding);\n                // Draw the legend element symbol (line, rect, shape, etc)\n                if (element.shape === 'line') {\n                    // Line symbol\n                    var length = +element.length || 16;\n                    var path_y = (label_size / 4) + (padding / 2);\n                    selector.append('path').attr('class', element.class || '')\n                        .attr('d', 'M0,' + path_y + 'L' + length + ',' + path_y)\n                        .style(element.style || {});\n                    label_x = length + padding;\n                } else if (element.shape === 'rect') {\n                    // Rect symbol\n                    var width = +element.width || 16;\n                    var height = +element.height || width;\n                    selector.append('rect').attr('class', element.class || '')\n                        .attr('width', width).attr('height', height)\n                        .attr('fill', element.color || {})\n                        .style(element.style || {});\n                    label_x = width + padding;\n                    line_height = Math.max(line_height, height + padding);\n                } else if (d3.svg.symbolTypes.indexOf(element.shape) !== -1) {\n                    // Shape symbol (circle, diamond, etc.)\n                    var size = +element.size || 40;\n                    var radius = Math.ceil(Math.sqrt(size / Math.PI));\n                    selector.append('path').attr('class', element.class || '')\n                        .attr('d', d3.svg.symbol().size(size).type(element.shape))\n                        .attr('transform', 'translate(' + radius + ',' + (radius + (padding / 2)) + ')')\n                        .attr('fill', element.color || {})\n                        .style(element.style || {});\n                    label_x = (2 * radius) + padding;\n                    label_y = Math.max((2 * radius) + (padding / 2), label_y);\n                    line_height = Math.max(line_height, (2 * radius) + padding);\n                }\n                // Draw the legend element label\n                selector.append('text').attr('text-anchor', 'left').attr('class', 'lz-label')\n                    .attr('x', label_x).attr('y', label_y).style({'font-size': label_size}).text(element.label);\n                // Position the legend element group based on legend layout orientation\n                var bcr = selector.node().getBoundingClientRect();\n                if (this.layout.orientation === 'vertical') {\n                    y += bcr.height + padding;\n                    line_height = 0;\n                } else {\n                    // Ensure this element does not exceed the panel width\n                    // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                    var right_x = this.layout.origin.x + x + bcr.width;\n                    if (x > padding && right_x > this.parent.layout.width) {\n                        y += line_height;\n                        x = padding;\n                        selector.attr('transform', 'translate(' + x + ',' + y + ')');\n                    }\n                    x += bcr.width + (3 * padding);\n                }\n                // Store the element\n                this.elements.push(selector);\n            }.bind(this));\n        }\n    }.bind(this));\n\n    // Scale the background rect to the elements in the legend\n    var bcr = this.elements_group.node().getBoundingClientRect();\n    this.layout.width = bcr.width + (2 * this.layout.padding);\n    this.layout.height = bcr.height + (2 * this.layout.padding);\n    this.background_rect\n        .attr('width', this.layout.width)\n        .attr('height', this.layout.height);\n\n    // Set the visibility on the legend from the \"hidden\" flag\n    // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n    this.selector.style({ visibility: this.layout.hidden ? 'hidden' : 'visible' });\n\n    // TODO: Annotate return type and make consistent\n    return this.position();\n};\n\n/**\n * Place the legend in position relative to the panel, as specified in the layout configuration\n * @returns {LocusZoom.Legend | null}\n * TODO: should this always be chainable?\n */\nLocusZoom.Legend.prototype.position = function() {\n    if (!this.selector) { return this; }\n    var bcr = this.selector.node().getBoundingClientRect();\n    if (!isNaN(+this.layout.pad_from_bottom)) {\n        this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n    }\n    if (!isNaN(+this.layout.pad_from_right)) {\n        this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n    }\n    this.selector.attr('transform', 'translate(' + this.layout.origin.x + ',' + this.layout.origin.y + ')');\n};\n\n/**\n * Hide the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.hide = function() {\n    this.layout.hidden = true;\n    this.render();\n};\n\n/**\n * Show the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.show = function() {\n    this.layout.hidden = false;\n    this.render();\n};\n","/* global LocusZoom */\n'use strict';\n\nfunction validateBuildSource(class_name, build, source) {\n    // Build OR Source, not both\n    if ((build && source) || !(build || source)) {\n        throw new Error(class_name + ' must provide a parameter specifying either \"build\" or \"source\". It should not specify both.');\n    }\n    // If the build isn't recognized, our APIs can't transparently select a source to match\n    if (build && ['GRCh37', 'GRCh38'].indexOf(build) === -1) {\n        throw new Error(class_name + ' must specify a valid genome build number');\n    }\n}\n\n/**\n * LocusZoom functionality used for data parsing and retrieval\n * @namespace\n * @public\n */\nLocusZoom.Data = LocusZoom.Data ||  {};\n\n/**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * @public\n * @class\n */\nLocusZoom.DataSources = function() {\n    /** @member {Object.<string, LocusZoom.Data.Source>} */\n    this.sources = {};\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.addSource = function(ns, x) {\n    console.warn('Warning: .addSource() is deprecated. Use .add() instead');\n    return this.add(ns, x);\n};\n\n/**\n * Add a (namespaced) datasource to the plot\n * @public\n * @param {String} ns A namespace used for fields from this data source\n * @param {LocusZoom.Data.Source|Array|null} x An instantiated datasource, or an array of arguments that can be used to\n *   create a known datasource type.\n */\nLocusZoom.DataSources.prototype.add = function(ns, x) {\n    // FIXME: Some existing sites create sources with arbitrary names. This leads to subtle breakage\n    //    of namespaced fields in layouts. To avoid breaking existing usages outright, issue a deprecation warning.\n    if (ns.match(/[^A-Za-z0-9_]/)) {\n        console.warn(\"Deprecation warning: source name '\" + ns + \"' should contain only alphanumeric characters or underscores. Use of other characters may break layouts, and will be disallowed in the future.\");\n    }\n    return this.set(ns, x);\n};\n\n/** @protected */\nLocusZoom.DataSources.prototype.set = function(ns, x) {\n    if (Array.isArray(x)) {\n        // If passed array of source name and options, make the source\n        var dsobj = LocusZoom.KnownDataSources.create.apply(null, x);\n        // Each datasource in the chain should be aware of its assigned namespace\n        dsobj.source_id = ns;\n        this.sources[ns] = dsobj;\n    } else {\n        // If passed the already-created source object\n        if (x !== null) {\n            x.source_id = ns;\n            this.sources[ns] = x;\n        } else {\n            delete this.sources[ns];\n        }\n    }\n    return this;\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.getSource = function(ns) {\n    console.warn('Warning: .getSource() is deprecated. Use .get() instead');\n    return this.get(ns);\n};\n\n/**\n * Return the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n * @returns {LocusZoom.Data.Source}\n */\nLocusZoom.DataSources.prototype.get = function(ns) {\n    return this.sources[ns];\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.removeSource = function(ns) {\n    console.warn('Warning: .removeSource() is deprecated. Use .remove() instead');\n    return this.remove(ns);\n};\n\n/**\n * Remove the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n */\nLocusZoom.DataSources.prototype.remove = function(ns) {\n    return this.set(ns, null);\n};\n\n/**\n * Populate a list of datasources specified as a JSON object\n * @public\n * @param {String|Object} x An object or JSON representation containing {ns: configArray} entries\n * @returns {LocusZoom.DataSources}\n */\nLocusZoom.DataSources.prototype.fromJSON = function(x) {\n    if (typeof x === 'string') {\n        x = JSON.parse(x);\n    }\n    var ds = this;\n    Object.keys(x).forEach(function(ns) {\n        ds.set(ns, x[ns]);\n    });\n    return ds;\n};\n\n/**\n * Return the names of all currently recognized datasources\n * @public\n * @returns {Array}\n */\nLocusZoom.DataSources.prototype.keys = function() {\n    return Object.keys(this.sources);\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents existing sources in that format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n */\nLocusZoom.DataSources.prototype.toJSON = function() {\n    return this.sources;\n};\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @public\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nLocusZoom.Data.Field = function(field) {\n\n    var parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n    /** @member {String} */\n    this.full_name = field;\n    /** @member {String} */\n    this.namespace = parts[1] || null;\n    /** @member {String} */\n    this.name = parts[2] || null;\n    /** @member {Array} */\n    this.transformations = [];\n\n    if (typeof parts[3] == 'string' && parts[3].length > 1) {\n        this.transformations = parts[3].substring(1).split('|');\n        this.transformations.forEach(function(transform, i) {\n            this.transformations[i] = LocusZoom.TransformationFunctions.get(transform);\n        }.bind(this));\n    }\n\n    this.applyTransformations = function(val) {\n        this.transformations.forEach(function(transform) {\n            val = transform(val);\n        });\n        return val;\n    };\n\n    /**\n     * Resolve the field for a given data element.\n     *   First look for a full match with transformations already applied by the data requester.\n     *   Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n     * @param {Object} data Returned data/fields into for this element\n     * @param {Object} [extra] User-applied annotations for this point (info not provided by the server that we want\n     *  to preserve across re-renders). Example usage: \"should_show_label\"\n     * @returns {*}\n     */\n    this.resolve = function(data, extra) {\n        if (typeof data[this.full_name] == 'undefined') { // Check for cached result\n            var val = null;\n            if (typeof (data[this.namespace + ':' + this.name]) != 'undefined') { // Fallback: value sans transforms\n                val = data[this.namespace + ':' + this.name];\n            } else if (typeof data[this.name] != 'undefined') { // Fallback: value present without namespace\n                val = data[this.name];\n            } else if (extra && typeof extra[this.full_name] != 'undefined') { // Fallback: check annotations\n                val = extra[this.full_name];\n            } // We should really warn if no value found, but many bad layouts exist and this could break compatibility\n            data[this.full_name] = this.applyTransformations(val);\n        }\n        return data[this.full_name];\n    };\n\n};\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {LocusZoom.DataSources} sources An object of {ns: LocusZoom.Data.Source} instances\n * @class\n */\nLocusZoom.Data.Requester = function(sources) {\n\n    function split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || 'base';\n            var field = parts[2];\n            var trans = LocusZoom.TransformationFunctions.get(parts[3]);\n            if (typeof requests[ns] == 'undefined') {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    this.getData = function(state, fields) {\n        var requests = split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var request_handles = Object.keys(requests).map(function(key) {\n            if (!sources.get(key)) {\n                throw new Error('Datasource for namespace ' + key + ' not found');\n            }\n            return sources.get(key).getData(state, requests[key].fields,\n                                            requests[key].outnames, requests[key].trans);\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Promise.resolve({header:{}, body: [], discrete: {}});\n        for(var i = 0; i < request_handles.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(request_handles[i]);\n        }\n        return ret;\n    };\n};\n\n/**\n * Base class for LocusZoom data sources\n * This can be extended with .extend() to create custom data sources\n * @class\n * @public\n */\nLocusZoom.Data.Source = function() {\n    /**\n     * Whether this source should enable caching\n     * @member {Boolean}\n     */\n    this.enableCache = true;\n    /**\n     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n     *  association data if no data was found for that region.\n     * @member {boolean}\n     */\n    this.dependentSource = false;\n};\n\n/**\n * A default constructor that can be used when creating new data sources\n * @param {String|Object} init Basic configuration- either a url, or a config object\n * @param {String} [init.url] The datasource URL\n * @param {String} [init.params] Initial config params for the datasource\n */\nLocusZoom.Data.Source.prototype.parseInit = function(init) {\n    if (typeof init === 'string') {\n        /** @member {String} */\n        this.url = init;\n        /** @member {String} */\n        this.params = {};\n    } else {\n        this.url = init.url;\n        this.params = init.params || {};\n    }\n    if (!this.url) {\n        throw new Error('Source not initialized with required URL');\n    }\n\n};\n\n/**\n * A unique identifier that indicates whether cached data is valid for this request\n * @protected\n * @param state\n * @param chain\n * @param fields\n * @returns {String|undefined}\n */\nLocusZoom.Data.Source.prototype.getCacheKey = function(state, chain, fields) {\n    return this.getURL && this.getURL(state, chain, fields);\n};\n\n/**\n * Stub: build the URL for any requests made by this source.\n */\nLocusZoom.Data.Source.prototype.getURL = function(state, chain, fields) { return this.url; };\n\n/**\n * Perform a network request to fetch data for this source\n * @protected\n * @param {Object} state The state of the parent plot\n * @param chain\n * @param fields\n * @returns {Promise}\n */\nLocusZoom.Data.Source.prototype.fetchRequest = function(state, chain, fields) {\n    var url = this.getURL(state, chain, fields);\n    return LocusZoom.createCORSPromise('GET', url);\n};\n\n/**\n * Gets the data for just this source, typically via a network request (caching where possible)\n * @protected\n */\nLocusZoom.Data.Source.prototype.getRequest = function(state, chain, fields) {\n    var req;\n    var cacheKey = this.getCacheKey(state, chain, fields);\n    if (this.enableCache && typeof(cacheKey) !== 'undefined' && cacheKey === this._cachedKey) {\n        req = Promise.resolve(this._cachedResponse);  // Resolve to the value of the current promise\n    } else {\n        req = this.fetchRequest(state, chain, fields);\n        if (this.enableCache) {\n            this._cachedKey = cacheKey;\n            this._cachedResponse = req;\n        }\n    }\n    return req;\n};\n\n/**\n * Fetch the data from the specified data source, and apply transformations requested by an external consumer.\n * This is the public-facing datasource method that will most commonly be called by external code.\n *\n * @public\n * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {function} A callable operation that can be used as part of the data chain\n */\nLocusZoom.Data.Source.prototype.getData = function(state, fields, outnames, trans) {\n    if (this.preGetData) {\n        var pre = this.preGetData(state, fields, outnames, trans);\n        if(this.pre) {\n            state = pre.state || state;\n            fields = pre.fields || fields;\n            outnames = pre.outnames || outnames;\n            trans = pre.trans || trans;\n        }\n    }\n\n    var self = this;\n    return function (chain) {\n        if (self.dependentSource && chain && chain.body && !chain.body.length) {\n            // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n            // Therefore, it should simply return the previous data chain.\n            return Promise.resolve(chain);\n        }\n\n        return self.getRequest(state, chain, fields).then(function(resp) {\n            return self.parseResponse(resp, chain, fields, outnames, trans);\n        });\n    };\n};\n\n/**\n * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n *\n * Does not apply namespacing, transformations, or field extraction.\n *\n * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other\n *  sources (eg, if the payload provides extra data rather than a series of records).\n *\n * @param {Object[]|Object} data The original parsed server response\n * @protected\n */\nLocusZoom.Data.Source.prototype.normalizeResponse = function (data) {\n    if (Array.isArray(data)) {\n        // Already in the desired form\n        return data;\n    }\n\n    // Otherwise, assume the server response is an object representing columns of data.\n    // Each array should have the same length (verify), and a given array index corresponds to a single row.\n    var keys = Object.keys(data);\n    var N = data[keys[0]].length;\n    var sameLength = keys.every(function(key) {\n        var item = data[key];\n        return item.length === N;\n    });\n    if (!sameLength) {\n        throw new Error(this.constructor.SOURCE_NAME + ' expects a response in which all arrays of data are the same length');\n    }\n\n    // Go down the rows, and create an object for each record\n    var records = [];\n    var fields = Object.keys(data);\n    for(var i = 0; i < N; i++) {\n        var record = {};\n        for(var j = 0; j < fields.length; j++) {\n            record[fields[j]] = data[fields[j]][i];\n        }\n        records.push(record);\n    }\n    return records;\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.prepareData = function (records) {\n    console.warn('Warning: .prepareData() is deprecated. Use .annotateData() instead');\n    return this.annotateData(records);\n};\n\n/**\n * Hook to post-process the data returned by this source with new, additional behavior.\n *   (eg cleaning up API values or performing complex calculations on the returned data)\n *\n * @param {Object[]} records The parsed data from the source (eg standardized api response)\n * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n * @returns {Object[]|Promise} The modified set of records\n */\nLocusZoom.Data.Source.prototype.annotateData = function(records, chain) {\n    // Default behavior: no transformations\n    return records;\n};\n\n/**\n * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n *   Apply per-field transformations as appropriate.\n *\n * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n *\n * @param {Object[]} data One record object per element\n * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n * @protected\n */\nLocusZoom.Data.Source.prototype.extractFields = function (data, fields, outnames, trans) {\n    //intended for an array of objects\n    //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n    // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n    if (!Array.isArray(data)) {\n        return data;\n    }\n\n    if (!data.length) {\n        // Sometimes there are regions that just don't have data- this should not trigger a missing field error message!\n        return data;\n    }\n\n    var fieldFound = [];\n    for (var k = 0; k < fields.length; k++) {\n        fieldFound[k] = 0;\n    }\n\n    var records = data.map(function (item) {\n        var output_record = {};\n        for (var j = 0; j < fields.length; j++) {\n            var val = item[fields[j]];\n            if (typeof val != 'undefined') {\n                fieldFound[j] = 1;\n            }\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            output_record[outnames[j]] = val;\n        }\n        return output_record;\n    });\n    fieldFound.forEach(function(v, i) {\n        if (!v) {throw new Error('field ' + fields[i] + ' not found in response for ' + outnames[i]);}\n    });\n    return records;\n};\n\n/**\n * Combine records from this source with others in the chain to yield final chain body.\n *   Handles merging this data with other sources (if applicable).\n *\n * @param {Object[]} data The data That would be returned from this source alone\n * @param {Object} chain The data chain built up during previous requests\n * @param {String[]} fields\n * @param {String[]} outnames\n * @return {Promise|Object[]} The new chain body\n * @protected\n */\nLocusZoom.Data.Source.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    return data;\n};\n\n/**\n * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n *\n * @public\n * @param {String|Object} resp The raw data associated with the response\n * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n *  including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {Promise|{header: ({}|*), discrete: {}, body: []}} A promise that resolves to an object containing\n *   request metadata (headers), the consolidated data for plotting (body), and the individual responses that would be\n *   returned by each source in the chain in isolation (discrete)\n */\nLocusZoom.Data.Source.prototype.parseResponse = function(resp, chain, fields, outnames, trans) {\n    var source_id = this.source_id || this.constructor.SOURCE_NAME;\n    if (!chain.discrete) {\n        chain.discrete = {};\n    }\n\n    if (!resp) {\n        // FIXME: Hack. Certain browser issues (such as mixed content warnings) are reported as a successful promise\n        //  resolution, even though the request was aborted. This is difficult to reliably detect, and is most likely\n        // to occur for annotation sources (such as from ExAC). If empty response is received, skip parsing and log.\n        // FIXME: Throw an error after pending, eg https://github.com/konradjk/exac_browser/issues/345\n        console.error(\"No usable response was returned for source: '\" + source_id + \"'. Parsing will be skipped.\");\n        return Promise.resolve(chain);\n    }\n\n    var json = typeof resp == 'string' ? JSON.parse(resp) : resp;\n\n    var self = this;\n    // Perform the 4 steps of parsing the payload and return a combined chain object\n    return Promise.resolve(self.normalizeResponse(json.data || json))\n        .then(function(standardized) {\n            // Perform calculations on the data from just this source\n            return Promise.resolve(self.annotateData(standardized, chain));\n        }).then(function (data) {\n            return Promise.resolve(self.extractFields(data, fields, outnames, trans));\n        }).then(function (one_source_body) {\n            // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n            //   fields array into account). This is useful when we want to re-use the source output in many ways.\n            chain.discrete[source_id] = one_source_body;\n            return Promise.resolve(self.combineChainBody(one_source_body, chain, fields, outnames, trans));\n        }).then(function (new_body) {\n            return { header: chain.header || {}, discrete: chain.discrete, body: new_body };\n        });\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseArraysToObjects = function(data, fields, outnames, trans) {\n    console.warn('Warning: .parseArraysToObjects() is no longer used. A stub is provided for legacy use');\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseObjectsToObjects = function(data, fields, outnames, trans) {\n    console.warn('Warning: .parseObjectsToObjects() is deprecated. Use .extractFields() instead');\n    return this.extractFields(data, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseData = function(data, fields, outnames, trans) {\n    console.warn('Warning: .parseData() is no longer used. A stub is provided for legacy use');\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/**\n * Method to define new custom datasources based on a provided constructor. (does not allow registering any additional methods)\n * @public\n * @param {Function} constructorFun Constructor function that is used to create the specified class\n * @param {String} [uniqueName] The name by which the class should be listed in `KnownDataSources`\n * @param {String|Function} [base=LocusZoomData.Source] The name or constructor of a base class to use\n * @returns {*|Function}\n */\nLocusZoom.Data.Source.extend = function(constructorFun, uniqueName, base) {\n    if (base) {\n        if (Array.isArray(base)) {\n            base = LocusZoom.KnownDataSources.create.apply(null, base);\n        } else if (typeof base === 'string') {\n            base = LocusZoom.KnownDataSources.get(base).prototype;\n        } else if (typeof base === 'function') {\n            base = base.prototype;\n        }\n    } else {\n        base =  new LocusZoom.Data.Source();\n    }\n    constructorFun = constructorFun || function() {};\n    constructorFun.prototype = base;\n    constructorFun.prototype.constructor = constructorFun;\n    if (uniqueName) {\n        /** @member {String} LocusZoom.Data.Source.SOURCENAME */\n        constructorFun.SOURCE_NAME = uniqueName;\n        LocusZoom.KnownDataSources.add(constructorFun);\n    }\n    return constructorFun;\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents an existing source in that data format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n *\n * Custom sources with their own parameters may need to re-implement this method\n *\n * @public\n * @returns {Object}\n */\nLocusZoom.Data.Source.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME,\n        {url:this.url, params:this.params}];\n};\n\n/**\n * Data Source for Association Data, as fetched from the LocusZoom API server (or compatible)\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.AssociationSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'AssociationLZ');\n\nLocusZoom.Data.AssociationSource.prototype.preGetData = function(state, fields, outnames, trans) {\n    var id_field = this.params.id_field || 'id';\n    [id_field, 'position'].forEach(function(x) {\n        if (fields.indexOf(x) === -1) {\n            fields.unshift(x);\n            outnames.unshift(x);\n            trans.unshift(null);\n        }\n    });\n    return {fields: fields, outnames:outnames, trans:trans};\n};\n\nLocusZoom.Data.AssociationSource.prototype.getURL = function(state, chain, fields) {\n    var analysis = chain.header.analysis || this.params.source || this.params.analysis;  // Old usages called this param \"analysis\"\n    if (typeof analysis == 'undefined') {\n        throw new Error('Association source must specify an analysis ID to plot');\n    }\n    return this.url + 'results/?filter=analysis in ' + analysis  +\n        \" and chromosome in  '\" + state.chr + \"'\" +\n        ' and position ge ' + state.start +\n        ' and position le ' + state.end;\n};\n\nLocusZoom.Data.AssociationSource.prototype.normalizeResponse = function (data) {\n    // Some association sources do not sort their data in a predictable order, which makes it hard to reliably\n    //  align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.\n    // TODO: Consider more fine grained sorting control in the future\n    data = LocusZoom.Data.Source.prototype.normalizeResponse.call(this, data);\n    if (this.params && this.params.sort && data.length && data[0]['position']) {\n        data.sort(function (a, b) { return a['position'] - b['position']; });\n    }\n    return data;\n};\n\n/**\n * Data Source for LD Data, as fetched from the LocusZoom API server (or compatible)\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n *\n *  This source is deprecated in favor of a new, standalone LD server. For new usages, see LDLZ2.\n *\n * @class\n * @deprecated\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.LDSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, 'LDLZ');\n\nLocusZoom.Data.LDSource.prototype.preGetData = function(state, fields) {\n    if (fields.length > 1) {\n        if (fields.length !== 2 || fields.indexOf('isrefvar') === -1) {\n            throw new Error('LD does not know how to get all fields: ' + fields.join(', '));\n        }\n    }\n};\n\nLocusZoom.Data.LDSource.prototype.findMergeFields = function(chain) {\n    // Find the fields (as provided by a previous step in the chain, like an association source) that will be needed to\n    //  combine LD data with existing information\n\n    // Since LD information may be shared across multiple assoc sources with different namespaces,\n    //   we use regex to find columns to join on, rather than requiring exact matches\n    var exactMatch = function(arr) {return function() {\n        var regexes = arguments;\n        for(var i = 0; i < regexes.length; i++) {\n            var regex = regexes[i];\n            var m = arr.filter(function(x) {return x.match(regex);});\n            if (m.length) {\n                return m[0];\n            }\n        }\n        return null;\n    };};\n    var dataFields = {\n        id: this.params.id_field,\n        position: this.params.position_field,\n        pvalue: this.params.pvalue_field,\n        _names_:null\n    };\n    if (chain && chain.body && chain.body.length > 0) {\n        var names = Object.keys(chain.body[0]);\n        var nameMatch = exactMatch(names);\n        // Internally, fields are generally prefixed with the name of the source they come from.\n        // If the user provides an id_field (like `variant`), it should work across data sources( `assoc1:variant`,\n        //  assoc2:variant), but not match fragments of other field names (assoc1:variant_thing)\n        // Note: these lookups hard-code a couple of common fields that will work based on known APIs in the wild\n        var id_match = dataFields.id && nameMatch(new RegExp(dataFields.id + '\\\\b'));\n        dataFields.id = id_match || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n        dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n        dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n        dataFields._names_ = names;\n    }\n    return dataFields;\n};\n\nLocusZoom.Data.LDSource.prototype.findRequestedFields = function(fields, outnames) {\n    // Assumption: all usages of this source will only ever ask for \"isrefvar\" or \"state\". This maps to output names.\n    var obj = {};\n    for(var i = 0; i < fields.length; i++) {\n        if(fields[i] === 'isrefvar') {\n            obj.isrefvarin = fields[i];\n            obj.isrefvarout = outnames && outnames[i];\n        } else {\n            obj.ldin = fields[i];\n            obj.ldout = outnames && outnames[i];\n        }\n    }\n    return obj;\n};\n\nLocusZoom.Data.LDSource.prototype.normalizeResponse = function (data) { return data; };\n\n\n/**\n * Get the LD reference variant, which by default will be the most significant hit in the assoc results\n *   This will be used in making the original query to the LD server for pairwise LD information\n * @returns {*|string} The marker id (expected to be in `chr:pos_ref/alt` format) of the reference variant\n */\nLocusZoom.Data.LDSource.prototype.getRefvar = function (state, chain, fields) {\n    var findExtremeValue = function(records, pval_field) {\n        // Finds the most significant hit (smallest pvalue, or largest -log10p). Will try to auto-detect the appropriate comparison.\n        pval_field = pval_field || 'log_pvalue';  // The official LZ API returns log_pvalue\n        var is_log = /log/.test(pval_field);\n        var cmp;\n        if (is_log) {\n            cmp = function(a, b) { return a > b; };\n        } else {\n            cmp = function(a, b) { return a < b; };\n        }\n        var extremeVal = records[0][pval_field], extremeIdx = 0;\n        for(var i = 1; i < records.length; i++) {\n            if (cmp(records[i][pval_field], extremeVal)) {\n                extremeVal = records[i][pval_field];\n                extremeIdx = i;\n            }\n        }\n        return extremeIdx;\n    };\n\n    var reqFields = this.findRequestedFields(fields);\n    var refVar = reqFields.ldin;\n    if (refVar === 'state') {\n        refVar = state.ldrefvar || chain.header.ldrefvar || 'best';\n    }\n    if (refVar === 'best') {\n        if (!chain.body) {\n            throw new Error('No association data found to find best pvalue');\n        }\n        var keys = this.findMergeFields(chain);\n        if (!keys.pvalue || !keys.id) {\n            var columns = '';\n            if (!keys.id) { columns += (columns.length ? ', ' : '') + 'id'; }\n            if (!keys.pvalue) { columns += (columns.length ? ', ' : '') + 'pvalue'; }\n            throw new Error('Unable to find necessary column(s) for merge: ' + columns + ' (available: ' + keys._names_ + ')');\n        }\n        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n    }\n    return refVar;\n};\n\nLocusZoom.Data.LDSource.prototype.getURL = function(state, chain, fields) {\n    var refSource = state.ldrefsource || chain.header.ldrefsource || 1;\n    var refVar = this.getRefvar(state, chain, fields);\n    chain.header.ldrefvar = refVar;\n    return this.url + 'results/?filter=reference eq ' + refSource +\n        \" and chromosome2 eq '\" + state.chr + \"'\" +\n        ' and position2 ge ' + state.start +\n        ' and position2 le ' + state.end +\n        \" and variant1 eq '\" + refVar + \"'\" +\n        '&fields=chr,pos,rsquare';\n};\n\nLocusZoom.Data.LDSource.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    var keys = this.findMergeFields(chain);\n    var reqFields = this.findRequestedFields(fields, outnames);\n    if (!keys.position) {\n        throw new Error('Unable to find position field for merge: ' + keys._names_);\n    }\n    var leftJoin = function(left, right, lfield, rfield) {\n        var i = 0, j = 0;\n        while (i < left.length && j < right.position2.length) {\n            if (left[i][keys.position] === right.position2[j]) {\n                left[i][lfield] = right[rfield][j];\n                i++;\n                j++;\n            } else if (left[i][keys.position] < right.position2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    };\n    var tagRefVariant = function(data, refvar, idfield, outrefname, outldname) {\n        for(var i = 0; i < data.length; i++) {\n            if (data[i][idfield] && data[i][idfield] === refvar) {\n                data[i][outrefname] = 1;\n                data[i][outldname] = 1; // For label/filter purposes, implicitly mark the ref var as LD=1 to itself\n            } else {\n                data[i][outrefname] = 0;\n            }\n        }\n    };\n\n    // LD servers vary slightly. Some report corr as \"rsquare\", others as \"correlation\"\n    var corrField = data.rsquare ? 'rsquare' : 'correlation';\n    leftJoin(chain.body, data, reqFields.ldout, corrField);\n    if(reqFields.isrefvarin && chain.header.ldrefvar) {\n        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout, reqFields.ldout);\n    }\n    return chain.body;\n};\n\n/**\n * Fetch LD directly from the standalone Portal LD server\n *\n * @class\n * @public\n * @augments LocusZoom.Data.LDSource\n */\nLocusZoom.Data.LDSource2 = LocusZoom.KnownDataSources.extend('LDLZ', 'LDLZ2', {\n    getURL: function(state, chain, fields) {\n        // Accept the following params in this.params:\n        // - method (r, rsquare, cov)\n        // - source (aka panel)\n        // - population (ALL, AFR, EUR, etc)\n        // - build\n        // The LD source/pop can be overridden from plot.state for dynamic layouts\n        var build = state.genome_build || this.params.build || 'GRCh37';\n        var source = state.ld_source || this.params.source || '1000G';\n        var population = state.ld_pop || this.params.population || 'ALL';  // LDServer panels will always have an ALL\n        var method = this.params.method || 'rsquare';\n\n        validateBuildSource(this.constructor.SOURCE_NAME, build, null);  // LD doesn't need to validate `source` option\n\n        var refVar = this.getRefvar(state, chain, fields);\n        chain.header.ldrefvar = refVar;\n\n        return  [\n            this.url, 'genome_builds/', build, '/references/', source, '/populations/', population, '/variants',\n            '?correlation=', method,\n            '&variant=', encodeURIComponent(refVar),\n            '&chrom=', encodeURIComponent(state.chr),\n            '&start=', encodeURIComponent(state.start),\n            '&stop=', encodeURIComponent(state.end)\n        ].join('');\n    },\n    fetchRequest: function(state, chain, fields) {\n        // The API is paginated, but we need all of the data to render a plot. Depaginate and combine where appropriate.\n        var url = this.getURL(state, chain, fields);\n        var combined = { data: {} };\n        var chainRequests = function (url) {\n            return LocusZoom.createCORSPromise('GET', url)\n                .then(function(payload) {\n                    payload = JSON.parse(payload);\n                    Object.keys(payload.data).forEach(function (key) {\n                        combined.data[key] = (combined.data[key] || []).concat(payload.data[key]);\n                    });\n                    if (payload.next) {\n                        return chainRequests(payload.next);\n                    }\n                    return combined;\n                });\n        };\n\n        return chainRequests(url);\n    }\n});\n\n/**\n * Data source for GWAS catalogs of known variants\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object|String} init Configuration (URL or object)\n * @param {Object} [init.params] Optional configuration parameters\n * @param {Number} [init.params.source=2] The ID of the chosen catalog. Defaults to EBI GWAS catalog, GRCh37\n * @param {('strict'|'loose')} [init.params.match_type='strict'] Whether to match on exact variant, or just position.\n */\nLocusZoom.Data.GwasCatalog = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, 'GwasCatalogLZ');\n\nLocusZoom.Data.GwasCatalog.prototype.getURL = function(state, chain, fields) {\n    // This is intended to be aligned with another source- we will assume they are always ordered by position, asc\n    //  (regardless of the actual match field)\n    var build_option = state.genome_build || this.params.build;\n    validateBuildSource(this.constructor.SOURCE_NAME, build_option, null); // Source can override build- not mutually exclusive\n\n    // Most of our annotations will respect genome build before any other option.\n    //   But there can be more than one GWAS catalog for the same build, so an explicit config option will always take\n    //   precedence.\n    var default_source = (build_option === 'GRCh38') ? 1 : 2;  // EBI GWAS catalog\n    var source = this.params.source || default_source;\n    return this.url + '?format=objects&sort=pos&filter=id eq ' + source +\n        \" and chrom eq '\" + state.chr + \"'\" +\n        ' and pos ge ' + state.start +\n        ' and pos le ' + state.end;\n};\n\nLocusZoom.Data.GwasCatalog.prototype.findMergeFields = function (records) {\n    // Data from previous sources is already namespaced. Find the alignment field by matching.\n    var knownFields = Object.keys(records);\n    // Note: All API endoints involved only give results for 1 chromosome at a time; match is implied\n    var posMatch = knownFields.find(function (item) { return item.match(/\\b(position|pos)\\b/i); });\n\n    if (!posMatch) {\n        throw new Error('Could not find data to align with GWAS catalog results');\n    }\n    return { 'pos': posMatch };\n};\n\n// Skip the \"individual field extraction\" step; extraction will be handled when building chain body instead\nLocusZoom.Data.GwasCatalog.prototype.extractFields = function (data, fields, outnames, trans) { return data; };\n\nLocusZoom.Data.GwasCatalog.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    if (!data.length) {\n        return chain.body;\n    }\n\n    var decider = 'log_pvalue'; //  TODO: Better reuse options in the future\n    var decider_out = outnames[fields.indexOf(decider)];\n\n    function leftJoin(left, right, fields, outnames, trans) { // Add `fields` from `right` to `left`\n        // Add a synthetic, un-namespaced field to all matching records\n        var n_matches = left['n_catalog_matches'] || 0;\n        left['n_catalog_matches'] = n_matches + 1;\n        if (decider && left[decider_out] && left[decider_out] > right[decider]) {\n            // There may be more than one GWAS catalog entry for the same SNP. This source is intended for a 1:1\n            //  annotation scenario, so for now it only joins the catalog entry that has the best -log10 pvalue\n            return;\n        }\n\n        for (var j = 0; j < fields.length; j++) {\n            var fn = fields[j];\n            var outn = outnames[j];\n\n            var val = right[fn];\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            left[outn] = val;\n        }\n    }\n\n    var chainNames = this.findMergeFields(chain.body[0]);\n    var catNames = this.findMergeFields(data[0]);\n\n    var i = 0, j = 0;\n    while (i < chain.body.length && j < data.length) {\n        var left = chain.body[i];\n        var right = data[j];\n\n        if (left[chainNames.pos] === right[catNames.pos]) {\n            // There may be multiple catalog entries for each matching SNP; evaluate match one at a time\n            leftJoin(left, right, fields, outnames, trans);\n            j += 1;\n        } else if (left[chainNames.pos] < right[catNames.pos]) {\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    return chain.body;\n};\n\n\n/**\n * Data Source for Gene Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.GeneSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'GeneLZ');\n\nLocusZoom.Data.GeneSource.prototype.getURL = function(state, chain, fields) {\n    var build = state.genome_build || this.params.build;\n    var source = this.params.source;\n    validateBuildSource(this.constructor.SOURCE_NAME, build, source);\n\n    if (build) { // If build specified, choose a known Portal API dataset IDs (build 37/38)\n        source = (build === 'GRCh38') ? 1 : 3;\n    }\n    return this.url + '?filter=source in ' + source +\n        \" and chrom eq '\" + state.chr + \"'\" +\n        ' and start le ' + state.end +\n        ' and end ge ' + state.start;\n};\n\n// Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with the\n// exact information returned by the API. (ignoring the fields array in the layout)\nLocusZoom.Data.GeneSource.prototype.normalizeResponse = function (data) { return data; };\nLocusZoom.Data.GeneSource.prototype.extractFields = function (data, fields, outnames, trans) { return data; };\n\n/**\n * Data Source for Gene Constraint Data, as fetched from the gnomAD server (or compatible)\n *\n * In the past, this source used ExAC, which has been completely decommissioned. Since the old source referenced a\n *  server that no longer exists, this was redefined in 0.11.0 in a backwards-incompatible manner.\n *\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n*/\nLocusZoom.Data.GeneConstraintSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'GeneConstraintLZ');\n\nLocusZoom.Data.GeneConstraintSource.prototype.getURL = function() {\n    return this.url;\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.GeneConstraintSource.prototype.getCacheKey = function(state, chain, fields) {\n    return this.url + JSON.stringify(state);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.fetchRequest = function(state, chain, fields) {\n    var build = state.genome_build || this.params.build;\n    if (!build) {\n        throw new Error(['Data source', this.constructor.SOURCE_NAME, 'requires that you specify a genome_build'].join(' '));\n    }\n\n    var unique_gene_names = chain.body.reduce(\n        // In rare cases, the same gene symbol may appear at multiple positions. (issue #179) We de-duplicate the\n        //  gene names to avoid issuing a malformed GraphQL query.\n        function (acc, gene) {\n            acc[gene.gene_name] = null;\n            return acc;\n        },\n        {}\n    );\n    var query = Object.keys(unique_gene_names).map(function (gene_name) {\n        // GraphQL alias names must match a specific set of allowed characters: https://stackoverflow.com/a/45757065/1422268\n        var alias = '_' + gene_name.replace(/[^A-Za-z0-9_]/g, '_');\n        // Each gene symbol is a separate graphQL query, grouped into one request using aliases\n        return alias + ': gene(gene_symbol: \"' + gene_name + '\", reference_genome: ' + build + ') { gnomad_constraint { exp_syn obs_syn syn_z oe_syn oe_syn_lower oe_syn_upper exp_mis obs_mis mis_z oe_mis oe_mis_lower oe_mis_upper exp_lof obs_lof pLI oe_lof oe_lof_lower oe_lof_upper } } ';\n    });\n\n    if (!query.length) {\n        // If there are no genes, skip the network request\n        return Promise.resolve({ data: null });\n    }\n\n    query = '{' + query.join(' ') + ' }'; // GraphQL isn't quite JSON; items are separated by spaces but not commas\n    var url = this.getURL(state, chain, fields);\n    // See: https://graphql.org/learn/serving-over-http/\n    var body = JSON.stringify({ query: query });\n    var headers = { 'Content-Type': 'application/json' };\n    return LocusZoom.createCORSPromise('POST', url, body, headers);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    if (!data) {\n        return chain;\n    }\n\n    chain.body.forEach(function(gene) {\n        // Find payload keys that match gene names in this response\n        var alias = '_' + gene.gene_name.replace(/[^A-Za-z0-9_]/g, '_');  // aliases are modified gene names\n        var constraint = data[alias] && data[alias]['gnomad_constraint']; // gnomad API has two ways of specifying missing data for a requested gene\n        if (constraint) {\n            // Add all fields from constraint data- do not override fields present in the gene source\n            Object.keys(constraint).forEach(function (key) {\n                var val = constraint[key];\n                if (typeof gene[key] === 'undefined') {\n                    if (typeof val == 'number' && val.toString().indexOf('.') !== -1) {\n                        val = parseFloat(val.toFixed(2));\n                    }\n                    gene[key] = val;   // These two sources are both designed to bypass namespacing\n                }\n            });\n        }\n    });\n    return chain.body;\n};\n\n/**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.RecombinationRateSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'RecombLZ');\n\nLocusZoom.Data.RecombinationRateSource.prototype.getURL = function(state, chain, fields) {\n    var build = state.genome_build || this.params.build;\n    var source = this.params.source;\n    validateBuildSource(this.constructor.SOURCE_NAME, build, source);\n\n    if (build) { // If build specified, choose a known Portal API dataset IDs (build 37/38)\n        source = (build === 'GRCh38') ? 16 : 15;\n    }\n    return this.url + '?filter=id in ' + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        ' and position le ' + state.end +\n        ' and position ge ' + state.start;\n};\n\n/**\n * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.IntervalSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'IntervalLZ');\n\nLocusZoom.Data.IntervalSource.prototype.getURL = function(state, chain, fields) {\n    var source = chain.header.bedtracksource || this.params.source;\n    return this.url + '?filter=id in ' + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        ' and start le ' + state.end +\n        ' and end ge ' + state.start;\n};\n\n/**\n * Data Source for static blobs of JSON Data. This does not perform additional parsing, and therefore it is the\n * responsibility of the user to pass information in a format that can be read and understood by the chosen plot.\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.StaticSource = LocusZoom.Data.Source.extend(function(data) {\n    /** @member {Object} */\n    this._data = data;\n},'StaticJSON');\n\nLocusZoom.Data.StaticSource.prototype.getRequest = function(state, chain, fields) {\n    return Promise.resolve(this._data);\n};\n\nLocusZoom.Data.StaticSource.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, this._data];\n};\n\n/**\n * Data source for PheWAS data\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {String[]} init.params.build This datasource expects to be provided the name of the genome build that will\n *   be used to provide pheWAS results for this position. Note positions may not translate between builds.\n */\nLocusZoom.Data.PheWASSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'PheWASLZ');\nLocusZoom.Data.PheWASSource.prototype.getURL = function(state, chain, fields) {\n    var build = (state.genome_build ? [state.genome_build] : null) || this.params.build;\n    if (!build || !Array.isArray(build) || !build.length) {\n        throw new Error(['Data source', this.constructor.SOURCE_NAME, 'requires that you specify array of one or more desired genome build names'].join(' '));\n    }\n    var url = [\n        this.url,\n        \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n        build.map(function(item) {return 'build=' + encodeURIComponent(item);}).join('&')\n    ];\n    return url.join('');\n};\n\n/**\n * Base class for \"connectors\"- this is meant to be subclassed, rather than used directly.\n *\n * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object} init Configuration for this source\n * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n *  assumptions about what namespaces a source is using.\n * @type {*|Function}\n */\nLocusZoom.Data.ConnectorSource = LocusZoom.Data.Source.extend(function(init) {\n    if (!init || !init.sources) {\n        throw new Error('Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs');\n    }\n\n    /**\n     * Tells the connector how to find the data it relies on\n     *\n     * For example, a connector that applies burden test information to the genes layer might specify:\n     *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n     *\n     * @member {Object}\n     */\n    this._source_name_mapping = init.sources;\n\n    // Validate that this source has been told how to find the required information\n    var specified_ids = Object.keys(init.sources);\n    var self = this;\n    this.REQUIRED_SOURCES.forEach(function (k) {\n        if (specified_ids.indexOf(k) === -1) {\n            throw new Error('Configuration for ' + self.constructor.SOURCE_NAME + ' must specify a source ID corresponding to ' + k);\n        }\n    });\n    this.parseInit(init);\n}, 'ConnectorSource');\n\n/** @property {String[]} Specifies the sources that must be provided in the original config object */\nLocusZoom.Data.ConnectorSource.prototype.REQUIRED_SOURCES = [];\n\nLocusZoom.Data.ConnectorSource.prototype.parseInit = function(init) {};  // Stub\n\nLocusZoom.Data.ConnectorSource.prototype.getRequest = function(state, chain, fields) {\n    // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n    //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n    var self = this;\n    Object.keys(this._source_name_mapping).forEach(function(ns) {\n        var chain_source_id = self._source_name_mapping[ns];\n        if (chain.discrete && !chain.discrete[chain_source_id]) {\n            throw new Error(self.constructor.SOURCE_NAME + ' cannot be used before loading required data for: ' + chain_source_id);\n        }\n    });\n    return Promise.resolve(chain.body || []);\n};\n\nLocusZoom.Data.ConnectorSource.prototype.parseResponse = function(data, chain, fields, outnames, trans) {\n    // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n    //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n\n    // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n    // Typically connectors are called with `connector_name:all` in the fields array.\n    return Promise.resolve(this.combineChainBody(data, chain, fields, outnames, trans))\n        .then(function(new_body) {\n            return {header: chain.header || {}, discrete: chain.discrete || {}, body: new_body};\n        });\n};\n\nLocusZoom.Data.ConnectorSource.prototype.combineChainBody = function(records, chain) {\n    // Stub method: specifies how to combine the data\n    throw new Error('This method must be implemented in a subclass');\n};\n","/* global LocusZoom */\n'use strict';\n\n/**\n * An independent LocusZoom object that renders a unique set of data and subpanels.\n * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n *\n * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n * to use the `LocusZoom.populate` helper method.\n *\n * @class\n * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n *   where the plot is rendered..\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n*/\nLocusZoom.Plot = function(id, datasource, layout) {\n    /** @member Boolean} */\n    this.initialized = false;\n    // TODO: This makes sense for all other locuszoom elements to have; determine whether this is interface boilerplate or something that can be removed\n    this.parent_plot = this;\n\n    /** @member {String} */\n    this.id = id;\n\n    /** @member {Element} */\n    this.container = null;\n    /**\n     * Selector for a node that will contain the plot. (set externally by populate methods)\n     * @member {d3.selection}\n     */\n    this.svg = null;\n\n    /** @member {Object.<String, Number>} */\n    this.panels = {};\n    /**\n     * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n     * @protected\n     * @member {String[]}\n     */\n    this.panel_ids_by_y_index = [];\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     */\n    this.applyPanelYIndexesToPanelLayouts = function() {\n        this.panel_ids_by_y_index.forEach(function(pid, idx) {\n            this.panels[pid].layout.y_index = idx;\n        }.bind(this));\n    };\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @returns {String}\n     */\n    this.getBaseId = function() {\n        return this.id;\n    };\n\n    /**\n     * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n     * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n     * @protected\n     * @member {Promise[]}\n     */\n    this.remap_promises = [];\n\n    if (typeof layout == 'undefined') {\n        /**\n         * The layout is a serializable object used to describe the composition of the Plot\n         *   If no layout was passed, use the Standard Association Layout\n         *   Otherwise merge whatever was passed with the Default Layout\n         *   TODO: Review description; we *always* merge with default layout?\n         * @member {Object}\n         */\n        this.layout = LocusZoom.Layouts.merge({}, LocusZoom.Layouts.get('plot', 'standard_association'));\n    } else {\n        this.layout = layout;\n    }\n    LocusZoom.Layouts.merge(this.layout, LocusZoom.Plot.DefaultLayout);\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original plot state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n\n    /**\n     * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n     *   with initial state/setup.\n     *\n     * Tracks state of the plot, eg start and end position\n     * @member {Object}\n     */\n    this.state = this.layout.state;\n\n    /** @member {LocusZoom.Data.Requester} */\n    this.lzd = new LocusZoom.Data.Requester(datasource);\n\n    /**\n     * Window.onresize listener (responsive layouts only)\n     * TODO: .on appears to return a selection, not a listener? Check logic here\n     * https://github.com/d3/d3-selection/blob/00b904b9bcec4dfaf154ae0bbc777b1fc1d7bc08/test/selection/on-test.js#L11\n     * @deprecated\n     * @member {d3.selection}\n     */\n    this.window_onresize = null;\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        'layout_changed': [],\n        'data_requested': [],\n        'data_rendered': [],\n        'element_clicked': [], // Select or unselect\n        'element_selection': [], // Element becomes active (only)\n        'match_requested': [], // A data layer is attempting to highlight matching points (internal use only)\n        'panel_removed': [],\n        'state_changed': []  // Only triggered when a state change causes rerender\n    };\n\n    /**\n     * @callback eventCallback\n     * @param {object} eventData A description of the event\n     * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n     *  triggered the event. Will be automatically filled in if not explicitly provided.\n     * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n     *   associated with a clicked plot element\n     */\n\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: plot - A data element in any of the plot's data layers has been clicked.\n     *   - `element_selection` - context: plot - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook) {\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('Unable to register event hook, invalid event: ' + event.toString());\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Plot}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error('Unable to remove event hook, invalid event: ' + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {LocusZoom.Plot}\n     */\n    this.emit = function(event, eventData) {\n        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('LocusZoom attempted to throw an invalid event: ' + event.toString());\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        this.event_hooks[event].forEach(function(hookToRun) {\n            var eventContext;\n            if (eventData && eventData.sourceID) {\n                // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n                //  when re-emitting the event to plot-level listeners\n                eventContext = eventData;\n            } else {\n                eventContext = {sourceID: sourceID, data: eventData || null};\n            }\n            // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n            //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n            //  override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the plot\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    this.getPageOrigin = function() {\n        var bounding_client_rect = this.svg.node().getBoundingClientRect();\n        var x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        var y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        var container = this.svg.node();\n        while (container.parentNode !== null) {\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style('position') !== 'static') {\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height\n        };\n    };\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @returns {{top: number, left: number}}\n     */\n    this.getContainerOffset = function() {\n        var offset = { top: 0, left: 0 };\n        var container = this.container.offsetParent || null;\n        while (container !== null) {\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    };\n\n    //\n    /**\n     * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n     * TODO: Add/ document details of interaction structure as we expand\n     * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n     * @returns {LocusZoom.Plot}\n     */\n    this.interaction = {};\n\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    this.canInteract = function(panel_id) {\n        panel_id = panel_id || null;\n        if (panel_id) {\n            return ((typeof this.interaction.panel_id == 'undefined' || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n    return this;\n};\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\nLocusZoom.Plot.DefaultLayout = {\n    state: {},\n    width: 1,\n    height: 1,\n    min_width: 1,\n    min_height: 1,\n    responsive_resize: false, // Allowed values: false, \"width_only\", \"both\" (synonym for true)\n    aspect_ratio: 1,\n    panels: [],\n    dashboard: {\n        components: []\n    },\n    panel_boundaries: true,\n    mouse_guide: true\n};\n\n/**\n * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n * @param {('Height'|'Width')} dimension\n * @returns {number}\n */\nLocusZoom.Plot.prototype.sumProportional = function(dimension) {\n    if (dimension !== 'height' && dimension !== 'width') {\n        throw new Error('Bad dimension value passed to LocusZoom.Plot.prototype.sumProportional');\n    }\n    var total = 0;\n    for (var id in this.panels) {\n        // Ensure every panel contributing to the sum has a non-zero proportional dimension\n        if (!this.panels[id].layout['proportional_' + dimension]) {\n            this.panels[id].layout['proportional_' + dimension] = 1 / Object.keys(this.panels).length;\n        }\n        total += this.panels[id].layout['proportional_' + dimension];\n    }\n    return total;\n};\n\n/**\n * Resize the plot to fit the bounding container\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.rescaleSVG = function() {\n    var clientRect = this.svg.node().getBoundingClientRect();\n    this.setDimensions(clientRect.width, clientRect.height);\n    return this;\n};\n\n/**\n * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initializeLayout = function() {\n\n    // Sanity check layout values\n    if (isNaN(this.layout.width) || this.layout.width <= 0) {\n        throw new Error('Plot layout parameter `width` must be a positive number');\n    }\n    if (isNaN(this.layout.height) || this.layout.height <= 0) {\n        throw new Error('Plot layout parameter `width` must be a positive number');\n    }\n    if (isNaN(this.layout.aspect_ratio) || this.layout.aspect_ratio <= 0) {\n        throw new Error('Plot layout parameter `aspect_ratio` must be a positive number');\n    }\n    if (this.layout.responsive_resize === true) {\n        // Backwards compatible support\n        console.warn('LocusZoom \"responsive_resize\" specifies a deprecated value. The new value should be \"both\". Please update your layout.');\n        this.layout.responsive_resize = 'both';\n    }\n    var RESIZE_MODES = [false, 'both', 'width_only'];\n    if (RESIZE_MODES.indexOf(this.layout.responsive_resize) === -1) {\n        throw new Error('LocusZoom option \"responsive_resize\" should specify one of the following modes: ' + RESIZE_MODES.join(', '));\n    }\n\n    // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n    if (this.layout.responsive_resize) {\n        this.window_onresize = d3.select(window).on('resize.lz-' + this.id, function() {\n            this.rescaleSVG();\n        }.bind(this));\n        // Forcing one additional setDimensions() call after the page is loaded clears up\n        // any disagreements between the initial layout and the loaded responsive container's size\n        d3.select(window).on('load.lz-' + this.id, function() {\n            this.setDimensions();\n        }.bind(this));\n    }\n\n    // Add panels\n    this.layout.panels.forEach(function(panel_layout) {\n        this.addPanel(panel_layout);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n *\n * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n *   calculates the appropriate plot dimensions based on all panels.\n * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.setDimensions = function(width, height) {\n\n    var id;\n\n    // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n    var min_width = parseFloat(this.layout.min_width) || 0;\n    var min_height = parseFloat(this.layout.min_height) || 0;\n    for (id in this.panels) {\n        min_width = Math.max(min_width, this.panels[id].layout.min_width);\n        if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0) {\n            min_height = Math.max(min_height, (this.panels[id].layout.min_height / this.panels[id].layout.proportional_height));\n        }\n    }\n    this.layout.min_width = Math.max(min_width, 1);\n    this.layout.min_height = Math.max(min_height, 1);\n    d3.select(this.svg.node().parentNode).style({\n        'min-width': this.layout.min_width + 'px',\n        'min-height': this.layout.min_height + 'px'\n    });\n\n    // If width and height arguments were passed then adjust them against plot minimums if necessary.\n    // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n    if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n        this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n        this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        this.layout.aspect_ratio = this.layout.width / this.layout.height;\n        // Override discrete values if resizing responsively\n        if (this.layout.responsive_resize) {\n            // All resize modes will affect width\n            if (this.svg) {\n                this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n            }\n\n            if (this.layout.responsive_resize === 'both') { // Then also change the height\n                this.layout.height = this.layout.width / this.layout.aspect_ratio;\n                if (this.layout.height < this.layout.min_height) {\n                    this.layout.height = this.layout.min_height;\n                    this.layout.width  = this.layout.height * this.layout.aspect_ratio;\n                }\n            }\n        }\n        // Resize/reposition panels to fit, update proportional origins if necessary\n        var y_offset = 0;\n        this.panel_ids_by_y_index.forEach(function(panel_id) {\n            var panel_width = this.layout.width;\n            var panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n            this.panels[panel_id].setDimensions(panel_width, panel_height);\n            this.panels[panel_id].setOrigin(0, y_offset);\n            this.panels[panel_id].layout.proportional_origin.x = 0;\n            this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n            y_offset += panel_height;\n            this.panels[panel_id].dashboard.update();\n        }.bind(this));\n    }\n\n    // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n    // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n    else if (Object.keys(this.panels).length) {\n        this.layout.width = 0;\n        this.layout.height = 0;\n        for (id in this.panels) {\n            this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n            this.layout.height += this.panels[id].layout.height;\n        }\n        this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n        this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n    }\n\n    // Keep aspect ratio in agreement with dimensions\n    this.layout.aspect_ratio = this.layout.width / this.layout.height;\n\n    // Apply layout width and height as discrete values or viewbox values\n    if (this.svg !== null) {\n        if (this.layout.responsive_resize === 'both') {\n            this.svg\n                .attr('viewBox', '0 0 ' + this.layout.width + ' ' + this.layout.height)\n                .attr('preserveAspectRatio', 'xMinYMin meet');\n        } else {\n            this.svg.attr('width', this.layout.width).attr('height', this.layout.height);\n        }\n    }\n\n    // If the plot has been initialized then trigger some necessary render functions\n    if (this.initialized) {\n        this.panel_boundaries.position();\n        this.dashboard.update();\n        this.curtain.update();\n        this.loader.update();\n    }\n\n    return this.emit('layout_changed');\n};\n\n/**\n * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n * @param {Object} layout\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Plot.prototype.addPanel = function(layout) {\n\n    // Sanity checks\n    if (typeof layout !== 'object') {\n        throw new Error('Invalid panel layout passed to LocusZoom.Plot.prototype.addPanel()');\n    }\n\n    // Create the Panel and set its parent\n    var panel = new LocusZoom.Panel(layout, this);\n\n    // Store the Panel on the Plot\n    this.panels[panel.id] = panel;\n\n    // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n    if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n        && this.panel_ids_by_y_index.length > 0) {\n        // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (panel.layout.y_index < 0) {\n            panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n        }\n        this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n        this.applyPanelYIndexesToPanelLayouts();\n    } else {\n        var length = this.panel_ids_by_y_index.push(panel.id);\n        this.panels[panel.id].layout.y_index = length - 1;\n    }\n\n    // Determine if this panel was already in the layout.panels array.\n    // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n    var layout_idx = null;\n    this.layout.panels.forEach(function(panel_layout, idx) {\n        if (panel_layout.id === panel.id) { layout_idx = idx; }\n    });\n    if (layout_idx === null) {\n        layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n    }\n    this.panels[panel.id].layout_idx = layout_idx;\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized) {\n        this.positionPanels();\n        // Initialize and load data into the new panel\n        this.panels[panel.id].initialize();\n        this.panels[panel.id].reMap();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this.panels[panel.id];\n};\n\n\n/**\n * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n *\n * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.clearPanelData = function(panelId, mode) {\n    mode = mode || 'wipe';\n\n    // TODO: Add unit tests for this method\n    var panelsList;\n    if (panelId) {\n        panelsList = [panelId];\n    } else {\n        panelsList = Object.keys(this.panels);\n    }\n    var self = this;\n    panelsList.forEach(function(pid) {\n        self.panels[pid].data_layer_ids_by_z_index.forEach(function(dlid) {\n            var layer = self.panels[pid].data_layers[dlid];\n            layer.destroyAllTooltips();\n\n            delete layer.layer_state;\n            delete self.layout.state[layer.state_id];\n            if(mode === 'reset') {\n                layer._setDefaultState();\n            }\n        });\n    });\n    return this;\n};\n\n/**\n * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n * @param {String} id\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.removePanel = function(id) {\n    if (!this.panels[id]) {\n        throw new Error('Unable to remove panel, ID not found: ' + id);\n    }\n\n    // Hide all panel boundaries\n    this.panel_boundaries.hide();\n\n    // Destroy all tooltips and state vars for all data layers on the panel\n    this.clearPanelData(id);\n\n    // Remove all panel-level HTML overlay elements\n    this.panels[id].loader.hide();\n    this.panels[id].dashboard.destroy(true);\n    this.panels[id].curtain.hide();\n\n    // Remove the svg container for the panel if it exists\n    if (this.panels[id].svg.container) {\n        this.panels[id].svg.container.remove();\n    }\n\n    // Delete the panel and its presence in the plot layout and state\n    this.layout.panels.splice(this.panels[id].layout_idx, 1);\n    delete this.panels[id];\n    delete this.layout.state[id];\n\n    // Update layout_idx values for all remaining panels\n    this.layout.panels.forEach(function(panel_layout, idx) {\n        this.panels[panel_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    // Remove the panel id from the y_index array\n    this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n    this.applyPanelYIndexesToPanelLayouts();\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized) {\n        // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n        this.layout.min_height = this._base_layout.min_height;\n        this.layout.min_width = this._base_layout.min_width;\n\n        this.positionPanels();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    this.emit('panel_removed', id);\n\n    return this;\n};\n\n\n/**\n * Automatically position panels based on panel positioning rules and values.\n * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n *\n * TODO: This logic currently only supports dynamic positioning of panels to prevent overlap in a VERTICAL orientation.\n *      Some framework exists for positioning panels in horizontal orientations as well (width, proportional_width, origin.x, etc.)\n *      but the logic for keeping these user-definable values straight approaches the complexity of a 2D box-packing algorithm.\n *      That's complexity we don't need right now, and may not ever need, so it's on hiatus until a use case materializes.\n */\nLocusZoom.Plot.prototype.positionPanels = function() {\n\n    var id;\n\n    // We want to enforce that all x-linked panels have consistent horizontal margins\n    // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n    // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n    var x_linked_margins = { left: 0, right: 0 };\n\n    // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n    // proportional heights for all panels with a null value from discretely set dimensions.\n    // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n    for (id in this.panels) {\n        if (this.panels[id].layout.proportional_height === null) {\n            this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n        }\n        if (this.panels[id].layout.proportional_width === null) {\n            this.panels[id].layout.proportional_width = 1;\n        }\n        if (this.panels[id].layout.interaction.x_linked) {\n            x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n            x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n        }\n    }\n\n    // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n    var total_proportional_height = this.sumProportional('height');\n    if (!total_proportional_height) {\n        return this;\n    }\n    var proportional_adjustment = 1 / total_proportional_height;\n    for (id in this.panels) {\n        this.panels[id].layout.proportional_height *= proportional_adjustment;\n    }\n\n    // Update origins on all panels without changing plot-level dimensions yet\n    // Also apply x-linked margins to x-linked panels, updating widths as needed\n    var y_offset = 0;\n    this.panel_ids_by_y_index.forEach(function(panel_id) {\n        this.panels[panel_id].setOrigin(0, y_offset);\n        this.panels[panel_id].layout.proportional_origin.x = 0;\n        y_offset += this.panels[panel_id].layout.height;\n        if (this.panels[panel_id].layout.interaction.x_linked) {\n            var delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0)\n                      + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n            this.panels[panel_id].layout.width += delta;\n            this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n            this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n            this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n        }\n    }.bind(this));\n    var calculated_plot_height = y_offset;\n    this.panel_ids_by_y_index.forEach(function(panel_id) {\n        this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n    }.bind(this));\n\n    // Update dimensions on the plot to accommodate repositioned panels\n    this.setDimensions();\n\n    // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n    this.panel_ids_by_y_index.forEach(function(panel_id) {\n        this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width,\n                                            this.layout.height * this.panels[panel_id].layout.proportional_height);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n *\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initialize = function() {\n\n    // Ensure proper responsive class is present on the containing node if called for\n    if (this.layout.responsive_resize) {\n        d3.select(this.container).classed('lz-container-responsive', true);\n    }\n\n    // Create an element/layer for containing mouse guides\n    if (this.layout.mouse_guide) {\n        var mouse_guide_svg = this.svg.append('g')\n            .attr('class', 'lz-mouse_guide').attr('id', this.id + '.mouse_guide');\n        var mouse_guide_vertical_svg = mouse_guide_svg.append('rect')\n            .attr('class', 'lz-mouse_guide-vertical').attr('x',-1);\n        var mouse_guide_horizontal_svg = mouse_guide_svg.append('rect')\n            .attr('class', 'lz-mouse_guide-horizontal').attr('y',-1);\n        this.mouse_guide = {\n            svg: mouse_guide_svg,\n            vertical: mouse_guide_vertical_svg,\n            horizontal: mouse_guide_horizontal_svg\n        };\n    }\n\n    // Add curtain and loader prototpyes to the plot\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    // Create the panel_boundaries object with show/position/hide methods\n    this.panel_boundaries = {\n        parent: this,\n        hide_timeout: null,\n        showing: false,\n        dragging: false,\n        selectors: [],\n        corner_selector: null,\n        show: function() {\n            // Generate panel boundaries\n            if (!this.showing && !this.parent.curtain.showing) {\n                this.showing = true;\n                // Loop through all panels to create a horizontal boundary for each\n                this.parent.panel_ids_by_y_index.forEach(function(panel_id, panel_idx) {\n                    var selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip')\n                        .attr('class', 'lz-panel-boundary')\n                        .attr('title', 'Resize panel');\n                    selector.append('span');\n                    var panel_resize_drag = d3.behavior.drag();\n                    panel_resize_drag.on('dragstart', function() { this.dragging = true; }.bind(this));\n                    panel_resize_drag.on('dragend', function() { this.dragging = false; }.bind(this));\n                    panel_resize_drag.on('drag', function() {\n                        // First set the dimensions on the panel we're resizing\n                        var this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                        var original_panel_height = this_panel.layout.height;\n                        this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                        var panel_height_change = this_panel.layout.height - original_panel_height;\n                        var new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                        // Next loop through all panels.\n                        // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                        // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                        this.parent.panel_ids_by_y_index.forEach(function(loop_panel_id, loop_panel_idx) {\n                            var loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                            loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                            if (loop_panel_idx > panel_idx) {\n                                loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                loop_panel.dashboard.position();\n                            }\n                        }.bind(this));\n                        // Reset dimensions on the entire plot and reposition panel boundaries\n                        this.parent.positionPanels();\n                        this.position();\n                    }.bind(this));\n                    selector.call(panel_resize_drag);\n                    this.parent.panel_boundaries.selectors.push(selector);\n                }.bind(this));\n                // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                var corner_selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip')\n                    .attr('class', 'lz-panel-corner-boundary')\n                    .attr('title', 'Resize plot');\n                corner_selector.append('span').attr('class', 'lz-panel-corner-boundary-outer');\n                corner_selector.append('span').attr('class', 'lz-panel-corner-boundary-inner');\n                var corner_drag = d3.behavior.drag();\n                corner_drag.on('dragstart', function() { this.dragging = true; }.bind(this));\n                corner_drag.on('dragend', function() { this.dragging = false; }.bind(this));\n                corner_drag.on('drag', function() {\n                    this.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                }.bind(this.parent));\n                corner_selector.call(corner_drag);\n                this.parent.panel_boundaries.corner_selector = corner_selector;\n            }\n            return this.position();\n        },\n        position: function() {\n            if (!this.showing) { return this; }\n            // Position panel boundaries\n            var plot_page_origin = this.parent.getPageOrigin();\n            this.selectors.forEach(function(selector, panel_idx) {\n                var panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].getPageOrigin();\n                var left = plot_page_origin.x;\n                var top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                var width = this.parent.layout.width - 1;\n                selector.style({\n                    top: top + 'px',\n                    left: left + 'px',\n                    width: width + 'px'\n                });\n                selector.select('span').style({\n                    width: width + 'px'\n                });\n            }.bind(this));\n            // Position corner selector\n            var corner_padding = 10;\n            var corner_size = 16;\n            this.corner_selector.style({\n                top: (plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size) + 'px',\n                left: (plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size) + 'px'\n            });\n            return this;\n        },\n        hide: function() {\n            if (!this.showing) { return this; }\n            this.showing = false;\n            // Remove panel boundaries\n            this.selectors.forEach(function(selector) { selector.remove(); });\n            this.selectors = [];\n            // Remove corner boundary\n            this.corner_selector.remove();\n            this.corner_selector = null;\n            return this;\n        }\n    };\n\n    // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n    if (this.layout.panel_boundaries) {\n        d3.select(this.svg.node().parentNode).on('mouseover.' + this.id + '.panel_boundaries', function() {\n            clearTimeout(this.panel_boundaries.hide_timeout);\n            this.panel_boundaries.show();\n        }.bind(this));\n        d3.select(this.svg.node().parentNode).on('mouseout.' + this.id + '.panel_boundaries', function() {\n            this.panel_boundaries.hide_timeout = setTimeout(function() {\n                this.panel_boundaries.hide();\n            }.bind(this), 300);\n        }.bind(this));\n    }\n\n    // Create the dashboard object and immediately show it\n    this.dashboard = new LocusZoom.Dashboard(this).show();\n\n    // Initialize all panels\n    for (var id in this.panels) {\n        this.panels[id].initialize();\n    }\n\n    // Define plot-level mouse events\n    var namespace = '.' + this.id;\n    if (this.layout.mouse_guide) {\n        var mouseout_mouse_guide = function() {\n            this.mouse_guide.vertical.attr('x', -1);\n            this.mouse_guide.horizontal.attr('y', -1);\n        }.bind(this);\n        var mousemove_mouse_guide = function() {\n            var coords = d3.mouse(this.svg.node());\n            this.mouse_guide.vertical.attr('x', coords[0]);\n            this.mouse_guide.horizontal.attr('y', coords[1]);\n        }.bind(this);\n        this.svg\n            .on('mouseout' + namespace + '-mouse_guide', mouseout_mouse_guide)\n            .on('touchleave' + namespace + '-mouse_guide', mouseout_mouse_guide)\n            .on('mousemove' + namespace + '-mouse_guide', mousemove_mouse_guide);\n    }\n    var mouseup = function() {\n        this.stopDrag();\n    }.bind(this);\n    var mousemove = function() {\n        if (this.interaction.dragging) {\n            var coords = d3.mouse(this.svg.node());\n            if (d3.event) { d3.event.preventDefault(); }\n            this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n            this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n            this.panels[this.interaction.panel_id].render();\n            this.interaction.linked_panel_ids.forEach(function(panel_id) {\n                this.panels[panel_id].render();\n            }.bind(this));\n        }\n    }.bind(this);\n    this.svg\n        .on('mouseup' + namespace, mouseup)\n        .on('touchend' + namespace, mouseup)\n        .on('mousemove' + namespace, mousemove)\n        .on('touchmove' + namespace, mousemove);\n\n    // Add an extra namespaced mouseup handler to the containing body, if there is one\n    // This helps to stop interaction events gracefully when dragging outside of the plot element\n    if (!d3.select('body').empty()) {\n        d3.select('body')\n            .on('mouseup' + namespace, mouseup)\n            .on('touchend' + namespace, mouseup);\n    }\n\n    this.on('match_requested', function(eventData) {\n        // Layers can broadcast that a specific point has been selected, and the plot will tell every other layer\n        //  to look for that value. Whenever a point is de-selected, it clears the match.\n        var data = eventData.data;\n        var to_send = (data.active ? data.value : null);\n        this.applyState({ lz_match_value: to_send });\n    }.bind(this));\n\n    this.initialized = true;\n\n    // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n    // positioning. TODO: make this additional call unnecessary.\n    var client_rect = this.svg.node().getBoundingClientRect();\n    var width = client_rect.width ? client_rect.width : this.layout.width;\n    var height = client_rect.height ? client_rect.height : this.layout.height;\n    this.setDimensions(width, height);\n\n    return this;\n\n};\n\n/**\n * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n * @returns {Promise}\n */\nLocusZoom.Plot.prototype.refresh = function() {\n    return this.applyState();\n};\n\n\n/**\n * A user-defined callback function that can receive (and potentially act on) new plot data.\n * @callback externalDataCallback\n * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n *  a data layer making an equivalent request.\n */\n\n/**\n * A user-defined callback function that can respond to errors received during a previous operation\n * @callback externalErrorCallback\n * @param err A representation of the error that occurred\n */\n\n/**\n * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n *\n * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n *  using the same fields syntax and underlying methods as data layers.\n *\n * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n *  Different data sources should be prefixed by the source name.\n * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n *  new data is received by the plot.\n * @param {Object} [opts] Options\n * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n *  occurs during the data request or subsequent callback operations\n * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n *  uncombined record info\n *  @return {function} The newly created event listener, to allow for later cleanup/removal\n */\nLocusZoom.Plot.prototype.subscribeToData = function(fields, success_callback, opts) {\n    opts = opts || {};\n\n    // Register an event listener that is notified whenever new data has been rendered\n    var error_callback = opts.onerror || function(err) {\n        console.log('An error occurred while acting on an external callback', err);\n    };\n    var self = this;\n\n    var listener = function() {\n        try {\n            self.lzd.getData(self.state, fields)\n                .then(function (new_data) {\n                    success_callback(opts.discrete ? new_data.discrete : new_data.body);\n                }).catch(error_callback);\n        } catch (error) {\n            // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n            error_callback(error);\n        }\n    };\n    this.on('data_rendered', listener);\n    return listener;\n};\n\n/**\n * Update state values and trigger a pull for fresh data on all data sources for all data layers\n * @param state_changes\n * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n */\nLocusZoom.Plot.prototype.applyState = function(state_changes) {\n    state_changes = state_changes || {};\n    if (typeof state_changes != 'object') {\n        throw new Error('LocusZoom.applyState only accepts an object; ' + (typeof state_changes) + ' given');\n    }\n\n    // Track what parameters will be modified. For bounds checking, we must take some preset values into account.\n    var mods = { chr: this.state.chr, start: this.state.start, end: this.state.end  };\n    for (var property in state_changes) {\n        mods[property] = state_changes[property];\n    }\n    mods = LocusZoom._updateStatePosition(mods, this.layout);\n\n    // Apply new state to the actual state\n    for (property in mods) {\n        this.state[property] = mods[property];\n    }\n\n    // Generate requests for all panels given new state\n    this.emit('data_requested');\n    this.remap_promises = [];\n    this.loading_data = true;\n    for (var id in this.panels) {\n        this.remap_promises.push(this.panels[id].reMap());\n    }\n\n    return Promise.all(this.remap_promises)\n        .catch(function(error) {\n            console.error(error);\n            this.curtain.show(error.message || error);\n            this.loading_data = false;\n        }.bind(this))\n        .then(function() {\n            // Update dashboard / components\n            this.dashboard.update();\n\n            // Apply panel-level state values\n            this.panel_ids_by_y_index.forEach(function(panel_id) {\n                var panel = this.panels[panel_id];\n                panel.dashboard.update();\n                // Apply data-layer-level state values\n                panel.data_layer_ids_by_z_index.forEach(function(data_layer_id) {\n                    this.data_layers[data_layer_id].applyAllElementStatus();\n                }.bind(panel));\n            }.bind(this));\n\n            // Emit events\n            this.emit('layout_changed');\n            this.emit('data_rendered');\n            this.emit('state_changed', state_changes);\n\n            this.loading_data = false;\n\n        }.bind(this));\n};\n\n/**\n * Register interactions along the specified axis, provided that the target panel allows interaction.\n *\n * @param {LocusZoom.Panel} panel\n * @param {('x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.startDrag = function(panel, method) {\n\n    panel = panel || null;\n    method = method || null;\n\n    var axis = null;\n    switch (method) {\n    case 'background':\n    case 'x_tick':\n        axis = 'x';\n        break;\n    case 'y1_tick':\n        axis = 'y1';\n        break;\n    case 'y2_tick':\n        axis = 'y2';\n        break;\n    }\n\n    if (!(panel instanceof LocusZoom.Panel) || !axis || !this.canInteract()) { return this.stopDrag(); }\n\n    var coords = d3.mouse(this.svg.node());\n    this.interaction = {\n        panel_id: panel.id,\n        linked_panel_ids: panel.getLinkedPanelIds(axis),\n        dragging: {\n            method: method,\n            start_x: coords[0],\n            start_y: coords[1],\n            dragged_x: 0,\n            dragged_y: 0,\n            axis: axis\n        }\n    };\n\n    this.svg.style('cursor', 'all-scroll');\n\n    return this;\n\n};\n\n/**\n * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n *   clear the event when complete\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.stopDrag = function() {\n\n    if (!this.interaction.dragging) { return this; }\n\n    if (typeof this.panels[this.interaction.panel_id] != 'object') {\n        this.interaction = {};\n        return this;\n    }\n    var panel = this.panels[this.interaction.panel_id];\n\n    // Helper function to find the appropriate axis layouts on child data layers\n    // Once found, apply the extent as floor/ceiling and remove all other directives\n    // This forces all associated axes to conform to the extent generated by a drag action\n    var overrideAxisLayout = function(axis, axis_number, extent) {\n        panel.data_layer_ids_by_z_index.forEach(function(id) {\n            if (panel.data_layers[id].layout[axis + '_axis'].axis === axis_number) {\n                panel.data_layers[id].layout[axis + '_axis'].floor = extent[0];\n                panel.data_layers[id].layout[axis + '_axis'].ceiling = extent[1];\n                delete panel.data_layers[id].layout[axis + '_axis'].lower_buffer;\n                delete panel.data_layers[id].layout[axis + '_axis'].upper_buffer;\n                delete panel.data_layers[id].layout[axis + '_axis'].min_extent;\n                delete panel.data_layers[id].layout[axis + '_axis'].ticks;\n            }\n        });\n    };\n\n    switch(this.interaction.dragging.method) {\n    case 'background':\n    case 'x_tick':\n        if (this.interaction.dragging.dragged_x !== 0) {\n            overrideAxisLayout('x', 1, panel.x_extent);\n            this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n        }\n        break;\n    case 'y1_tick':\n    case 'y2_tick':\n        if (this.interaction.dragging.dragged_y !== 0) {\n            // TODO: Hardcoded assumption of only two possible axes with single-digit #s (switch/case)\n            var y_axis_number = parseInt(this.interaction.dragging.method[1]);\n            overrideAxisLayout('y', y_axis_number, panel['y' + y_axis_number + '_extent']);\n        }\n        break;\n    }\n\n    this.interaction = {};\n    this.svg.style('cursor', null);\n\n    return this;\n\n};\n","/* global LocusZoom */\n'use strict';\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n * @class\n * @param {Object} layout\n * @param {LocusZoom.Plot|null} parent\n*/\nLocusZoom.Panel = function(layout, parent) {\n\n    if (typeof layout !== 'object') {\n        throw new Error('Unable to create panel, invalid layout');\n    }\n\n    /** @member {LocusZoom.Plot|null} */\n    this.parent = parent || null;\n    /** @member {LocusZoom.Plot|null} */\n    this.parent_plot = parent;\n\n    // Ensure a valid ID is present. If there is no valid ID then generate one\n    if (typeof layout.id !== 'string' || !layout.id.length) {\n        if (!this.parent) {\n            layout.id = 'p' + Math.floor(Math.random() * Math.pow(10,8));\n        } else {\n            var id = null;\n            var generateID = function() {\n                id = 'p' + Math.floor(Math.random() * Math.pow(10,8));\n                if (id == null || typeof this.parent.panels[id] != 'undefined') {\n                    id = generateID();\n                }\n            }.bind(this);\n            layout.id = id;\n        }\n    } else if (this.parent) {\n        if (typeof this.parent.panels[layout.id] !== 'undefined') {\n            throw new Error('Cannot create panel with id [' + layout.id + ']; panel with that id already exists');\n        }\n    }\n    /** @member {String} */\n    this.id = layout.id;\n\n    /** @member {Boolean} */\n    this.initialized = false;\n    /**\n     * The index of this panel in the parent plot's `layout.panels`\n     * @member {number}\n     * */\n    this.layout_idx = null;\n    /** @member {Object} */\n    this.svg = {};\n\n    /**\n     * A JSON-serializable object used to describe the composition of the Panel\n     * @member {Object}\n     */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.Panel.DefaultLayout);\n\n    // Define state parameters specific to this panel\n    if (this.parent) {\n        /** @member {Object} */\n        this.state = this.parent.state;\n\n        /** @member {String} */\n        this.state_id = this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n    } else {\n        this.state = null;\n        this.state_id = null;\n    }\n\n    /** @member {Object} */\n    this.data_layers = {};\n    /** @member {String[]} */\n    this.data_layer_ids_by_z_index = [];\n\n    /** @protected */\n    this.applyDataLayerZIndexesToDataLayerLayouts = function() {\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx) {\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    }.bind(this);\n\n    /**\n     * Track data requests in progress\n     * @member {Promise[]}\n     *  @protected\n     */\n    this.data_promises = [];\n\n    /** @member {d3.scale} */\n    this.x_scale  = null;\n    /** @member {d3.scale} */\n    this.y1_scale = null;\n    /** @member {d3.scale} */\n    this.y2_scale = null;\n\n    /** @member {d3.extent} */\n    this.x_extent  = null;\n    /** @member {d3.extent} */\n    this.y1_extent = null;\n    /** @member {d3.extent} */\n    this.y2_extent = null;\n\n    /** @member {Number[]} */\n    this.x_ticks  = [];\n    /** @member {Number[]} */\n    this.y1_ticks = [];\n    /** @member {Number[]} */\n    this.y2_ticks = [];\n\n    /**\n     * A timeout ID as returned by setTimeout\n     * @protected\n     * @member {number}\n     */\n    this.zoom_timeout = null;\n\n    /** @returns {string} */\n    this.getBaseId = function() {\n        return this.parent.id + '.' + this.id;\n    };\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        'layout_changed': [],\n        'data_requested': [],\n        'data_rendered': [],\n        'element_clicked': [],\n        'element_selection': [],\n        'match_requested': [] // A data layer is attempting to highlight matching points (internal use only)\n    };\n\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: panel - A data element in any of the panel's data layers has been clicked.\n     *   - `element_selection` - context: panel - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of the event (as defined in `event_hooks`)\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook) {\n        // TODO: Dry plot and panel event code into a shared mixin\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('Unable to register event hook, invalid event: ' + event.toString());\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Panel}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error('Unable to remove event hook, invalid event: ' + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {LocusZoom.Panel}\n     */\n    this.emit = function(event, eventData, bubble)  {\n        bubble = bubble || false;\n\n        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('LocusZoom attempted to throw an invalid event: ' + event.toString());\n        }\n        if (typeof eventData === 'boolean' && arguments.length === 2) {\n            // Overloaded method signature: emit(event, bubble)\n            bubble = eventData;\n            eventData = null;\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        var eventContext = {sourceID: sourceID, data: eventData || null};\n        this.event_hooks[event].forEach(function(hookToRun) {\n            // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n            // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        if (bubble && this.parent) {\n            this.parent.emit(event, eventContext);\n        }\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @returns {{x: Number, y: Number}}\n     */\n    this.getPageOrigin = function() {\n        var plot_origin = this.parent.getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y\n        };\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n\n    return this;\n\n};\n\n/**\n * Default panel layout\n * @static\n * @type {Object}\n */\nLocusZoom.Panel.DefaultLayout = {\n    title: { text: '', style: {}, x: 10, y: 22 },\n    y_index: null,\n    width:  0,\n    height: 0,\n    origin: { x: 0, y: null },\n    min_width: 1,\n    min_height: 1,\n    proportional_width: null,\n    proportional_height: null,\n    proportional_origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: 'clear_selections',\n    dashboard: {\n        components: []\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 }\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {}\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false\n    },\n    data_layers: []\n};\n\n/**\n * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n *   and preparing / positioning data layers as appropriate.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initializeLayout = function() {\n\n    // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n    // This will default the panel to taking up the full width of the plot.\n    if (this.layout.width === 0 && this.layout.proportional_width === null) {\n        this.layout.proportional_width = 1;\n    }\n\n    // If the layout is missing BOTH height and proportional height then set the proportional height to\n    // an equal share of the plot's current height.\n    if (this.layout.height === 0 && this.layout.proportional_height === null) {\n        var panel_count = Object.keys(this.parent.panels).length;\n        if (panel_count > 0) {\n            this.layout.proportional_height = (1 / panel_count);\n        } else {\n            this.layout.proportional_height = 1;\n        }\n    }\n\n    // Set panel dimensions, origin, and margin\n    this.setDimensions();\n    this.setOrigin();\n    this.setMargin();\n\n    // Set ranges\n    // TODO: Define stub values in constructor\n    this.x_range = [0, this.layout.cliparea.width];\n    this.y1_range = [this.layout.cliparea.height, 0];\n    this.y2_range = [this.layout.cliparea.height, 0];\n\n    // Initialize panel axes\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render === false) {\n            // The default layout sets the axis to an empty object, so set its render boolean here\n            this.layout.axes[axis].render = false;\n        } else {\n            this.layout.axes[axis].render = true;\n            this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n            this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n        }\n    }.bind(this));\n\n    // Add data layers (which define x and y extents)\n    this.layout.data_layers.forEach(function(data_layer_layout) {\n        this.addDataLayer(data_layer_layout);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n *\n * @public\n * @param {number} [width]\n * @param {number} [height]\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setDimensions = function(width, height) {\n    if (typeof width != 'undefined' && typeof height != 'undefined') {\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        }\n    } else {\n        if (this.layout.proportional_width !== null) {\n            this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n        }\n        if (this.layout.proportional_height !== null) {\n            this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n        }\n    }\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    if (this.svg.clipRect) {\n        this.svg.clipRect.attr('width', this.layout.width).attr('height', this.layout.height);\n    }\n    if (this.initialized) {\n        this.render();\n        this.curtain.update();\n        this.loader.update();\n        this.dashboard.update();\n        if (this.legend) { this.legend.position(); }\n    }\n    return this;\n};\n\n/**\n * Set panel origin on the plot, and re-render as appropriate\n *\n * @public\n * @param {number} x\n * @param {number} y\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setOrigin = function(x, y) {\n    if (!isNaN(x) && x >= 0) { this.layout.origin.x = Math.max(Math.round(+x), 0); }\n    if (!isNaN(y) && y >= 0) { this.layout.origin.y = Math.max(Math.round(+y), 0); }\n    if (this.initialized) { this.render(); }\n    return this;\n};\n\n/**\n * Set margins around this panel\n * @public\n * @param {number} top\n * @param {number} right\n * @param {number} bottom\n * @param {number} left\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setMargin = function(top, right, bottom, left) {\n    var extra;\n    if (!isNaN(top)    && top    >= 0) { this.layout.margin.top    = Math.max(Math.round(+top),    0); }\n    if (!isNaN(right)  && right  >= 0) { this.layout.margin.right  = Math.max(Math.round(+right),  0); }\n    if (!isNaN(bottom) && bottom >= 0) { this.layout.margin.bottom = Math.max(Math.round(+bottom), 0); }\n    if (!isNaN(left)   && left   >= 0) { this.layout.margin.left   = Math.max(Math.round(+left),   0); }\n    if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height) {\n        extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n        this.layout.margin.top -= extra;\n        this.layout.margin.bottom -= extra;\n    }\n    if (this.layout.margin.left + this.layout.margin.right > this.layout.width) {\n        extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.layout.width) / 2);\n        this.layout.margin.left -= extra;\n        this.layout.margin.right -= extra;\n    }\n    ['top', 'right', 'bottom', 'left'].forEach(function(m) {\n        this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n    }.bind(this));\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    this.layout.cliparea.origin.x = this.layout.margin.left;\n    this.layout.cliparea.origin.y = this.layout.margin.top;\n\n    if (this.initialized) { this.render(); }\n    return this;\n};\n\n/**\n * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n *   string, the title DOM element will be set to display: none.\n *\n * @param {string|object|null} title The title text, or an object with additional configuration\n * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n    NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setTitle = function(title) {\n    if (typeof this.layout.title == 'string') {\n        var text = this.layout.title;\n        this.layout.title = { text: text, x: 0, y: 0, style: {} };\n    }\n    if (typeof title == 'string') {\n        this.layout.title.text = title;\n    } else if (typeof title == 'object' && title !== null) {\n        this.layout.title = LocusZoom.Layouts.merge(title, this.layout.title);\n    }\n    if (this.layout.title.text.length) {\n        this.title.attr('display', null)\n            .attr('x', parseFloat(this.layout.title.x))\n            .attr('y', parseFloat(this.layout.title.y))\n            .style(this.layout.title.style)\n            .text(this.layout.title.text);\n    } else {\n        this.title.attr('display', 'none');\n    }\n    return this;\n};\n\n\n/**\n * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n *   elements such as axes,  title, and loader/curtain.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initialize = function() {\n\n    // Append a container group element to house the main panel group element and the clip path\n    // Position with initial layout parameters\n    this.svg.container = this.parent.svg.append('g')\n        .attr('id', this.getBaseId() + '.panel_container')\n        .attr('transform', 'translate(' + (this.layout.origin.x || 0) + ',' + (this.layout.origin.y || 0) + ')');\n\n    // Append clip path to the parent svg element, size with initial layout parameters\n    var clipPath = this.svg.container.append('clipPath')\n        .attr('id', this.getBaseId() + '.clip');\n    this.svg.clipRect = clipPath.append('rect')\n        .attr('width', this.layout.width).attr('height', this.layout.height);\n\n    // Append svg group for rendering all panel child elements, clipped by the clip path\n    this.svg.group = this.svg.container.append('g')\n        .attr('id', this.getBaseId() + '.panel')\n        .attr('clip-path', 'url(#' + this.getBaseId() + '.clip)');\n\n    // Add curtain and loader prototypes to the panel\n    /** @member {Object} */\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    /** @member {Object} */\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    /**\n     * Create the dashboard object and hang components on it as defined by panel layout\n     * @member {LocusZoom.Dashboard}\n     */\n    this.dashboard = new LocusZoom.Dashboard(this);\n\n    // Inner border\n    this.inner_border = this.svg.group.append('rect')\n        .attr('class', 'lz-panel-background')\n        .on('click', function() {\n            if (this.layout.background_click === 'clear_selections') { this.clearSelections(); }\n        }.bind(this));\n\n    // Add the title\n    /** @member {Element} */\n    this.title = this.svg.group.append('text').attr('class', 'lz-panel-title');\n    if (typeof this.layout.title != 'undefined') { this.setTitle(); }\n\n    // Initialize Axes\n    this.svg.x_axis = this.svg.group.append('g')\n        .attr('id', this.getBaseId() + '.x_axis').attr('class', 'lz-x lz-axis');\n    if (this.layout.axes.x.render) {\n        this.svg.x_axis_label = this.svg.x_axis.append('text')\n            .attr('class', 'lz-x lz-axis lz-label')\n            .attr('text-anchor', 'middle');\n    }\n    this.svg.y1_axis = this.svg.group.append('g')\n        .attr('id', this.getBaseId() + '.y1_axis').attr('class', 'lz-y lz-y1 lz-axis');\n    if (this.layout.axes.y1.render) {\n        this.svg.y1_axis_label = this.svg.y1_axis.append('text')\n            .attr('class', 'lz-y1 lz-axis lz-label')\n            .attr('text-anchor', 'middle');\n    }\n    this.svg.y2_axis = this.svg.group.append('g')\n        .attr('id', this.getBaseId() + '.y2_axis').attr('class', 'lz-y lz-y2 lz-axis');\n    if (this.layout.axes.y2.render) {\n        this.svg.y2_axis_label = this.svg.y2_axis.append('text')\n            .attr('class', 'lz-y2 lz-axis lz-label')\n            .attr('text-anchor', 'middle');\n    }\n\n    // Initialize child Data Layers\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].initialize();\n    }.bind(this));\n\n    /**\n     * Legend object, as defined by panel layout and child data layer layouts\n     * @member {LocusZoom.Legend}\n     * */\n    this.legend = null;\n    if (this.layout.legend) {\n        this.legend = new LocusZoom.Legend(this);\n    }\n\n    // Establish panel background drag interaction mousedown event handler (on the panel background)\n    if (this.layout.interaction.drag_background_to_pan) {\n        var namespace = '.' + this.parent.id + '.' + this.id + '.interaction.drag';\n        var mousedown = function() {\n            this.parent.startDrag(this, 'background');\n        }.bind(this);\n        this.svg.container.select('.lz-panel-background')\n            .on('mousedown' + namespace + '.background', mousedown)\n            .on('touchstart' + namespace + '.background', mousedown);\n    }\n\n    return this;\n\n};\n\n/**\n * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n */\nLocusZoom.Panel.prototype.resortDataLayers = function() {\n    var sort = [];\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        sort.push(this.data_layers[id].layout.z_index);\n    }.bind(this));\n    this.svg.group.selectAll('g.lz-data_layer-container').data(sort).sort(d3.ascending);\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n};\n\n/**\n * Get an array of panel IDs that are axis-linked to this panel\n * @param {('x'|'y1'|'y2')} axis\n * @returns {Array}\n */\nLocusZoom.Panel.prototype.getLinkedPanelIds = function(axis) {\n    axis = axis || null;\n    var linked_panel_ids = [];\n    if (['x','y1','y2'].indexOf(axis) === -1) { return linked_panel_ids; }\n    if (!this.layout.interaction[axis + '_linked']) { return linked_panel_ids; }\n    this.parent.panel_ids_by_y_index.forEach(function(panel_id) {\n        if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[axis + '_linked']) {\n            linked_panel_ids.push(panel_id);\n        }\n    }.bind(this));\n    return linked_panel_ids;\n};\n\n/**\n * Move a panel up relative to others by y-index\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveUp = function() {\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]) {\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Move a panel down (y-axis) relative to others in the plot\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveDown = function() {\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]) {\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n *   in the layout provided.\n * @param {object} layout\n * @returns {*}\n */\nLocusZoom.Panel.prototype.addDataLayer = function(layout) {\n\n    // Sanity checks\n    if (typeof layout !== 'object' || typeof layout.id !== 'string' || !layout.id.length) {\n        throw new Error('Invalid data layer layout passed to LocusZoom.Panel.prototype.addDataLayer()');\n    }\n    if (typeof this.data_layers[layout.id] !== 'undefined') {\n        throw new Error('Cannot create data_layer with id [' + layout.id + ']; data layer with that id already exists in the panel');\n    }\n    if (typeof layout.type !== 'string') {\n        throw new Error('Invalid data layer type in layout passed to LocusZoom.Panel.prototype.addDataLayer()');\n    }\n\n    // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n    if (typeof layout.y_axis == 'object' && (typeof layout.y_axis.axis == 'undefined' || [1,2].indexOf(layout.y_axis.axis) === -1)) {\n        layout.y_axis.axis = 1;\n    }\n\n    // Create the Data Layer\n    var data_layer = LocusZoom.DataLayers.get(layout.type, layout, this);\n\n    // Store the Data Layer on the Panel\n    this.data_layers[data_layer.id] = data_layer;\n\n    // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n    if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n        && this.data_layer_ids_by_z_index.length > 0) {\n        // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (data_layer.layout.z_index < 0) {\n            data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n        }\n        this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx) {\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    } else {\n        var length = this.data_layer_ids_by_z_index.push(data_layer.id);\n        this.data_layers[data_layer.id].layout.z_index = length - 1;\n    }\n\n    // Determine if this data layer was already in the layout.data_layers array.\n    // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n    var layout_idx = null;\n    this.layout.data_layers.forEach(function(data_layer_layout, idx) {\n        if (data_layer_layout.id === data_layer.id) { layout_idx = idx; }\n    });\n    if (layout_idx === null) {\n        layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n    }\n    this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n    return this.data_layers[data_layer.id];\n};\n\n/**\n * Remove a data layer by id\n * @param {string} id\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.removeDataLayer = function(id) {\n    if (!this.data_layers[id]) {\n        throw new Error('Unable to remove data layer, ID not found: ' + id);\n    }\n\n    // Destroy all tooltips for the data layer\n    this.data_layers[id].destroyAllTooltips();\n\n    // Remove the svg container for the data layer if it exists\n    if (this.data_layers[id].svg.container) {\n        this.data_layers[id].svg.container.remove();\n    }\n\n    // Delete the data layer and its presence in the panel layout and state\n    this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n    delete this.state[this.data_layers[id].state_id];\n    delete this.data_layers[id];\n\n    // Remove the data_layer id from the z_index array\n    this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n    // Update layout_idx and layout.z_index values for all remaining data_layers\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n    this.layout.data_layers.forEach(function(data_layer_layout, idx) {\n        this.data_layers[data_layer_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Clear all selections on all data layers\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.clearSelections = function() {\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].setAllElementStatus('selected', false);\n    }.bind(this));\n    return this;\n};\n\n/**\n * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n *   from the API as the viewing region changes\n * @returns {Promise}\n */\nLocusZoom.Panel.prototype.reMap = function() {\n    this.emit('data_requested');\n    this.data_promises = [];\n\n    // Remove any previous error messages before attempting to load new data\n    this.curtain.hide();\n    // Trigger reMap on each Data Layer\n    for (var id in this.data_layers) {\n        try {\n            this.data_promises.push(this.data_layers[id].reMap());\n        } catch (error) {\n            console.error(error);\n            this.curtain.show(error.message || error);\n        }\n    }\n    // When all finished trigger a render\n    return Promise.all(this.data_promises)\n        .then(function() {\n            this.initialized = true;\n            this.render();\n            this.emit('layout_changed', true);\n            this.emit('data_rendered');\n        }.bind(this))\n        .catch(function(error) {\n            console.error(error);\n            this.curtain.show(error.message || error);\n        }.bind(this));\n};\n\n/**\n * Iterate over data layers to generate panel axis extents\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.generateExtents = function() {\n\n    // Reset extents\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        this[axis + '_extent'] = null;\n    }.bind(this));\n\n    // Loop through the data layers\n    for (var id in this.data_layers) {\n\n        var data_layer = this.data_layers[id];\n\n        // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n        if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled) {\n            this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent('x')));\n        }\n\n        // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n        if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled) {\n            var y_axis = 'y' + data_layer.layout.y_axis.axis;\n            this[y_axis + '_extent'] = d3.extent((this[y_axis + '_extent'] || []).concat(data_layer.getAxisExtent('y')));\n        }\n\n    }\n\n    // Override x_extent from state if explicitly defined to do so\n    if (this.layout.axes.x && this.layout.axes.x.extent === 'state') {\n        this.x_extent = [ this.state.start, this.state.end ];\n    }\n\n    return this;\n\n};\n\n/**\n * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n *   1. An array of specific tick marks\n *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n *     object to override the layer's default presentation settings\n *   3. Generate generic tick marks based on the extent of the data\n * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n * @returns {Number[]|Object[]}  TODO: number format?\n *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.Panel.prototype.generateTicks = function(axis) {\n\n    // Parse an explicit 'ticks' attribute in the axis layout\n    if (this.layout.axes[axis].ticks) {\n        var layout = this.layout.axes[axis];\n\n        var baseTickConfig = layout.ticks;\n        if (Array.isArray(baseTickConfig)) {\n            // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n            return baseTickConfig;\n        }\n\n        if (typeof baseTickConfig === 'object') {\n            // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n            //   data layer to report the tick marks that it thinks it needs\n            // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n            var self = this;\n\n            // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n            var config = { position: baseTickConfig.position };\n\n            var combinedTicks = this.data_layer_ids_by_z_index.reduce(function(acc, data_layer_id) {\n                var nextLayer = self.data_layers[data_layer_id];\n                return acc.concat(nextLayer.getTicks(axis, config));\n            }, []);\n\n            return combinedTicks.map(function(item) {\n                // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                var itemConfig = {};\n                itemConfig = LocusZoom.Layouts.merge(itemConfig, baseTickConfig);\n                return LocusZoom.Layouts.merge(itemConfig, item);\n            });\n        }\n    }\n\n    // If no other configuration is provided, attempt to generate ticks from the extent\n    if (this[axis + '_extent']) {\n        return LocusZoom.prettyTicks(this[axis + '_extent'], 'both');\n    }\n    return [];\n};\n\n/**\n * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n *   prepared the first time via `initialize`\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.render = function() {\n\n    // Position the panel container\n    this.svg.container.attr('transform', 'translate(' + this.layout.origin.x +  ',' + this.layout.origin.y + ')');\n\n    // Set size on the clip rect\n    this.svg.clipRect.attr('width', this.layout.width).attr('height', this.layout.height);\n\n    // Set and position the inner border, style if necessary\n    this.inner_border\n        .attr('x', this.layout.margin.left).attr('y', this.layout.margin.top)\n        .attr('width', this.layout.width - (this.layout.margin.left + this.layout.margin.right))\n        .attr('height', this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n    if (this.layout.inner_border) {\n        this.inner_border.style({ 'stroke-width': 1, 'stroke': this.layout.inner_border });\n    }\n\n    // Set/update panel title if necessary\n    this.setTitle();\n\n    // Regenerate all extents\n    this.generateExtents();\n\n    // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n    // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n    var constrain = function(value, limit_exponent) {\n        var neg_min = Math.pow(-10, limit_exponent);\n        var neg_max = Math.pow(-10, -limit_exponent);\n        var pos_min = Math.pow(10, -limit_exponent);\n        var pos_max = Math.pow(10, limit_exponent);\n        if (value === Infinity) { value = pos_max; }\n        if (value === -Infinity) { value = neg_min; }\n        if (value === 0) { value = pos_min; }\n        if (value > 0) { value = Math.max(Math.min(value, pos_max), pos_min); }\n        if (value < 0) { value = Math.max(Math.min(value, neg_max), neg_min); }\n        return value;\n    };\n\n    // Define default and shifted ranges for all axes\n    var ranges = {};\n    if (this.x_extent) {\n        var base_x_range = { start: 0, end: this.layout.cliparea.width };\n        if (this.layout.axes.x.range) {\n            base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n            base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n        }\n        ranges.x = [base_x_range.start, base_x_range.end];\n        ranges.x_shifted = [base_x_range.start, base_x_range.end];\n    }\n    if (this.y1_extent) {\n        var base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y1.range) {\n            base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n            base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n        }\n        ranges.y1 = [base_y1_range.start, base_y1_range.end];\n        ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n    }\n    if (this.y2_extent) {\n        var base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y2.range) {\n            base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n            base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n        }\n        ranges.y2 = [base_y2_range.start, base_y2_range.end];\n        ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n    }\n\n    // Shift ranges based on any drag or zoom interactions currently underway\n    if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.indexOf(this.id) !== -1)) {\n        var anchor, scalar = null;\n        if (this.parent.interaction.zooming && typeof this.x_scale == 'function') {\n            var current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n            var current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n            var zoom_factor = this.parent.interaction.zooming.scale;\n            var potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n            if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)) {\n                zoom_factor = 1 / (Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n            } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)) {\n                zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n            }\n            var new_extent_size = Math.floor(current_extent_size * zoom_factor);\n            anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n            var offset_ratio = anchor / this.layout.cliparea.width;\n            var new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n            ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n        } else if (this.parent.interaction.dragging) {\n            switch (this.parent.interaction.dragging.method) {\n            case 'background':\n                ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                break;\n            case 'x_tick':\n                if (d3.event && d3.event.shiftKey) {\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                } else {\n                    anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                    scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                    ranges.x_shifted[0] = 0;\n                    ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                }\n                break;\n            case 'y1_tick':\n            case 'y2_tick':\n                var y_shifted = 'y' + this.parent.interaction.dragging.method[1] + '_shifted';\n                if (d3.event && d3.event.shiftKey) {\n                    ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                    ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                } else {\n                    anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                    scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                    ranges[y_shifted][0] = this.layout.cliparea.height;\n                    ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                }\n            }\n        }\n    }\n\n    // Generate scales and ticks for all axes, then render them\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        if (!this[axis + '_extent']) { return; }\n\n        // Base Scale\n        this[axis + '_scale'] = d3.scale.linear()\n            .domain(this[axis + '_extent'])\n            .range(ranges[axis + '_shifted']);\n\n        // Shift the extent\n        this[axis + '_extent'] = [\n            this[axis + '_scale'].invert(ranges[axis][0]),\n            this[axis + '_scale'].invert(ranges[axis][1])\n        ];\n\n        // Finalize Scale\n        this[axis + '_scale'] = d3.scale.linear()\n            .domain(this[axis + '_extent']).range(ranges[axis]);\n\n        // Render axis (and generate ticks as needed)\n        this.renderAxis(axis);\n    }.bind(this));\n\n    // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n    if (this.layout.interaction.scroll_to_zoom) {\n        var zoom_handler = function() {\n            // Look for a shift key press while scrolling to execute.\n            // If not present, gracefully raise a notification and allow conventional scrolling\n            if (!d3.event.shiftKey) {\n                if (this.parent.canInteract(this.id)) {\n                    this.loader.show('Press <tt>[SHIFT]</tt> while scrolling to zoom').hide(1000);\n                }\n                return;\n            }\n            d3.event.preventDefault();\n            if (!this.parent.canInteract(this.id)) { return; }\n            var coords = d3.mouse(this.svg.container.node());\n            var delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n            if (delta === 0) { return; }\n            this.parent.interaction = {\n                panel_id: this.id,\n                linked_panel_ids: this.getLinkedPanelIds('x'),\n                zooming: {\n                    scale: (delta < 1) ? 0.9 : 1.1,\n                    center: coords[0]\n                }\n            };\n            this.render();\n            this.parent.interaction.linked_panel_ids.forEach(function(panel_id) {\n                this.parent.panels[panel_id].render();\n            }.bind(this));\n            if (this.zoom_timeout !== null) { clearTimeout(this.zoom_timeout); }\n            this.zoom_timeout = setTimeout(function() {\n                this.parent.interaction = {};\n                this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n            }.bind(this), 500);\n        }.bind(this);\n        this.zoom_listener = d3.behavior.zoom();\n        this.svg.container.call(this.zoom_listener)\n            .on('wheel.zoom', zoom_handler)\n            .on('mousewheel.zoom', zoom_handler)\n            .on('DOMMouseScroll.zoom', zoom_handler);\n    }\n\n    // Render data layers in order by z-index\n    this.data_layer_ids_by_z_index.forEach(function(data_layer_id) {\n        this.data_layers[data_layer_id].draw().render();\n    }.bind(this));\n\n    return this;\n};\n\n\n/**\n * Render ticks for a particular axis\n * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.renderAxis = function(axis) {\n\n    if (['x', 'y1', 'y2'].indexOf(axis) === -1) {\n        throw new Error('Unable to render axis; invalid axis identifier: ' + axis);\n    }\n\n    var canRender = this.layout.axes[axis].render\n        && typeof this[axis + '_scale'] == 'function'\n        && !isNaN(this[axis + '_scale'](0));\n\n    // If the axis has already been rendered then check if we can/can't render it\n    // Make sure the axis element is shown/hidden to suit\n    if (this[axis + '_axis']) {\n        this.svg.container.select('g.lz-axis.lz-' + axis).style('display', canRender ? null : 'none');\n    }\n\n    if (!canRender) { return this; }\n\n    // Axis-specific values to plug in where needed\n    var axis_params = {\n        x: {\n            position: 'translate(' + this.layout.margin.left + ',' + (this.layout.height - this.layout.margin.bottom) + ')',\n            orientation: 'bottom',\n            label_x: this.layout.cliparea.width / 2,\n            label_y: (this.layout.axes[axis].label_offset || 0),\n            label_rotate: null\n        },\n        y1: {\n            position: 'translate(' + this.layout.margin.left + ',' + this.layout.margin.top + ')',\n            orientation: 'left',\n            label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        },\n        y2: {\n            position: 'translate(' + (this.layout.width - this.layout.margin.right) + ',' + this.layout.margin.top + ')',\n            orientation: 'right',\n            label_x: (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        }\n    };\n\n    // Generate Ticks\n    this[axis + '_ticks'] = this.generateTicks(axis);\n\n    // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n    var ticksAreAllNumbers = (function(ticks) {\n        for (var i = 0; i < ticks.length; i++) {\n            if (isNaN(ticks[i])) {\n                return false;\n            }\n        }\n        return true;\n    })(this[axis + '_ticks']);\n\n    // Initialize the axis; set scale and orientation\n    this[axis + '_axis'] = d3.svg.axis().scale(this[axis + '_scale']).orient(axis_params[axis].orientation).tickPadding(3);\n\n    // Set tick values and format\n    if (ticksAreAllNumbers) {\n        this[axis + '_axis'].tickValues(this[axis + '_ticks']);\n        if (this.layout.axes[axis].tick_format === 'region') {\n            this[axis + '_axis'].tickFormat(function(d) { return LocusZoom.positionIntToString(d, 6); });\n        }\n    } else {\n        var ticks = this[axis + '_ticks'].map(function(t) {\n            return(t[axis.substr(0,1)]);\n        });\n        this[axis + '_axis'].tickValues(ticks)\n            .tickFormat(function(t, i) { return this[axis + '_ticks'][i].text; }.bind(this));\n    }\n\n    // Position the axis in the SVG and apply the axis construct\n    this.svg[axis + '_axis']\n        .attr('transform', axis_params[axis].position)\n        .call(this[axis + '_axis']);\n\n    // If necessary manually apply styles and transforms to ticks as specified by the layout\n    if (!ticksAreAllNumbers) {\n        var tick_selector = d3.selectAll('g#' + this.getBaseId().replace('.','\\\\.') + '\\\\.' + axis + '_axis g.tick');\n        var panel = this;\n        tick_selector.each(function(d, i) {\n            var selector = d3.select(this).select('text');\n            if (panel[axis + '_ticks'][i].style) {\n                selector.style(panel[axis + '_ticks'][i].style);\n            }\n            if (panel[axis + '_ticks'][i].transform) {\n                selector.attr('transform', panel[axis + '_ticks'][i].transform);\n            }\n        });\n    }\n\n    // Render the axis label if necessary\n    var label = this.layout.axes[axis].label || null;\n    if (label !== null) {\n        this.svg[axis + '_axis_label']\n            .attr('x', axis_params[axis].label_x).attr('y', axis_params[axis].label_y)\n            .text(LocusZoom.parseFields(this.state, label));\n        if (axis_params[axis].label_rotate !== null) {\n            this.svg[axis + '_axis_label']\n                .attr('transform', 'rotate(' + axis_params[axis].label_rotate + ' ' + axis_params[axis].label_x + ',' + axis_params[axis].label_y + ')');\n        }\n    }\n\n    // Attach interactive handlers to ticks as needed\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        if (this.layout.interaction['drag_' + axis + '_ticks_to_scale']) {\n            var namespace = '.' + this.parent.id + '.' + this.id + '.interaction.drag';\n            var tick_mouseover = function() {\n                if (typeof d3.select(this).node().focus == 'function') { d3.select(this).node().focus(); }\n                var cursor = (axis === 'x') ? 'ew-resize' : 'ns-resize';\n                if (d3.event && d3.event.shiftKey) { cursor = 'move'; }\n                d3.select(this)\n                    .style({'font-weight': 'bold', 'cursor': cursor})\n                    .on('keydown' + namespace, tick_mouseover)\n                    .on('keyup' + namespace, tick_mouseover);\n            };\n            this.svg.container.selectAll('.lz-axis.lz-' + axis + ' .tick text')\n                .attr('tabindex', 0) // necessary to make the tick focusable so keypress events can be captured\n                .on('mouseover' + namespace, tick_mouseover)\n                .on('mouseout' + namespace,  function() {\n                    d3.select(this).style({'font-weight': 'normal'});\n                    d3.select(this).on('keydown' + namespace, null).on('keyup' + namespace, null);\n                })\n                .on('mousedown' + namespace, function() {\n                    this.parent.startDrag(this, axis + '_tick');\n                }.bind(this));\n        }\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Force the height of this panel to the largest absolute height of the data in\n *   all child data layers (if not null for any child data layers)\n * @param {number|null} [target_height] A target height, which will be used in situations when the expected height can be\n *   pre-calculated (eg when the layers are transitioning)\n */\nLocusZoom.Panel.prototype.scaleHeightToData = function(target_height) {\n    target_height = +target_height || null;\n    if (target_height === null) {\n        this.data_layer_ids_by_z_index.forEach(function(id) {\n            var dh = this.data_layers[id].getAbsoluteDataHeight();\n            if (+dh) {\n                if (target_height === null) {\n                    target_height = +dh;\n                }\n                else {\n                    target_height = Math.max(target_height, +dh);\n                }\n            }\n        }.bind(this));\n    }\n    if (+target_height) {\n        target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n        this.setDimensions(this.layout.width, target_height);\n        this.parent.setDimensions();\n        this.parent.panel_ids_by_y_index.forEach(function(id) {\n            this.parent.panels[id].layout.proportional_height = null;\n        }.bind(this));\n        this.parent.positionPanels();\n    }\n};\n\n/**\n * Methods to set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n */\nLocusZoom.Panel.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive) {\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n    }.bind(this));\n};\n/**\n * Set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n */\nLocusZoom.Panel.prototype.setAllElementStatus = function(status, toggle) {\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].setAllElementStatus(status, toggle);\n    }.bind(this));\n};\n// TODO: Capture documentation for dynamically generated methods\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx) {\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = 'un' + verb;\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.Panel.prototype[verb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.Panel.prototype[antiverb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.Panel.prototype[verb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.Panel.prototype[antiverb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n\n/**\n * Add a \"basic\" loader to a panel\n * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n *\n *\n * @param {Boolean} show_immediately\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.addBasicLoader = function(show_immediately) {\n    if (typeof show_immediately != 'undefined') { show_immediately = true; }\n    if (show_immediately) {\n        this.loader.show('Loading...').animate();\n    }\n    this.on('data_requested', function() {\n        this.loader.show('Loading...').animate();\n    }.bind(this));\n    this.on('data_rendered', function() {\n        this.loader.hide();\n    }.bind(this));\n    return this;\n};\n"]}