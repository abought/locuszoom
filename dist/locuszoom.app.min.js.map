{"version":3,"sources":["locuszoom.app.min.js","LocusZoom.js","Layouts.js","DataLayer.js","annotation_track.js","forest.js","genes.js","genome_legend.js","intervals.js","line.js","scatter.js","Singletons.js","Dashboard.js","Legend.js","Data.js","Plot.js","Panel.js"],"names":["root","factory","define","amd","d3","Q","LocusZoom","module","exports","require","this","semanticVersionIsOk","minimum_version","current_version","minimum_version_array","split","current_version_array","version_is_ok","forEach","d","i","minimum_d3_version","version","populate","selector","datasource","layout","select","html","plot","call","node","id","iterator","empty","attr","Plot","container","dataset","region","parsed_state","parsePositionQuery","Object","keys","key","state","svg","append","style","setDimensions","positionPanels","initialize","length","refresh","populateAll","plots","selectAll","each","positionIntToString","pos","exp","suffix","exp_symbols","0","3","6","9","isNaN","log","Math","LN10","min","max","places_exp","floor","toFixed","min_exp","places","ret","pow","positionStringToInt","p","val","toUpperCase","replace","suffixre","exec","mult","Number","x","chrposoff","chrpos","match","center","offset","chr","start","end","position","prettyTicks","range","clip_range","target_tick_count","parseInt","min_n","shrink_sml","high_u_bias","u5_bias","abs","c","base","base_toFixed","round","unit","ticks","parseFloat","push","indexOf","slice","pop","createCORSPromise","method","url","body","headers","timeout","response","defer","xhr","XMLHttpRequest","open","XDomainRequest","onreadystatechange","readyState","status","resolve","reject","setTimeout","header","setRequestHeader","send","promise","validateState","new_state","validated_region","attempted_scale","attempted_midpoint","temp","min_region_scale","max_region_scale","parseFields","data","tokens","regex","m","index","text","condition","variable","close","console","error","JSON","stringify","astify","token","shift","then","ast","cache","hasOwnProperty","Data","Field","render_node","value","map","join","getToolTipData","parentNode","classed","getToolTipDataLayer","getDataLayer","getToolTipPanel","data_layer","parent","getToolTipPlot","panel","generateCurtain","curtain","showing","content_selector","hide_delay","show","content","css","parent_plot","insert","on","hide","bind","update","clearTimeout","page_origin","getPageOrigin","top","y","left","width","height","max-width","max-height","delay","remove","generateLoader","loader","progress_selector","cancel_selector","percent","padding","loader_boundrect","getBoundingClientRect","animate","setPercentCompleted","subclass","extra","Sub","constructor","apply","arguments","prototype","create","k","ext","Layouts","obj","layouts","dashboard","tooltip","get","type","name","modifications","merge","unnamespaced","parse","default_namespace","namespace","default","toString","applyNamespaces","element","resolved_namespace","re","r","merge_namespace","namespaced_element","namespaced_property","property","set","add","list","custom_layout","default_layout","custom_type","default_type","Array","isArray","assoc","closable","or","and","covariates_model_association","intervals","orientation","recomb","fields","z_index","stroke","stroke-width","x_axis","field","y_axis","axis","ceiling","ld","point_shape","scale_function","parameters","field_value","else","point_size","color","breaks","values","legend","shape","size","label","class","id_field","upper_buffer","min_extent","behaviors","onmouseover","action","onmouseout","onclick","exclusive","onshiftclick","phewas","tooltip_positioning","category_field","lower_buffer","categories","null_value","fill_opacity","spacing","lines","stroke-dasharray","filters","operator","font-size","font-weight","fill","gene","constraint","genome","start_field","end_field","track_split_field","split_tracks","always_hide_legend","{{namespace[intervals]}}state_id","components","group_position","margin-left","title","subtitle","covariates_model_plot_dashboard","button_html","button_title","region_nav_plot_dashboard","step","min_width","min_height","proportional_width","margin","right","bottom","inner_border","l","axes","label_offset","tick_format","extent","y1","y2","origin","hidden","interaction","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","data_layers","text-anchor","transform","data_layer_id","pad_from_bottom","responsive_resize","panels","proportional_height","StandardLayout","mouse_guide","DataLayer","initialized","layout_idx","Panel","DefaultLayout","_base_layout","state_id","setDefaultState","tooltips","global_statuses","highlighted","selected","faded","addField","fieldName","transformations","fieldString","Statuses","adjectives","verbs","menu_antiverbs","getBaseId","getAbsoluteDataHeight","dataBCR","group","canTransition","transition","panel_boundaries","dragging","panel_id","getElementId","element_id","getElementStatusNodeId","getElementById","applyDataMethods","toHTML","deselect","unselectElement","applyCustomDataMethods","clipRect","moveUp","data_layer_ids_by_z_index","resortDataLayers","moveDown","resolveScalableParameter","idx","f","ScaleFunctions","getAxisExtent","dimension","axis_name","axis_layout","data_extent","original_extent_span","range_min","range_max","getTicks","config","createTooltip","positionTooltip","arrow","updateTooltip","destroyTooltip","destroyAllTooltips","event","pageX","pageY","positionAllTooltips","showOrHideTooltip","resolveStatus","statuses","directive","reduce","previousValue","currentValue","sub_status","sub_operator","show_directive","hide_directive","antistatus","show_resolved","hide_resolved","filter","return_type","test","operators","=","a","b","<","<=",">",">=","%","matches","filterIndexes","filterElements","verb","adjective","antiverb","setElementStatus","setElementStatusByFilters","setAllElementStatus","toggle","get_element_id_error","element_status_node_id","element_status_idx","splice","emit","active","status_ids","applyBehaviors","selection","event_match","executeBehaviors","requiredKeyStates","ctrl","ctrlKey","shiftKey","behavior","current_status_boolean","href","target","window","location","panel_origin","exportData","format","default_format","toLowerCase","e","jsonified","delimiter","record","draw","cliparea","reMap","lzd","getData","new_data","DataLayers","datalayers","datalayer","extend","parent_name","overrides","child","render","self","trackData","enter","exit","arrow_type","arrow_top","arrow_left","arrow_width","stroke_width","tooltip_box","data_layer_height","data_layer_width","x_center","x_scale","y_center","offset_right","offset_left","confidence_intervals","show_no_significance_line","border_radius","y_scale","sqrt","PI","ci_selection","ci_transform","ci_width","ci_height","duration","ease","points_selection","initial_y","symbol","element_data","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","getTrackHeight","transcript_idx","tracks","gene_track_index","1","assignTracks","getLabelWidth","gene_name","font_size","temp_text","label_width","getBBox","g","gene_id","gene_version","transcript_id","transcripts","display_range","text_anchor","centered_margin","display_domain","invert","track","potential_track","collision_on_potential_track","placed_gene","min_start","max_end","t","exons","bboxes","boundary_fill","boundary_stroke","boundaries","labels","strand","exon_fill","exon_stroke","exon_id","clickareas","gene_bbox_id","gene_bbox","gene_center_x","chromosome_fill_colors","light","dark","chromosome_label_colors","genome_start","genome_end","chromosomes","variant_parts","variant","track_split_order","track_split_legend_to_y_axis","track_height","previous_tracks","interval_track_index","track_split_field_index","reverse","placed_interval","psuedoElement","sharedstatusnode_style","display","interval","statusnode_style","statusnodes","rects","interval_name","updateSplitTrackAxis","interval_bbox","interval_center_x","legend_axis","track_spacing","target_height","scaleHeightToData","toggleSplitTracks","interpolate","hitarea_width","mouse_event","line","tooltip_timeout","getMouseDisplayAndData","mouse","slope","x_field","y_field","bisect","bisector","datum","startDatum","endDatum","interpolateNumber","x_precision","toPrecision","y_precision","dd","min_arrow_left","max_arrow_left","path","hitarea","hitarea_line","path_class","global_status","decoupled","x_extent","y_extent","x_range","y_range","flip_labels","handle_lines","Boolean","min_x","max_x","flip","dn","dnl","dnx","text_swing","dnlx2","line_swing","label_texts","da","dax","abound","dal","label_lines","db","bbound","collision","separate_labels","seperate_iterations","alpha","again","delta","sign","adjust","new_a_y","new_b_y","min_y","max_y","label_elements","label_line","filtered_data","label_groups","x1","x2","makeLDReference","ref","applyState","ldrefvar","_prepareData","xField","sourceData","sort","ak","bk","av","bv","_generateCategoryBounds","uniqueCategories","item","category","bounds","categoryNames","_setDynamicColorScheme","colorParams","baseParams","parameters_categories_hash","every","colors","color_scale","scale","category10","category20","concat","categoryBounds","_categories","knownCategories","knownColors","xPos","diff","KnownDataSources","sources","findSourceByName","SOURCE_NAME","source","warn","source_name","newObj","params","Function","getAll","setAll","clear","TransformationFunctions","getTrans","fun","parseTrans","parseTransString","result","funs","substring","fn","ceil","toExponential","str","encodeURIComponent","s","functions","input","threshold","prev","curr","nullval","upper_idx","brk","normalized_input","isFinite","Dashboard","hide_timeout","persist","component","Components","shouldPersist","visibility","destroy","force","Component","parent_panel","parent_svg","button","menu","Button","parent_dashboard","tag","setTag","setHtml","setText","setHTML","setTitle","setColor","setStyle","getClass","permanent","setPermanent","bool","setStatus","highlight","disable","setOnMouseover","setOnMouseout","setOnclick","preUpdate","postUpdate","outer_selector","inner_selector","scroll_position","scrollTop","scrollbar_padding","menu_height_padding","page_scroll_top","document","documentElement","container_offset","getContainerOffset","dashboard_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","base_max_width","container_max_width","content_max_width","base_max_height","max_height","setPopulate","menu_populate_function","div_selector","title_selector","display_width","display_height","generateBase64SVG","base64_string","css_string","stylesheet","styleSheets","fcall","outerHTML","dy","initial_html","style_def","insert_at","btoa","p1","String","fromCharCode","suppress_confirm","confirm","removePanel","is_at_top","y_index","is_at_bottom","panel_ids_by_y_index","can_zoom","current_region_scale","zoom_factor","new_region_scale","menu_html","model","covariates","CovariatesModel","element_reference","updateComponent","removeByIdx","removeAll","table","covariate","row","cov","scale_timeout","status_adj","status_idx","status_verb","at_top","at_bottom","td","removeDataLayer","allowed_fields","fields_whitelist","dataLayer","layer_name","dataLayerLayout","defaultConfig","configSlot","_selected_item","uniqueID","random","menuLayout","renderRow","display_name","display_options","row_id","field_name","defaultName","default_config_display_name","options","Legend","background_rect","elements","elements_group","label_size","line_height","label_x","label_y","path_y","symbolTypes","radius","bcr","right_x","pad_from_right","DataSources","addSource","ns","dsobj","source_id","getSource","removeSource","fromJSON","ds","toJSON","parts","full_name","applyTransformations","Requester","split_requests","requests","raw","trans","outnames","request_handles","when","discrete","Source","enableCache","dependentSource","parseInit","init","getCacheKey","chain","getURL","fetchRequest","getRequest","req","cacheKey","_cachedKey","_cachedResponse","preGetData","pre","resp","parseResponse","normalizeResponse","N","sameLength","records","j","prepareData","annotateData","extractFields","fieldFound","output_record","v","combineChainBody","json","standardized","one_source_body","new_body","parseArraysToObjects","standard","parseObjectsToObjects","parseData","constructorFun","uniqueName","getPrototypeOf","AssociationSource","unshift","analysis","LDSource","findMergeFields","exactMatch","arr","regexes","dataFields","position_field","pvalue","pvalue_field","_names_","names","nameMatch","findRequestedFields","isrefvarin","isrefvarout","ldin","ldout","findExtremeValue","pval","extremeVal","extremeIdx","refSource","ldrefsource","reqFields","refVar","columns","leftJoin","lfield","rfield","position2","tagRefVariant","refvar","idfield","outname","GeneSource","GeneConstraintSource","geneids","substr","Content-Type","constraint_fields","RecombinationRateSource","recombsource","IntervalSource","bedtracksource","StaticSource","_data","PheWASSource","build","ConnectorSource","_source_name_mapping","specified_ids","REQUIRED_SOURCES","chain_source_id","applyPanelYIndexesToPanelLayouts","pid","remap_promises","window_onresize","event_hooks","layout_changed","data_requested","data_rendered","element_clicked","element_selection","state_changed","hook","off","theseHooks","undefined","hookMatch","eventData","sourceID","hookToRun","eventContext","bounding_client_rect","x_offset","scrollLeft","y_offset","offsetParent","offsetTop","offsetLeft","canInteract","loading_data","zooming","initializeLayout","aspect_ratio","sumProportional","total","rescaleSVG","clientRect","panel_layout","addPanel","min-width","min-height","panel_width","panel_height","setOrigin","proportional_origin","clearPanelData","panelId","mode","panelsList","dlid","layer","x_linked_margins","total_proportional_height","proportional_adjustment","calculated_plot_height","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","selectors","corner_selector","panel_idx","panel_resize_drag","drag","this_panel","original_panel_height","panel_height_change","new_calculated_plot_height","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","dx","plot_page_origin","panel_page_origin","corner_padding","corner_size","mouseout_mouse_guide","mousemove_mouse_guide","coords","mouseup","stopDrag","mousemove","preventDefault","dragged_x","start_x","dragged_y","start_y","linked_panel_ids","client_rect","subscribeToData","success_callback","opts","error_callback","onerror","err","listener","catch","state_changes","all","drop","startDrag","getLinkedPanelIds","overrideAxisLayout","axis_number","y_axis_number","generateID","applyDataLayerZIndexesToDataLayerLayouts","data_promises","y1_scale","y2_scale","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","bubble","plot_origin","background_click","y1_linked","y2_linked","panel_count","setMargin","y1_range","y2_range","label_function","data_layer_layout","addDataLayer","clipPath","clearSelections","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","ascending","generateExtents","generateTicks","baseTickConfig","combinedTicks","acc","nextLayer","itemConfig","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","anchor","scalar","current_extent_size","current_scaled_extent_size","potential_extent_size","new_extent_size","offset_ratio","new_x_extent_start","y_shifted","linear","domain","renderAxis","zoom_handler","wheelDelta","detail","deltaY","zoom_listener","zoom","canRender","axis_params","label_rotate","ticksAreAllNumbers","orient","tickPadding","tickValues","tickFormat","tick_selector","tick_mouseover","focus","cursor","dh","addBasicLoader","show_immediately","plugin_loading_error"],"mappings":"8qBAAC,SAAUA,EAAMC,GACS,kBAAXC,SAAyBA,OAAOC,IACvCD,QACI,KACA,KACD,SAAUE,EAAIC,GAEb,MAAOL,GAAKM,UAAYL,EAAQG,EAAIC,KAEf,gBAAXE,SAAuBA,OAAOC,QAE5CD,OAAOC,QAAUR,EAAKM,UAAYL,EAAQQ,QAAQ,MAAOA,QAAQ,MAGjET,EAAKM,UAAYL,EAAQD,EAAKI,GAAIJ,EAAKK,IAE7CK,KAAM,SAAUN,EAAIC,GAClB,GAAIM,GAAsB,SAAUC,EAAiBC,GAEjD,GAAIA,GAAmBD,EACnB,OAAO,CAGX,IAAIE,GAAwBF,EAAgBG,MAAM,KAC9CC,EAAwBH,EAAgBE,MAAM,KAC9CE,GAAgB,CAMpB,OALAH,GAAsBI,QAAQ,SAAUC,EAAGC,IAClCH,IAAkBD,EAAsBI,IAAMN,EAAsBM,KACrEH,GAAgB,KAGjBA,EAEX,KAEI,GAAII,GAAqB,OACzB,IAAiB,gBAANjB,GACP,KAAM,yCAEV,KAAKO,EAAoBU,EAAoBjB,EAAGkB,SAC5C,KAAM,2EAA6ED,EAAqB,sBAAwBjB,EAAGkB,QAAU,IAGjJ,IAAgB,kBAALjB,GACP,KAAM,wCCzClB,IAAAC,IACAgB,QAAA,QAYAhB,GAAAiB,SAAA,SAAAC,EAAAC,EAAAC,GACA,GAAA,mBAAAF,GACA,KAAA,yCAGApB,GAAAuB,OAAAH,GAAAI,KAAA,GACA,IAAAC,EAkCA,OAjCAzB,GAAAuB,OAAAH,GAAAM,KAAA,WAEA,GAAA,mBAAApB,MAAAqB,OAAAC,GAAA,CAEA,IADA,GAAAC,GAAA,GACA7B,EAAAuB,OAAA,OAAAM,GAAAC,SAAAD,GACAvB,MAAAyB,KAAA,KAAA,OAAAF,GAMA,GAHAJ,EAAA,GAAAvB,GAAA8B,KAAA1B,KAAAqB,OAAAC,GAAAP,EAAAC,GACAG,EAAAQ,UAAA3B,KAAAqB,OAEA,mBAAArB,MAAAqB,OAAAO,SAAA,mBAAA5B,MAAAqB,OAAAO,QAAAC,OAAA,CACA,GAAAC,GAAAlC,EAAAmC,mBAAA/B,KAAAqB,OAAAO,QAAAC,OACAG,QAAAC,KAAAH,GAAAtB,QAAA,SAAA0B,GACAf,EAAAgB,MAAAD,GAAAJ,EAAAI,KAIAf,EAAAiB,IAAA1C,EAAAuB,OAAA,OAAAE,EAAAG,IACAe,OAAA,OACAZ,KAAA,UAAA,OACAA,KAAA,QAAA,8BACAA,KAAA,KAAAN,EAAAG,GAAA,QAAAG,KAAA,QAAA,gBACAa,MAAAnB,EAAAH,OAAAsB,OACAnB,EAAAoB,gBACApB,EAAAqB,iBAEArB,EAAAsB,aAEA,gBAAA1B,IAAAiB,OAAAC,KAAAlB,GAAA2B,QACAvB,EAAAwB,YAGAxB,GAYAvB,EAAAgD,YAAA,SAAA9B,EAAAC,EAAAC,GACA,GAAA6B,KAIA,OAHAnD,GAAAoD,UAAAhC,GAAAiC,KAAA,SAAAtC,EAAAC,GACAmC,EAAAnC,GAAAd,EAAAiB,SAAAb,KAAAe,EAAAC,KAEA6B,GAWAjD,EAAAoD,oBAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAAC,EAAA,GAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAEA,IADAL,EAAAA,IAAA,EACAM,MAAAP,IAAA,OAAAA,EAAA,CACA,GAAAQ,GAAAC,KAAAD,IAAAT,GAAAU,KAAAC,IACAV,GAAAS,KAAAE,IAAAF,KAAAG,IAAAJ,EAAAA,EAAA,EAAA,GAAA,GAEA,GAAAK,GAAAb,EAAAS,KAAAK,OAAAL,KAAAD,IAAAT,GAAAU,KAAAC,MAAAK,QAAAf,EAAA,IACAgB,EAAAP,KAAAE,IAAAF,KAAAG,IAAAZ,EAAA,GAAA,GACAiB,EAAAR,KAAAE,IAAAF,KAAAG,IAAAC,EAAAG,GAAA,IACAE,EAAA,IAAAnB,EAAAU,KAAAU,IAAA,GAAAnB,IAAAe,QAAAE,EAIA,OAHAhB,IAAA,mBAAAC,GAAAF,KACAkB,GAAA,IAAAhB,EAAAF,GAAA,KAEAkB,GAQAxE,EAAA0E,oBAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,aACAD,GAAAA,EAAAE,QAAA,KAAA,GACA,IAAAC,GAAA,eACAxB,EAAAwB,EAAAC,KAAAJ,GACAK,EAAA,CAYA,OAXA1B,KAEA0B,EADA,MAAA1B,EAAA,GACA,IACA,MAAAA,EAAA,GACA,IAEA,IAEAqB,EAAAA,EAAAE,QAAAC,EAAA,KAEAH,EAAAM,OAAAN,GAAAK,GAWAjF,EAAAmC,mBAAA,SAAAgD,GACA,GAAAC,GAAA,yDACAC,EAAA,+BACAC,EAAAF,EAAAJ,KAAAG,EACA,IAAAG,EAAA,CACA,GAAA,MAAAA,EAAA,GAAA,CACA,GAAAC,GAAAvF,EAAA0E,oBAAAY,EAAA,IACAE,EAAAxF,EAAA0E,oBAAAY,EAAA,GACA,QACAG,IAAAH,EAAA,GACAI,MAAAH,EAAAC,EACAG,IAAAJ,EAAAC,GAGA,OACAC,IAAAH,EAAA,GACAI,MAAA1F,EAAA0E,oBAAAY,EAAA,IACAK,IAAA3F,EAAA0E,oBAAAY,EAAA,KAKA,MADAA,GAAAD,EAAAL,KAAAG,GACAG,GAEAG,IAAAH,EAAA,GACAM,SAAA5F,EAAA0E,oBAAAY,EAAA,KAGA,MAeAtF,EAAA6F,YAAA,SAAAC,EAAAC,EAAAC,IACA,mBAAAA,IAAAnC,MAAAoC,SAAAD,OACAA,EAAA,GAEAA,EAAAC,SAAAD,EAEA,IAAAE,GAAAF,EAAA,EACAG,EAAA,IACAC,EAAA,IACAC,EAAA,GAAA,IAAAD,EAEAvF,EAAAkD,KAAAuC,IAAAR,EAAA,GAAAA,EAAA,IACAS,EAAA1F,EAAAmF,CACAjC,MAAAD,IAAAjD,GAAAkD,KAAAC,MAAA,IACAuC,EAAAxC,KAAAG,IAAAH,KAAAuC,IAAAzF,IAAAsF,EAAAD,EAGA,IAAAM,GAAAzC,KAAAU,IAAA,GAAAV,KAAAK,MAAAL,KAAAD,IAAAyC,GAAAxC,KAAAC,OACAyC,EAAA,CACAD,GAAA,GAAA,IAAAA,IACAC,EAAA1C,KAAAuC,IAAAvC,KAAA2C,MAAA3C,KAAAD,IAAA0C,GAAAzC,KAAAC,OAGA,IAAA2C,GAAAH,CACA,GAAAA,EAAAD,EAAAH,GAAAG,EAAAI,KACAA,EAAA,EAAAH,EACA,EAAAA,EAAAD,EAAAF,GAAAE,EAAAI,KACAA,EAAA,EAAAH,EACA,GAAAA,EAAAD,EAAAH,GAAAG,EAAAI,KACAA,EAAA,GAAAH,IAOA,KAFA,GAAAI,MACA9F,EAAA+F,YAAA9C,KAAAK,MAAA0B,EAAA,GAAAa,GAAAA,GAAAtC,QAAAoC,IACA3F,EAAAgF,EAAA,IACAc,EAAAE,KAAAhG,GACAA,GAAA6F,EACAF,EAAA,IACA3F,EAAA+F,WAAA/F,EAAAuD,QAAAoC,IAeA,OAZAG,GAAAE,KAAAhG,GAEA,mBAAAiF,KAAA,MAAA,OAAA,OAAA,WAAAgB,QAAAhB,MAAA,IACAA,EAAA,WAEA,QAAAA,GAAA,SAAAA,GACAa,EAAA,GAAAd,EAAA,KAAAc,EAAAA,EAAAI,MAAA,IAEA,SAAAjB,GAAA,SAAAA,GACAa,EAAAA,EAAA9D,OAAA,GAAAgD,EAAA,IAAAc,EAAAK,MAGAL,GAeA5G,EAAAkH,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAzH,EAAA0H,QACAC,EAAA,GAAAC,eAcA,IAbA,mBAAAD,GAGAA,EAAAE,KAAAT,EAAAC,GAAA,GACA,mBAAAS,iBAGAH,EAAA,GAAAG,gBACAH,EAAAE,KAAAT,EAAAC,IAGAM,EAAA,KAEAA,EAAA,CAYA,GAXAA,EAAAI,mBAAA,WACA,IAAAJ,EAAAK,aACA,MAAAL,EAAAM,QAAA,IAAAN,EAAAM,OACAR,EAAAS,QAAAP,EAAAF,UAEAA,EAAAU,OAAA,QAAAR,EAAAM,OAAA,QAAAZ,KAIAG,GAAAY,WAAAX,EAAAU,OAAAX,GACAF,EAAA,mBAAAA,GAAAA,EAAA,GACA,mBAAAC,GACA,IAAA,GAAAc,KAAAd,GACAI,EAAAW,iBAAAD,EAAAd,EAAAc,GAIAV,GAAAY,KAAAjB,GAEA,MAAAG,GAAAe,SAYAvI,EAAAwI,cAAA,SAAAC,EAAArH,GAEAqH,EAAAA,MACArH,EAAAA,KAIA,IAAAsH,IAAA,CACA,IAAA,mBAAAD,GAAAhD,KAAA,mBAAAgD,GAAA/C,OAAA,mBAAA+C,GAAA9C,IAAA,CAEA,GAAAgD,GAAAC,EAAA,IAGA,IAFAH,EAAA/C,MAAA3B,KAAAG,IAAA+B,SAAAwC,EAAA/C,OAAA,GACA+C,EAAA9C,IAAA5B,KAAAG,IAAA+B,SAAAwC,EAAA9C,KAAA,GACA9B,MAAA4E,EAAA/C,QAAA7B,MAAA4E,EAAA9C,KACA8C,EAAA/C,MAAA,EACA+C,EAAA9C,IAAA,EACAiD,EAAA,GACAD,EAAA,MACA,IAAA9E,MAAA4E,EAAA/C,QAAA7B,MAAA4E,EAAA9C,KACAiD,EAAAH,EAAA/C,OAAA+C,EAAA9C,IACAgD,EAAA,EACAF,EAAA/C,MAAA7B,MAAA4E,EAAA/C,OAAA+C,EAAA9C,IAAA8C,EAAA/C,MACA+C,EAAA9C,IAAA9B,MAAA4E,EAAA9C,KAAA8C,EAAA/C,MAAA+C,EAAA9C,QACA,CAGA,GAFAiD,EAAA7E,KAAA2C,OAAA+B,EAAA/C,MAAA+C,EAAA9C,KAAA,GACAgD,EAAAF,EAAA9C,IAAA8C,EAAA/C,MACAiD,EAAA,EAAA,CACA,GAAAE,GAAAJ,EAAA/C,KACA+C,GAAA9C,IAAA8C,EAAA/C,MACA+C,EAAA/C,MAAAmD,EACAF,EAAAF,EAAA9C,IAAA8C,EAAA/C,MAEAkD,EAAA,IACAH,EAAA/C,MAAA,EACA+C,EAAA9C,IAAA,EACAgD,EAAA,GAGAD,GAAA,EAeA,OAXA7E,MAAAzC,EAAA0H,mBAAAJ,GAAAC,EAAAvH,EAAA0H,mBACAL,EAAA/C,MAAA3B,KAAAG,IAAA0E,EAAA7E,KAAAK,MAAAhD,EAAA0H,iBAAA,GAAA,GACAL,EAAA9C,IAAA8C,EAAA/C,MAAAtE,EAAA0H,mBAIAjF,MAAAzC,EAAA2H,mBAAAL,GAAAC,EAAAvH,EAAA2H,mBACAN,EAAA/C,MAAA3B,KAAAG,IAAA0E,EAAA7E,KAAAK,MAAAhD,EAAA2H,iBAAA,GAAA,GACAN,EAAA9C,IAAA8C,EAAA/C,MAAAtE,EAAA2H,kBAGAN,GAgBAzI,EAAAgJ,YAAA,SAAAC,EAAA3H,GACA,GAAA,gBAAA2H,GACA,KAAA,gEAEA,IAAA,gBAAA3H,GACA,KAAA,+DAMA,KAFA,GAAA4H,MACAC,EAAA,8CACA7H,EAAAwB,OAAA,GAAA,CACA,GAAAsG,GAAAD,EAAAnE,KAAA1D,EACA8H,GACA,IAAAA,EAAAC,OAAAH,EAAApC,MAAAwC,KAAAhI,EAAA0F,MAAA,EAAAoC,EAAAC,SAAA/H,EAAAA,EAAA0F,MAAAoC,EAAAC,QACA,SAAAD,EAAA,IAAAF,EAAApC,MAAAyC,UAAAH,EAAA,KAAA9H,EAAAA,EAAA0F,MAAAoC,EAAA,GAAAtG,SACAsG,EAAA,IAAAF,EAAApC,MAAA0C,SAAAJ,EAAA,KAAA9H,EAAAA,EAAA0F,MAAAoC,EAAA,GAAAtG,SACA,QAAAsG,EAAA,IAAAF,EAAApC,MAAA2C,MAAA,OAAAnI,EAAAA,EAAA0F,MAAAoC,EAAA,GAAAtG,UAEA4G,QAAAC,MAAA,uDAAAC,KAAAC,UAAAvI,GACA,4BAAAsI,KAAAC,UAAAX,GACA,+BAAAU,KAAAC,WAAAT,EAAA,GAAAA,EAAA,GAAAA,EAAA,MACA9H,EAAAA,EAAA0F,MAAAoC,EAAA,GAAAtG,UATAoG,EAAApC,MAAAwC,KAAAhI,IAAAA,EAAA,IA+BA,IAnBA,GAAAwI,GAAA,WACA,GAAAC,GAAAb,EAAAc,OACA,IAAA,mBAAAD,GAAAT,MAAAS,EAAAP,SACA,MAAAO,EACA,IAAAA,EAAAR,UAAA,CAEA,IADAQ,EAAAE,QACAf,EAAApG,OAAA,GAAA,CACA,GAAA,OAAAoG,EAAA,GAAAO,MAAA,CAAAP,EAAAc,OAAA,OACAD,EAAAE,KAAAnD,KAAAgD,KAEA,MAAAC,GAGA,MADAL,SAAAC,MAAA,iDAAAC,KAAAC,UAAAE,KACAT,KAAA,KAKAY,KACAhB,EAAApG,OAAA,GAAAoH,EAAApD,KAAAgD,IAEA,IAAA7B,GAAA,SAAAuB,GAIA,MAHAvB,GAAAkC,MAAAC,eAAAZ,KACAvB,EAAAkC,MAAAX,GAAA,GAAAxJ,GAAAqK,KAAAC,MAAAd,GAAAvB,QAAAgB,IAEAhB,EAAAkC,MAAAX,GAEAvB,GAAAkC,QACA,IAAAI,GAAA,SAAA9I,GACA,GAAA,mBAAAA,GAAA6H,KACA,MAAA7H,GAAA6H,IACA,IAAA7H,EAAA+H,SAAA,CACA,IACA,GAAAgB,GAAAvC,EAAAxG,EAAA+H,SACA,KAAA,SAAA,SAAA,WAAAzC,cAAAyD,OAAA,EAAA,MAAAA,EACA,IAAA,OAAAA,EAAA,MAAA,GACA,MAAAb,GAAAD,QAAAC,MAAA,mCAAAC,KAAAC,UAAApI,EAAA+H,WACA,MAAA,KAAA/H,EAAA+H,SAAA,KACA,GAAA/H,EAAA8H,UAAA,CACA,IACA,GAAAA,GAAAtB,EAAAxG,EAAA8H,UACA,IAAAA,GAAA,IAAAA,EACA,MAAA9H,GAAAwI,KAAAQ,IAAAF,GAAAG,KAAA,IAEA,MAAAf,GAAAD,QAAAC,MAAA,oCAAAC,KAAAC,UAAApI,EAAA+H,WACA,MAAA,GACAE,QAAAC,MAAA,mDAAAC,KAAAC,UAAApI,IAEA,OAAAyI,GAAAO,IAAAF,GAAAG,KAAA,KAQA1K,EAAA2K,eAAA,SAAAlJ,GACA,GAAA,gBAAAA,IAAA,mBAAAA,GAAAmJ,WACA,KAAA,qBAGA,IAAA1J,GAAApB,EAAAuB,OAAAI,EACA,OAAAP,GAAA2J,QAAA,0BAAA,mBAAA3J,GAAA+H,OAAA,GACA/H,EAAA+H,OAAA,GAEAjJ,EAAA2K,eAAAlJ,EAAAmJ,aASA5K,EAAA8K,oBAAA,SAAArJ,GACA,GAAAwH,GAAAjJ,EAAA2K,eAAAlJ,EACA,OAAAwH,GAAA8B,aAAA9B,EAAA8B,eACA,MAQA/K,EAAAgL,gBAAA,SAAAvJ,GACA,GAAAwJ,GAAAjL,EAAA8K,oBAAArJ,EACA,OAAAwJ,GAAAA,EAAAC,OACA,MAQAlL,EAAAmL,eAAA,SAAA1J,GACA,GAAA2J,GAAApL,EAAAgL,gBAAAvJ,EACA,OAAA2J,GAAAA,EAAAF,OACA,MAWAlL,EAAAqL,gBAAA,WACA,GAAAC,IACAC,SAAA,EACArK,SAAA,KACAsK,iBAAA,KACAC,WAAA,KAQAC,KAAA,SAAAC,EAAAC,GAWA,MAVAxL,MAAAkL,QAAAC,UACAnL,KAAAkL,QAAApK,SAAApB,EAAAuB,OAAAjB,KAAAyL,YAAArJ,IAAAf,OAAAmJ,YAAAkB,OAAA,OACAjK,KAAA,QAAA,cAAAA,KAAA,KAAAzB,KAAAsB,GAAA,YACAtB,KAAAkL,QAAAE,iBAAApL,KAAAkL,QAAApK,SAAAuB,OAAA,OAAAZ,KAAA,QAAA,sBACAzB,KAAAkL,QAAApK,SAAAuB,OAAA,OAAAZ,KAAA,QAAA,sBAAAP,KAAA,WACAyK,GAAA,QAAA,WACA3L,KAAAkL,QAAAU,QACAC,KAAA7L,OACAA,KAAAkL,QAAAC,SAAA,GAEAnL,KAAAkL,QAAAY,OAAAP,EAAAC,IACAK,KAAA7L,MAQA8L,OAAA,SAAAP,EAAAC,GACA,IAAAxL,KAAAkL,QAAAC,QAAA,MAAAnL,MAAAkL,OACAa,cAAA/L,KAAAkL,QAAAG,YAEA,gBAAAG,IACAxL,KAAAkL,QAAApK,SAAAwB,MAAAkJ,EAGA,IAAAQ,GAAAhM,KAAAiM,eAeA,OAdAjM,MAAAkL,QAAApK,SAAAwB,OACA4J,IAAAF,EAAAG,EAAA,KACAC,KAAAJ,EAAAjH,EAAA,KACAsH,MAAArM,KAAAgB,OAAAqL,MAAA,KACAC,OAAAtM,KAAAgB,OAAAsL,OAAA,OAEAtM,KAAAkL,QAAAE,iBAAA9I,OACAiK,YAAAvM,KAAAgB,OAAAqL,MAAA,GAAA,KACAG,aAAAxM,KAAAgB,OAAAsL,OAAA,GAAA,OAGA,gBAAAf,IACAvL,KAAAkL,QAAAE,iBAAAlK,KAAAqK,GAEAvL,KAAAkL,SACAW,KAAA7L,MAMA4L,KAAA,SAAAa,GACA,MAAAzM,MAAAkL,QAAAC,QAEA,gBAAAsB,IACAV,aAAA/L,KAAAkL,QAAAG,YACArL,KAAAkL,QAAAG,WAAAtD,WAAA/H,KAAAkL,QAAAU,KAAAa,GACAzM,KAAAkL,UAGAlL,KAAAkL,QAAApK,SAAA4L,SACA1M,KAAAkL,QAAApK,SAAA,KACAd,KAAAkL,QAAAE,iBAAA,KACApL,KAAAkL,QAAAC,SAAA,EACAnL,KAAAkL,SAZAlL,KAAAkL,SAaAW,KAAA7L,MAEA,OAAAkL,IAYAtL,EAAA+M,eAAA,WACA,GAAAC,IACAzB,SAAA,EACArK,SAAA,KACAsK,iBAAA,KACAyB,kBAAA,KACAC,gBAAA,KAMAxB,KAAA,SAAAC,GAoBA,MAlBAvL,MAAA4M,OAAAzB,UACAnL,KAAA4M,OAAA9L,SAAApB,EAAAuB,OAAAjB,KAAAyL,YAAArJ,IAAAf,OAAAmJ,YAAAkB,OAAA,OACAjK,KAAA,QAAA,aAAAA,KAAA,KAAAzB,KAAAsB,GAAA,WACAtB,KAAA4M,OAAAxB,iBAAApL,KAAA4M,OAAA9L,SAAAuB,OAAA,OACAZ,KAAA,QAAA,qBACAzB,KAAA4M,OAAAC,kBAAA7M,KAAA4M,OAAA9L,SACAuB,OAAA,OAAAZ,KAAA,QAAA,gCACAY,OAAA,OAAAZ,KAAA,QAAA,sBAQAzB,KAAA4M,OAAAzB,SAAA,EACA,mBAAAI,KAAAA,EAAA,eAEAvL,KAAA4M,OAAAd,OAAAP,IACAM,KAAA7L,MAQA8L,OAAA,SAAAP,EAAAwB,GACA,IAAA/M,KAAA4M,OAAAzB,QAAA,MAAAnL,MAAA4M,MACAb,cAAA/L,KAAA4M,OAAAvB,YAEA,gBAAAE,IACAvL,KAAA4M,OAAAxB,iBAAAlK,KAAAqK,EAGA,IAAAyB,GAAA,EACAhB,EAAAhM,KAAAiM,gBACAgB,EAAAjN,KAAA4M,OAAA9L,SAAAO,OAAA6L,uBAiBA,OAhBAlN,MAAA4M,OAAA9L,SAAAwB,OACA4J,IAAAF,EAAAG,EAAAnM,KAAAgB,OAAAsL,OAAAW,EAAAX,OAAAU,EAAA,KACAZ,KAAAJ,EAAAjH,EAAAiI,EAAA,OASA,gBAAAD,IACA/M,KAAA4M,OAAAC,kBAAAvK,OACA+J,MAAA1I,KAAAE,IAAAF,KAAAG,IAAAiJ,EAAA,GAAA,KAAA,MAGA/M,KAAA4M,QACAf,KAAA7L,MAMAmN,QAAA,WAEA,MADAnN,MAAA4M,OAAAC,kBAAApC,QAAA,+BAAA,GACAzK,KAAA4M,QACAf,KAAA7L,MAMAoN,oBAAA,SAAAL,GAEA,MADA/M,MAAA4M,OAAAC,kBAAApC,QAAA,+BAAA,GACAzK,KAAA4M,OAAAd,OAAA,KAAAiB,IACAlB,KAAA7L,MAMA4L,KAAA,SAAAa,GACA,MAAAzM,MAAA4M,OAAAzB,QAEA,gBAAAsB,IACAV,aAAA/L,KAAA4M,OAAAvB,YACArL,KAAA4M,OAAAvB,WAAAtD,WAAA/H,KAAA4M,OAAAhB,KAAAa,GACAzM,KAAA4M,SAGA5M,KAAA4M,OAAA9L,SAAA4L,SACA1M,KAAA4M,OAAA9L,SAAA,KACAd,KAAA4M,OAAAxB,iBAAA,KACApL,KAAA4M,OAAAC,kBAAA,KACA7M,KAAA4M,OAAAE,gBAAA,KACA9M,KAAA4M,OAAAzB,SAAA,EACAnL,KAAA4M,QAdA5M,KAAA4M,QAeAf,KAAA7L,MAEA,OAAA4M,IAaAhN,EAAAyN,SAAA,SAAAvC,EAAAwC,GACA,GAAA,kBAAAxC,GACA,KAAA,uCAGAwC,GAAAA,KACA,IAAAC,GAAAD,EAAAtD,eAAA,eAAAsD,EAAAE,YAAA,WACA1C,EAAA2C,MAAAzN,KAAA0N,WAOA,OAJAH,GAAAI,UAAA3L,OAAA4L,OAAA9C,EAAA6C,WACA3L,OAAAC,KAAAqL,GAAA9M,QAAA,SAAAqN,GACAN,EAAAI,UAAAE,GAAAP,EAAAO,KAEAN,GAWA3N,EAAAkO,OCvtBAlO,EAAAmO,QAAA,WACA,GAAAC,MACAC,GACA9M,QACA6J,SACAH,cACAqD,aACAC,WA2KA,OAjKAH,GAAAI,IAAA,SAAAC,EAAAC,EAAAC,GACA,GAAA,gBAAAF,IAAA,gBAAAC,GACA,KAAA,2GACA,IAAAL,EAAAI,GAAAC,GAAA,CAEA,GAAAtN,GAAApB,EAAAmO,QAAAS,MAAAD,MAAAN,EAAAI,GAAAC,GAEA,IAAAtN,EAAAyN,aAEA,aADAzN,GAAAyN,aACAjF,KAAAkF,MAAAlF,KAAAC,UAAAzI,GAGA,IAAA2N,GAAA,EACA,iBAAA3N,GAAA4N,UACAD,EAAA3N,EAAA4N,UACA,gBAAA5N,GAAA4N,WAAA5M,OAAAC,KAAAjB,EAAA4N,WAAAlM,SAEAiM,EADA,mBAAA3N,GAAA4N,UAAAC,QACA7N,EAAA4N,UAAAC,QAEA7N,EAAA4N,UAAA5M,OAAAC,KAAAjB,EAAA4N,WAAA,IAAAE,YAGAH,GAAAA,EAAAjM,OAAA,IAAA,EAEA,IAAAqM,GAAA,SAAAC,EAAAJ,GAQA,GAPAA,EACA,gBAAAA,KACAA,GAAAC,QAAAD,IAGAA,GAAAC,QAAA,IAEA,gBAAAG,GAAA,CAIA,IAHA,GACA9J,GAAAkB,EAAAlE,EAAA+M,EADAC,EAAA,yCAEAxK,KACA,QAAAQ,EAAAgK,EAAAtK,KAAAoK,KACA5I,EAAAlB,EAAA,GACAhD,EAAAgD,EAAA,GAAAxC,OAAAwC,EAAA,GAAAR,QAAA,WAAA,IAAA,KACAuK,EAAAN,EACA,MAAAC,GAAA,gBAAAA,IAAA,mBAAAA,GAAA1M,KACA+M,EAAAL,EAAA1M,IAAA0M,EAAA1M,GAAAQ,OAAA,IAAA,KAEAgC,EAAAgC,MAAAN,KAAAA,EAAAwI,UAAAK,GAEA,KAAA,GAAAE,KAAAzK,GACAsK,EAAAA,EAAAtK,QAAAA,EAAAyK,GAAA/I,KAAA1B,EAAAyK,GAAAP,eAEA,IAAA,gBAAAI,IAAA,MAAAA,EAAA,CACA,GAAA,mBAAAA,GAAAJ,UAAA,CACA,GAAAQ,GAAA,gBAAAJ,GAAAJ,WAAAC,QAAAG,EAAAJ,WAAAI,EAAAJ,SACAA,GAAAhP,EAAAmO,QAAAS,MAAAI,EAAAQ,GAEA,GAAAC,GAAAC,CACA,KAAA,GAAAC,KAAAP,GACA,cAAAO,IACAF,EAAAN,EAAAC,EAAAO,GAAAX,GACAU,EAAAP,EAAAQ,EAAAX,GACAW,IAAAD,SACAN,GAAAO,GAEAP,EAAAM,GAAAD,GAGA,MAAAL,GAIA,OAFAhO,GAAA+N,EAAA/N,EAAAA,EAAA4N,WAEApF,KAAAkF,MAAAlF,KAAAC,UAAAzI,IAEA,KAAA,gBAAAqN,EAAA,WAAAC,EAAA,eAKAN,EAAAwB,IAAA,SAAAnB,EAAAC,EAAAtN,GACA,GAAA,gBAAAqN,IAAA,gBAAAC,IAAA,gBAAAtN,GACA,KAAA,yDAKA,OAHAiN,GAAAI,KACAJ,EAAAI,OAEArN,EACAiN,EAAAI,GAAAC,GAAA9E,KAAAkF,MAAAlF,KAAAC,UAAAzI,WAEAiN,GAAAI,GAAAC,GACA,OAaAN,EAAAyB,IAAA,SAAApB,EAAAC,EAAAtN,GACA,MAAAgN,GAAAwB,IAAAnB,EAAAC,EAAAtN,IAQAgN,EAAA0B,KAAA,SAAArB,GACA,GAAAJ,EAAAI,GAOA,MAAArM,QAAAC,KAAAgM,EAAAI,GANA,IAAAqB,KAIA,OAHA1N,QAAAC,KAAAgM,GAAAzN,QAAA,SAAA6N,GACAqB,EAAArB,GAAArM,OAAAC,KAAAgM,EAAAI,MAEAqB,GAgBA1B,EAAAQ,MAAA,SAAAmB,EAAAC,GACA,GAAA,gBAAAD,IAAA,gBAAAC,GACA,KAAA,kEAAAD,GAAA,WAAAC,GAAA,QAEA,KAAA,GAAAL,KAAAK,GACA,GAAAA,EAAA5F,eAAAuF,GAAA,CAIA,GAAAM,GAAA,OAAAF,EAAAJ,GAAA,kBAAAI,GAAAJ,GACAO,QAAAF,GAAAL,EAIA,IAHA,WAAAM,GAAAE,MAAAC,QAAAL,EAAAJ,MAAAM,EAAA,SACA,WAAAC,GAAAC,MAAAC,QAAAJ,EAAAL,MAAAO,EAAA,SAEA,aAAAD,GAAA,aAAAC,EACA,KAAA,kEAGA,eAAAD,EAKA,WAAAA,GAAA,WAAAC,IACAH,EAAAJ,GAAA3P,EAAAmO,QAAAS,MAAAmB,EAAAJ,GAAAK,EAAAL,KALAI,EAAAJ,GAAA/F,KAAAkF,MAAAlF,KAAAC,UAAAmG,EAAAL,KASA,MAAAI,IAGA3B,KAUApO,EAAAmO,QAAA0B,IAAA,UAAA,wBACAb,WAAAqB,MAAA,SACAC,UAAA,EACA5E,MAAA6E,IAAA,cAAA,aACAvE,MAAAwE,KAAA,gBAAA,eACAlP,KAAA,mWAMA,IAAAmP,GAAAzQ,EAAAmO,QAAAK,IAAA,UAAA,wBAAAK,cAAA,GACA4B,GAAAnP,MAAA,2JACAtB,EAAAmO,QAAA0B,IAAA,UAAA,+BAAAY,GAEAzQ,EAAAmO,QAAA0B,IAAA,UAAA,kBACAS,UAAA,EACA5E,MAAA6E,IAAA,cAAA,aACAvE,MAAAwE,KAAA,gBAAA,eACAlP,KAAA,2rBAaAtB,EAAAmO,QAAA0B,IAAA,UAAA,sBACAb,WAAA0B,UAAA,aACAJ,UAAA,EACA5E,MAAA6E,IAAA,cAAA,aACAvE,MAAAwE,KAAA,gBAAA,eACAlP,KAAA,gHAQAtB,EAAAmO,QAAA0B,IAAA,aAAA,gBACAnO,GAAA,eACA+M,KAAA,kBACAkC,YAAA,aACAnL,OAAA,QAGAxF,EAAAmO,QAAA0B,IAAA,aAAA,eACAb,WAAA4B,OAAA,UACAlP,GAAA,aACA+M,KAAA,OACAoC,QAAA,gCAAA,oCACAC,QAAA,EACApO,OACAqO,OAAA,UACAC,eAAA,SAEAC,QACAC,MAAA,iCAEAC,QACAC,KAAA,EACAF,MAAA,mCACA9M,MAAA,EACAiN,QAAA,OAIArR,EAAAmO,QAAA0B,IAAA,aAAA,uBACAb,WAAAqB,MAAA,QAAAiB,GAAA,MACA5P,GAAA,qBACA+M,KAAA,UACA8C,aACAC,eAAA,KACAN,MAAA,4BACAO,YACAC,YAAA,EACAzH,KAAA,UACA0H,KAAA,WAGAC,YACAJ,eAAA,KACAN,MAAA,4BACAO,YACAC,YAAA,EACAzH,KAAA,GACA0H,KAAA,KAGAE,QAEAL,eAAA,KACAN,MAAA,4BACAO,YACAC,YAAA,EACAzH,KAAA,aAIAuH,eAAA,gBACAN,MAAA,yBACAO,YACAK,QAAA,EAAA,GAAA,GAAA,GAAA,IACAC,QAAA,UAAA,UAAA,UAAA,UAAA,aAGA,WAEAC,SACAC,MAAA,UAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,aAAAC,MAAA,0BACAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,0BACAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,0BACAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,0BACAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,0BACAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,0BACAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,aAAAC,MAAA,0BAEAvB,QAAA,8BAAA,+BAAA,iCAAA,kDAAA,iCAAA,yBAAA,6BACAwB,SAAA,8BACAvB,QAAA,EACAG,QACAC,MAAA,gCAEAC,QACAC,KAAA,EACAF,MAAA,iCACA9M,MAAA,EACAkO,aAAA,GACAC,YAAA,EAAA,KAEAC,WACAC,cACAC,OAAA,MAAA1K,OAAA,gBAEA2K,aACAD,OAAA,QAAA1K,OAAA,gBAEA4K,UACAF,OAAA,SAAA1K,OAAA,WAAA6K,WAAA,IAEAC,eACAJ,OAAA,SAAA1K,OAAA,cAGAuG,QAAAvO,EAAAmO,QAAAK,IAAA,UAAA,wBAAAK,cAAA,MAGA7O,EAAAmO,QAAA0B,IAAA,aAAA,kBACAb,WAAA+D,OAAA,UACArR,GAAA,gBACA+M,KAAA,mBACA8C,YAAA,SACAK,WAAA,GACAoB,oBAAA,WACAX,SAAA,0BACAxB,QAAA,0BAAA,kCAAA,mCAAA,oCACAI,QACAC,MAAA,yBACA+B,eAAA,mCACAC,aAAA,KACAZ,aAAA,MAEAnB,QACAC,KAAA,EACAF,MAAA,kCACA9M,MAAA,EACAkO,aAAA,KAEAT,OACAX,MAAA,mCACAM,eAAA,kBACAC,YACA0B,cACApB,UACAqB,WAAA,YAGAC,aAAA,GACA9E,SACA+B,UAAA,EACA5E,MAAA6E,IAAA,cAAA,aACAvE,MAAAwE,KAAA,gBAAA,eACAlP,MACA,8EACA,uFACA,iGACAoJ,KAAA,KAEA8H,WACAC,cACAC,OAAA,MAAA1K,OAAA,gBAEA2K,aACAD,OAAA,QAAA1K,OAAA,gBAEA4K,UACAF,OAAA,SAAA1K,OAAA,WAAA6K,WAAA,IAEAC,eACAJ,OAAA,SAAA1K,OAAA,cAGAmK,OACA7I,KAAA,uCACAgK,QAAA,EACAC,OACA7Q,OACAsO,eAAA,MACAD,OAAA,UACAyC,mBAAA,YAGAC,UAEAvC,MAAA,kCACAwC,SAAA,KACAlJ,MAAA,KAGA9H,OACAiR,YAAA,OACAC,cAAA,OACAC,KAAA,cAKA7T,EAAAmO,QAAA0B,IAAA,aAAA,SACAb,WAAA8E,KAAA,OAAAC,WAAA,cACArS,GAAA,QACA+M,KAAA,QACAoC,QAAA,yBAAA,gCACAwB,SAAA,UACAG,WACAC,cACAC,OAAA,MAAA1K,OAAA,gBAEA2K,aACAD,OAAA,QAAA1K,OAAA,gBAEA4K,UACAF,OAAA,SAAA1K,OAAA,WAAA6K,WAAA,IAEAC,eACAJ,OAAA,SAAA1K,OAAA,cAGAuG,QAAAvO,EAAAmO,QAAAK,IAAA,UAAA,kBAAAK,cAAA,MAGA7O,EAAAmO,QAAA0B,IAAA,aAAA,iBACAb,WAAAgF,OAAA,UACAtS,GAAA,gBACA+M,KAAA,gBACAoC,QAAA,2BAAA,mCACAI,QACA7M,MAAA,EACAiN,QAAA,cAIArR,EAAAmO,QAAA0B,IAAA,aAAA,aACAb,WAAA0B,UAAA,aACAhP,GAAA,YACA+M,KAAA,YACAoC,QAAA,gCAAA,8BAAA,mCAAA,sCACAwB,SAAA,gCACA4B,YAAA,gCACAC,UAAA,8BACAC,kBAAA,mCACAC,cAAA,EACAC,oBAAA,EACAxC,OACAX,MAAA,mCACAM,eAAA,kBACAC,YACA0B,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IACApB,QAAA,iBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,iBAAA,mBAAA,oBACAqB,WAAA,YAGApB,SACAC,MAAA,OAAAJ,MAAA,iBAAApF,MAAA,EAAA0F,MAAA,kBAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,mBAAApF,MAAA,EAAA0F,MAAA,gBAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,mBAAApF,MAAA,EAAA0F,MAAA,kBAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,kBAAApF,MAAA,EAAA0F,MAAA,kBAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,mBAAApF,MAAA,EAAA0F,MAAA,kBAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,kBAAApF,MAAA,EAAA0F,MAAA,gBAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,kBAAApF,MAAA,EAAA0F,MAAA,gBAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,kBAAApF,MAAA,EAAA0F,MAAA,YAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,iBAAApF,MAAA,EAAA0F,MAAA,6BAAAmC,mCAAA,IACArC,MAAA,OAAAJ,MAAA,iBAAApF,MAAA,EAAA0F,MAAA,6BAAAmC,mCAAA,KACArC,MAAA,OAAAJ,MAAA,mBAAApF,MAAA,EAAA0F,MAAA,mBAAAmC,mCAAA,KACArC,MAAA,OAAAJ,MAAA,mBAAApF,MAAA,EAAA0F,MAAA,qBAAAmC,mCAAA,KACArC,MAAA,OAAAJ,MAAA,mBAAApF,MAAA,EAAA0F,MAAA,+BAAAmC,mCAAA,KAEA9B,WACAC,cACAC,OAAA,MAAA1K,OAAA,gBAEA2K,aACAD,OAAA,QAAA1K,OAAA,gBAEA4K,UACAF,OAAA,SAAA1K,OAAA,WAAA6K,WAAA,IAEAC,eACAJ,OAAA,SAAA1K,OAAA,cAGAuG,QAAAvO,EAAAmO,QAAAK,IAAA,UAAA,sBAAAK,cAAA,MAOA7O,EAAAmO,QAAA0B,IAAA,YAAA,kBACA0E,aAEA9F,KAAA,eACA7I,SAAA,QACAiM,MAAA,MACA2C,eAAA,QAGA/F,KAAA,gBACA7I,SAAA,QACA4O,eAAA,WAGA/F,KAAA,kBACA7I,SAAA,QACA4O,eAAA,QACA9R,OAAA+R,cAAA,cAKAzU,EAAAmO,QAAA0B,IAAA,YAAA,iBACA0E,aAEA9F,KAAA,QACAiG,MAAA,YACAC,SAAA,mEAAA3U,EAAAgB,QAAA,OACA4E,SAAA,SAGA6I,KAAA,aACA7I,SAAA,UAGA6I,KAAA,eACA7I,SAAA,UAGA6I,KAAA,WACA7I,SAAA,WAKA,IAAAgP,GAAA5U,EAAAmO,QAAAK,IAAA,YAAA,gBACAoG,GAAAL,WAAAzN,MACA2H,KAAA,mBACAoG,YAAA,QACAC,aAAA,8CACAlP,SAAA,SAEA5F,EAAAmO,QAAA0B,IAAA,YAAA,wBAAA+E,EAEA,IAAAG,GAAA/U,EAAAmO,QAAAK,IAAA,YAAA,gBACAuG,GAAAR,WAAAzN,MACA2H,KAAA,eACAuG,KAAA,IACAH,YAAA,KACAjP,SAAA,QACA4O,eAAA,QAEAO,EAAAR,WAAAzN,MACA2H,KAAA,eACAuG,KAAA,IACAH,YAAA,IACAjP,SAAA,QACA4O,eAAA,WAEAO,EAAAR,WAAAzN,MACA2H,KAAA,cACAuG,KAAA,GACApP,SAAA,QACA4O,eAAA,WAEAO,EAAAR,WAAAzN,MACA2H,KAAA,cACAuG,MAAA,GACApP,SAAA,QACA4O,eAAA,WAEAO,EAAAR,WAAAzN,MACA2H,KAAA,eACAuG,MAAA,IACAH,YAAA,IACAjP,SAAA,QACA4O,eAAA,WAEAO,EAAAR,WAAAzN,MACA2H,KAAA,eACAuG,MAAA,IACAH,YAAA,KACAjP,SAAA,QACA4O,eAAA,UAEAxU,EAAAmO,QAAA0B,IAAA,YAAA,kBAAAkF,GAOA/U,EAAAmO,QAAA0B,IAAA,QAAA,eACAnO,GAAA,cACA+K,MAAA,IACAC,OAAA,IACAuI,UAAA,IACAC,WAAA,IACAC,mBAAA,EACAC,QAAA9I,IAAA,GAAA+I,MAAA,GAAAC,OAAA,GAAA9I,KAAA,IACA+I,aAAA,qBACAjH,UAAA,WACA,GAAAkH,GAAAxV,EAAAmO,QAAAK,IAAA,YAAA,kBAAAK,cAAA,GAKA,OAJA2G,GAAAjB,WAAAzN,MACA2H,KAAA,gBACA7I,SAAA,UAEA4P,KAEAC,MACAtQ,GACAgN,MAAA,0BACAuD,aAAA,GACAC,YAAA,SACAC,OAAA,SAEAC,IACA1D,MAAA,iBACAuD,aAAA,IAEAI,IACA3D,MAAA,6BACAuD,aAAA,KAGA1D,QACArB,YAAA,WACAoF,QAAA5Q,EAAA,GAAAoH,EAAA,IACAyJ,QAAA,GAEAC,aACAC,wBAAA,EACAC,uBAAA,EACAC,wBAAA,EACAC,wBAAA,EACAC,gBAAA,EACAC,UAAA,GAEAC,aACAxW,EAAAmO,QAAAK,IAAA,aAAA,gBAAAK,cAAA,IACA7O,EAAAmO,QAAAK,IAAA,aAAA,eAAAK,cAAA,IACA7O,EAAAmO,QAAAK,IAAA,aAAA,uBAAAK,cAAA,OAIA7O,EAAAmO,QAAA0B,IAAA,QAAA,SACAnO,GAAA,QACA+K,MAAA,IACAC,OAAA,IACAuI,UAAA,IACAC,WAAA,MACAC,mBAAA,EACAC,QAAA9I,IAAA,GAAA+I,MAAA,GAAAC,OAAA,GAAA9I,KAAA,IACAiJ,QACAQ,aACAC,wBAAA,EACAI,gBAAA,EACAC,UAAA,GAEAjI,UAAA,WACA,GAAAkH,GAAAxV,EAAAmO,QAAAK,IAAA,YAAA,kBAAAK,cAAA,GAKA,OAJA2G,GAAAjB,WAAAzN,MACA2H,KAAA,iBACA7I,SAAA,UAEA4P,KAEAgB,aACAxW,EAAAmO,QAAAK,IAAA,aAAA,SAAAK,cAAA,OAIA7O,EAAAmO,QAAA0B,IAAA,QAAA,UACAnO,GAAA,SACA+K,MAAA,IACAC,OAAA,IACAuI,UAAA,IACAC,WAAA,IACAC,mBAAA,EACAC,QAAA9I,IAAA,GAAA+I,MAAA,GAAAC,OAAA,IAAA9I,KAAA,IACA+I,aAAA,qBACAE,MACAtQ,GACAyB,OACAlE,OACAkR,cAAA,OACAD,YAAA,OACA8C,cAAA,SAEAC,UAAA,aACA9Q,SAAA,SAGAiQ,IACA1D,MAAA,iBACAuD,aAAA,KAGAc,aACAxW,EAAAmO,QAAAK,IAAA,aAAA,gBAAAK,cAAA,IACA7O,EAAAmO,QAAAK,IAAA,aAAA,kBAAAK,cAAA,OAIA7O,EAAAmO,QAAA0B,IAAA,QAAA,iBACAnO,GAAA,gBACA+K,MAAA,IACAC,OAAA,GACAqJ,QAAA5Q,EAAA,EAAAoH,EAAA,KACA0I,UAAA,IACAC,WAAA,GACAC,mBAAA,EACAC,QAAA9I,IAAA,EAAA+I,MAAA,GAAAC,OAAA,GAAA9I,KAAA,IACAiJ,MACAtQ,GACAgN,MAAA,+CACAuD,aAAA,GACA9O,QAEAzB,EAAA,UACAmE,KAAA,IACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,UACAmE,KAAA,IACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,UACAmE,KAAA,IACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,UACAmE,KAAA,IACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,UACAmE,KAAA,IACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,IACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,IACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,IACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,IACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,qBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,oBAGAvR,EAAA,WACAmE,KAAA,KACA5G,OACAmR,KAAA,gBACA4C,cAAA,SACA9C,YAAA,OACAC,cAAA,QAEA8C,UAAA,sBAKAF,aACAxW,EAAAmO,QAAAK,IAAA,aAAA,iBAAAK,cAAA,OAIA7O,EAAAmO,QAAA0B,IAAA,QAAA,aACAnO,GAAA,YACA+K,MAAA,IACAC,OAAA,GACAuI,UAAA,IACAC,WAAA,GACAE,QAAA9I,IAAA,GAAA+I,MAAA,IAAAC,OAAA,EAAA9I,KAAA,IACA8B,UAAA,WACA,GAAAkH,GAAAxV,EAAAmO,QAAAK,IAAA,YAAA,kBAAAK,cAAA,GAMA,OALA2G,GAAAjB,WAAAzN,MACA2H,KAAA,sBACAkI,cAAA,YACA/Q,SAAA,UAEA4P,KAEAC,QACAQ,aACAC,wBAAA,EACAI,gBAAA,EACAC,UAAA,GAEAvE,QACAgE,QAAA,EACArF,YAAA,aACAoF,QAAA5Q,EAAA,GAAAoH,EAAA,GACAqK,gBAAA,GAEAJ,aACAxW,EAAAmO,QAAAK,IAAA,aAAA,aAAAK,cAAA,OAUA7O,EAAAmO,QAAA0B,IAAA,OAAA,wBACAtN,SACAkK,MAAA,IACAC,OAAA,IACAmK,mBAAA,EACA/N,iBAAA,IACAC,iBAAA,IACAuF,UAAAtO,EAAAmO,QAAAK,IAAA,YAAA,iBAAAK,cAAA,IACAiI,QACA9W,EAAAmO,QAAAK,IAAA,QAAA,eAAAK,cAAA,EAAAkI,oBAAA,KACA/W,EAAAmO,QAAAK,IAAA,QAAA,SAAAK,cAAA,EAAAkI,oBAAA,QAKA/W,EAAAgX,eAAAhX,EAAAmO,QAAAK,IAAA,OAAA,wBAEAxO,EAAAmO,QAAA0B,IAAA,OAAA,mBACApD,MAAA,IACAC,OAAA,IACAuI,UAAA,IACAC,WAAA,IACA2B,mBAAA,EACAvI,UAAAtO,EAAAmO,QAAAK,IAAA,YAAA,iBAAAK,cAAA,IACAiI,QACA9W,EAAAmO,QAAAK,IAAA,QAAA,UAAAK,cAAA,EAAAkI,oBAAA,MACA/W,EAAAmO,QAAAK,IAAA,QAAA,iBAAAK,cAAA,EAAAkI,oBAAA,KACA/W,EAAAmO,QAAAK,IAAA,QAAA,SACAK,cAAA,EAAAkI,oBAAA,IACA3B,QAAAE,OAAA,IACAG,MACAtQ,GACAgN,MAAA,0BACAuD,aAAA,GACAC,YAAA,SACAC,OAAA,aAKAqB,aAAA,IAGAjX,EAAAmO,QAAA0B,IAAA,OAAA,wBACAtN,SACAkK,MAAA,IACAC,OAAA,IACAmK,mBAAA,EACA/N,iBAAA,IACAC,iBAAA,IACAuF,UAAAtO,EAAAmO,QAAAK,IAAA,YAAA,iBAAAK,cAAA,IACAiI,QACA9W,EAAAmO,QAAAK,IAAA,QAAA,eAAAK,cAAA,EAAApC,MAAA,IAAAsK,oBAAA,IAAA,MACA/W,EAAAmO,QAAAK,IAAA,QAAA;AAAAK,cAAA,EAAAkI,oBAAA,IAAA,MACA/W,EAAAmO,QAAAK,IAAA,QAAA,SAAAK,cAAA,EAAApC,MAAA,IAAAsK,oBAAA,IAAA,SC3jCA/W,EAAAkX,UAAA,SAAA9V,EAAA8J,GAwDA,MAtDA9K,MAAA+W,aAAA,EAEA/W,KAAAgX,WAAA,KAGAhX,KAAAsB,GAAA,KAEAtB,KAAA8K,OAAAA,GAAA,KAIA9K,KAAAoC,OAGApC,KAAAyL,YAAA,KACA,mBAAAX,IAAAA,YAAAlL,GAAAqX,QAAAjX,KAAAyL,YAAAX,EAAAA,QAGA9K,KAAAgB,OAAApB,EAAAmO,QAAAS,MAAAxN,MAAApB,EAAAkX,UAAAI,eACAlX,KAAAgB,OAAAM,KAAAtB,KAAAsB,GAAAtB,KAAAgB,OAAAM,IAGAtB,KAAAgB,OAAA6P,aAAA,gBAAA7Q,MAAAgB,OAAA6P,OAAAG,OAAAhR,KAAAgB,OAAA6P,OAAAG,KAAA,GACAhR,KAAAgB,OAAA+P,aAAA,gBAAA/Q,MAAAgB,OAAA+P,OAAAC,OAAAhR,KAAAgB,OAAA+P,OAAAC,KAAA,GAMAhR,KAAAmX,aAAA3N,KAAAkF,MAAAlF,KAAAC,UAAAzJ,KAAAgB,SAGAhB,KAAAmC,SAEAnC,KAAAoX,SAAA,KAEApX,KAAAqX,kBAIArX,KAAA6I,QACA7I,KAAAgB,OAAAmN,UAEAnO,KAAAsX,aAIAtX,KAAAuX,iBACAC,aAAA,EACAC,UAAA,EACAC,OAAA,EACA9B,QAAA,GAGA5V,MAeAJ,EAAAkX,UAAAnJ,UAAAgK,SAAA,SAAAC,EAAAhJ,EAAAiJ,GACA,IAAAD,IAAAhJ,EACA,KAAA,gEAEA,IAAAkJ,GAAAlJ,EAAA,IAAAgJ,CACA,IAAAC,EAEA,GADAC,GAAA,IACA,gBAAAD,GACAC,GAAAD,MACA,CAAA,IAAA9H,MAAAC,QAAA6H,GAGA,KAAA,qEAFAC,IAAAD,EAAAvN,KAAA,KAKA,GAAAmG,GAAAzQ,KAAAgB,OAAAyP,MAIA,OAHAA,GAAA9J,QAAAmR,MAAA,GACArH,EAAA/J,KAAAoR,GAEAA,GAUAlY,EAAAkX,UAAAnJ,UAAA0J,gBAAA,WAGArX,KAAA8K,SACA9K,KAAAmC,MAAAnC,KAAA8K,OAAA3I,MACAnC,KAAAoX,SAAApX,KAAA8K,OAAAxJ,GAAA,IAAAtB,KAAAsB,GACAtB,KAAAmC,MAAAnC,KAAAoX,UAAApX,KAAAmC,MAAAnC,KAAAoX,cACAxX,EAAAkX,UAAAiB,SAAAC,WAAAxX,QAAA,SAAAoH,GACA5H,KAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAA5H,KAAAmC,MAAAnC,KAAAoX,UAAAxP,QACAiE,KAAA7L,SASAJ,EAAAkX,UAAAI,eACA7I,KAAA,GACAoC,UACAI,UACAE,WAYAnR,EAAAkX,UAAAiB,UACAE,OAAA,YAAA,SAAA,OAAA,QACAD,YAAA,cAAA,WAAA,QAAA,UACAE,gBAAA,cAAA,WAAA,SAAA,SAQAtY,EAAAkX,UAAAnJ,UAAAwK,UAAA,WACA,MAAAnY,MAAAyL,YAAAnK,GAAA,IAAAtB,KAAA8K,OAAAxJ,GAAA,IAAAtB,KAAAsB,IAWA1B,EAAAkX,UAAAnJ,UAAAyK,sBAAA,WACA,GAAAC,GAAArY,KAAAoC,IAAAkW,MAAAjX,OAAA6L,uBACA,OAAAmL,GAAA/L,QAOA1M,EAAAkX,UAAAnJ,UAAA4K,cAAA,WACA,QAAAvY,KAAAgB,OAAAwX,cACAxY,KAAAyL,YAAAgN,iBAAAC,UAAA1Y,KAAAyL,YAAAoK,YAAA8C,WASA/Y,EAAAkX,UAAAnJ,UAAAiL,aAAA,SAAA5J,GACA,GAAA6J,GAAA,SACA,IAAA,gBAAA7J,GACA6J,EAAA7J,MACA,IAAA,gBAAAA,GAAA,CACA,GAAAiD,GAAAjS,KAAAgB,OAAAiR,UAAA,IACA,IAAA,mBAAAjD,GAAAiD,GACA,KAAA,+BAEA4G,GAAA7J,EAAAiD,GAAAnD,WAAApK,QAAA,MAAA,IAEA,OAAA1E,KAAAmY,YAAA,IAAAU,GAAAnU,QAAA,kBAAA,MAYA9E,EAAAkX,UAAAnJ,UAAAmL,uBAAA,SAAA9J,GACA,MAAA,OAUApP,EAAAkX,UAAAnJ,UAAAoL,eAAA,SAAAzX,GACA,GAAAR,GAAApB,EAAAuB,OAAA,IAAAK,EAAAoD,QAAA,kBAAA,QACA,QAAA5D,EAAAU,SAAAV,EAAA+H,QAAA/H,EAAA+H,OAAAnG,OACA5B,EAAA+H,OAAA,GAEA,MASAjJ,EAAAkX,UAAAnJ,UAAAqL,iBAAA,WAoBA,MAnBAhZ,MAAA6I,KAAArI,QAAA,SAAAC,EAAAC,GAEAV,KAAA6I,KAAAnI,GAAAuY,OAAA,WACA,GAAAhH,GAAAjS,KAAAgB,OAAAiR,UAAA,KACA/Q,EAAA,EAEA,OADAlB,MAAA6I,KAAAnI,GAAAuR,KAAA/Q,EAAAlB,KAAA6I,KAAAnI,GAAAuR,GAAAnD,YACA5N,GACA2K,KAAA7L,MAEAA,KAAA6I,KAAAnI,GAAAiK,aAAA,WACA,MAAA3K,OACA6L,KAAA7L,MAEAA,KAAA6I,KAAAnI,GAAAwY,SAAA,WACA,GAAArO,GAAA7K,KAAA2K,cACAE,GAAAsO,gBAAAnZ,QAEA6L,KAAA7L,OACAA,KAAAoZ,yBACApZ,MAOAJ,EAAAkX,UAAAnJ,UAAAyL,uBAAA,WACA,MAAApZ,OAOAJ,EAAAkX,UAAAnJ,UAAAlL,WAAA,WAiBA,MAdAzC,MAAAoC,IAAAT,UAAA3B,KAAA8K,OAAA1I,IAAAkW,MAAAjW,OAAA,KACAZ,KAAA,QAAA,2BACAA,KAAA,KAAAzB,KAAAmY,YAAA,yBAGAnY,KAAAoC,IAAAiX,SAAArZ,KAAAoC,IAAAT,UAAAU,OAAA,YACAZ,KAAA,KAAAzB,KAAAmY,YAAA,SACA9V,OAAA,QAGArC,KAAAoC,IAAAkW,MAAAtY,KAAAoC,IAAAT,UAAAU,OAAA,KACAZ,KAAA,KAAAzB,KAAAmY,YAAA,eACA1W,KAAA,YAAA,QAAAzB,KAAAmY,YAAA,UAEAnY,MAQAJ,EAAAkX,UAAAnJ,UAAA2L,OAAA,WAMA,MALAtZ,MAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,QAAA,KACA1Q,KAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,SAAA1Q,KAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,QAAA,GACA1Q,KAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,QAAA,GAAA1Q,KAAAsB,GACAtB,KAAA8K,OAAA0O,oBAEAxZ,MAOAJ,EAAAkX,UAAAnJ,UAAA8L,SAAA,WAMA,MALAzZ,MAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,QAAA,KACA1Q,KAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,SAAA1Q,KAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,QAAA,GACA1Q,KAAA8K,OAAAyO,0BAAAvZ,KAAAgB,OAAA0P,QAAA,GAAA1Q,KAAAsB,GACAtB,KAAA8K,OAAA0O,oBAEAxZ,MAUAJ,EAAAkX,UAAAnJ,UAAA+L,yBAAA,SAAA1Y,EAAA6H,GACA,GAAAzE,GAAA,IACA,IAAA2L,MAAAC,QAAAhP,GAEA,IADA,GAAA2Y,GAAA,EACA,OAAAvV,GAAAuV,EAAA3Y,EAAA0B,QACA0B,EAAApE,KAAA0Z,yBAAA1Y,EAAA2Y,GAAA9Q,GACA8Q,QAGA,cAAA3Y,IACA,IAAA,SACA,IAAA,SACAoD,EAAApD,CACA,MACA,KAAA,SACA,GAAAA,EAAAoQ,eACA,GAAApQ,EAAA8P,MAAA,CACA,GAAA8I,GAAA,GAAAha,GAAAqK,KAAAC,MAAAlJ,EAAA8P,MACA1M,GAAAxE,EAAAia,eAAAzL,IAAApN,EAAAoQ,eAAApQ,EAAAqQ,eAAAuI,EAAA/R,QAAAgB,QAEAzE,GAAAxE,EAAAia,eAAAzL,IAAApN,EAAAoQ,eAAApQ,EAAAqQ,eAAAxI,GAMA,MAAAzE,IAOAxE,EAAAkX,UAAAnJ,UAAAmM,cAAA,SAAAC,GAEA,IAAA,IAAA,KAAApT,QAAAoT,MAAA,EACA,KAAA,4EAGA,IAAAC,GAAAD,EAAA,QACAE,EAAAja,KAAAgB,OAAAgZ,EAGA,KAAAvW,MAAAwW,EAAAjW,SAAAP,MAAAwW,EAAAhJ,SACA,QAAAgJ,EAAAjW,OAAAiW,EAAAhJ,QAIA,IAAAiJ,KACA,IAAAD,EAAAnJ,OAAA9Q,KAAA6I,KAAA,CACA,GAAA7I,KAAA6I,KAAAnG,OAKA,CACAwX,EAAAxa,EAAA8V,OAAAxV,KAAA6I,KAAA,SAAApI,GACA,GAAAmZ,GAAA,GAAAha,GAAAqK,KAAAC,MAAA+P,EAAAnJ,MACA,QAAA8I,EAAA/R,QAAApH,IAIA,IAAA0Z,GAAAD,EAAA,GAAAA,EAAA,EAQA,IAPAzW,MAAAwW,EAAAnH,gBACAoH,EAAA,IAAAC,EAAAF,EAAAnH,cAEArP,MAAAwW,EAAA/H,gBACAgI,EAAA,IAAAC,EAAAF,EAAA/H,cAGA,gBAAA+H,GAAA9H,WAAA,CAEA,GAAAiI,GAAAH,EAAA9H,WAAA,GACAkI,EAAAJ,EAAA9H,WAAA,EACA1O,OAAA2W,IAAA3W,MAAA4W,KACAH,EAAA,GAAAvW,KAAAE,IAAAqW,EAAA,GAAAE,IAEA3W,MAAA4W,KACAH,EAAA,GAAAvW,KAAAG,IAAAoW,EAAA,GAAAG,IAIA,OACA5W,MAAAwW,EAAAjW,OAAAkW,EAAA,GAAAD,EAAAjW,MACAP,MAAAwW,EAAAhJ,SAAAiJ,EAAA,GAAAD,EAAAhJ,SA9BA,MADAiJ,GAAAD,EAAA9H,eAsCA,MAAA,MAAA4H,GAAAtW,MAAAzD,KAAAmC,MAAAmD,QAAA7B,MAAAzD,KAAAmC,MAAAoD,SACAvF,KAAAmC,MAAAmD,MAAAtF,KAAAmC,MAAAoD,MAyBA3F,EAAAkX,UAAAnJ,UAAA2M,SAAA,SAAAP,EAAAQ,GACA,IAAA,IAAA,KAAA5T,QAAAoT,MAAA,EACA,KAAA,8BAEA,WAQAna,EAAAkX,UAAAnJ,UAAA6M,cAAA,SAAA/Z,EAAAa,GACA,GAAA,gBAAAtB,MAAAgB,OAAAmN,QACA,KAAA,cAAAnO,KAAAsB,GAAA,oCAGA,OADA,mBAAAA,KAAAA,EAAAtB,KAAA4Y,aAAAnY,IACAT,KAAAsX,SAAAhW,OACAtB,MAAAya,gBAAAnZ,IAGAtB,KAAAsX,SAAAhW,IACAuH,KAAApI,EACAia,MAAA,KACA5Z,SAAApB,EAAAuB,OAAAjB,KAAAyL,YAAArJ,IAAAf,OAAAmJ,YAAAnI,OAAA,OACAZ,KAAA,QAAA,yBACAA,KAAA,KAAAH,EAAA,aAEAtB,KAAA2a,cAAAla,GACAT,OAQAJ,EAAAkX,UAAAnJ,UAAAgN,cAAA,SAAAla,EAAAa,GAwBA,MAvBA,mBAAAA,KAAAA,EAAAtB,KAAA4Y,aAAAnY,IAEAT,KAAAsX,SAAAhW,GAAAR,SAAAI,KAAA,IACAlB,KAAAsX,SAAAhW,GAAAoZ,MAAA,KAEA1a,KAAAgB,OAAAmN,QAAAjN,MACAlB,KAAAsX,SAAAhW,GAAAR,SAAAI,KAAAtB,EAAAgJ,YAAAnI,EAAAT,KAAAgB,OAAAmN,QAAAjN,OAIAlB,KAAAgB,OAAAmN,QAAA+B,UACAlQ,KAAAsX,SAAAhW,GAAAR,SAAA4K,OAAA,SAAA,gBACAjK,KAAA,QAAA,2BACAA,KAAA,QAAA,SACAyH,KAAA,KACAyC,GAAA,QAAA,WACA3L,KAAA4a,eAAAtZ,IACAuK,KAAA7L,OAGAA,KAAAsX,SAAAhW,GAAAR,SAAA+H,MAAApI,IAEAT,KAAAya,gBAAAnZ,GACAtB,MASAJ,EAAAkX,UAAAnJ,UAAAiN,eAAA,SAAAna,EAAAa,GAYA,MAXA,gBAAAb,GACAa,EAAAb,EACA,mBAAAa,KACAA,EAAAtB,KAAA4Y,aAAAnY,IAEAT,KAAAsX,SAAAhW,KACA,gBAAAtB,MAAAsX,SAAAhW,GAAAR,UACAd,KAAAsX,SAAAhW,GAAAR,SAAA4L,eAEA1M,MAAAsX,SAAAhW,IAEAtB,MAOAJ,EAAAkX,UAAAnJ,UAAAkN,mBAAA,WACA,IAAA,GAAAvZ,KAAAtB,MAAAsX,SACAtX,KAAA4a,eAAAtZ,EAEA,OAAAtB,OAUAJ,EAAAkX,UAAAnJ,UAAA8M,gBAAA,SAAAnZ,GACA,GAAA,gBAAAA,GACA,KAAA,gDAeA,OAZAtB,MAAAsX,SAAAhW,GAAAR,SACAwB,MAAA,OAAA5C,EAAAob,MAAAC,MAAA,MACAzY,MAAA,MAAA5C,EAAAob,MAAAE,MAAA,MAEAhb,KAAAsX,SAAAhW,GAAAoZ,QACA1a,KAAAsX,SAAAhW,GAAAoZ,MAAA1a,KAAAsX,SAAAhW,GAAAR,SAAAuB,OAAA,OACAC,MAAA,WAAA,YACAb,KAAA,QAAA,yCAEAzB,KAAAsX,SAAAhW,GAAAoZ,MACApY,MAAA,OAAA,QACAA,MAAA,MAAA,QACAtC,MAOAJ,EAAAkX,UAAAnJ,UAAAsN,oBAAA,WACA,IAAA,GAAA3Z,KAAAtB,MAAAsX,SACAtX,KAAAya,gBAAAnZ,EAEA,OAAAtB,OAQAJ,EAAAkX,UAAAnJ,UAAAuN,kBAAA,SAAAlM,GAEA,GAAA,gBAAAhP,MAAAgB,OAAAmN,QAAA,CACA,GAAA7M,GAAAtB,KAAA4Y,aAAA5J,GAEAmM,EAAA,SAAAC,EAAAC,EAAA/H,GACA,GAAA1L,GAAA,IACA,IAAA,gBAAAwT,IAAA,OAAAA,EAAA,MAAA,KACA,IAAArL,MAAAC,QAAAqL,GACA,mBAAA/H,KAAAA,EAAA,OAEA1L,EADA,IAAAyT,EAAA3Y,OACA0Y,EAAAC,EAAA,IAEAA,EAAAC,OAAA,SAAAC,EAAAC,GACA,MAAA,QAAAlI,EACA8H,EAAAG,IAAAH,EAAAI,GACA,OAAAlI,EACA8H,EAAAG,IAAAH,EAAAI,GAEA,WAGA,IAAA,gBAAAH,GAAA,CACA,GAAAI,EACA,KAAA,GAAAC,KAAAL,GACAI,EAAAN,EAAAC,EAAAC,EAAAK,GAAAA,GACA,OAAA9T,EACAA,EAAA6T,EACA,QAAAnI,EACA1L,EAAAA,GAAA6T,EACA,OAAAnI,IACA1L,EAAAA,GAAA6T,GAIA,MAAA7T,IAGA+T,IACA,iBAAA3b,MAAAgB,OAAAmN,QAAA7C,KACAqQ,GAAAvL,KAAApQ,KAAAgB,OAAAmN,QAAA7C,OACA,gBAAAtL,MAAAgB,OAAAmN,QAAA7C,OACAqQ,EAAA3b,KAAAgB,OAAAmN,QAAA7C,KAGA,IAAAsQ,KACA,iBAAA5b,MAAAgB,OAAAmN,QAAAvC,KACAgQ,GAAAxL,KAAApQ,KAAAgB,OAAAmN,QAAAvC,OACA,gBAAA5L,MAAAgB,OAAAmN,QAAAvC,OACAgQ,EAAA5b,KAAAgB,OAAAmN,QAAAvC,KAGA,IAAAwP,KACAxb,GAAAkX,UAAAiB,SAAAC,WAAAxX,QAAA,SAAAoH,GACA,GAAAiU,GAAA,KAAAjU,CACAwT,GAAAxT,GAAA5H,KAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAAjB,QAAArF,MAAA,EACA8Z,EAAAS,IAAAT,EAAAxT,IACAiE,KAAA7L,MAEA,IAAA8b,GAAAX,EAAAC,EAAAO,GACAI,EAAAZ,EAAAC,EAAAQ,EAUA,OANAE,KAAAC,EACA/b,KAAAwa,cAAAxL,GAEAhP,KAAA4a,eAAA5L,GAGAhP,OAaAJ,EAAAkX,UAAAnJ,UAAAqO,OAAA,SAAA3I,EAAA4I,GAIA,GAHA,mBAAAA,KAAA,UAAA,YAAAtV,QAAAsV,MAAA,IACAA,EAAA,YAEAlM,MAAAC,QAAAqD,GAAA,QACA,IAAA6I,GAAA,SAAAlN,EAAAgN,GACA,GAAAG,IACAC,IAAA,SAAAC,EAAAC,GAAA,MAAAD,KAAAC,GACAC,IAAA,SAAAF,EAAAC,GAAA,MAAAD,GAAAC,GACAE,KAAA,SAAAH,EAAAC,GAAA,MAAAD,IAAAC,GACAG,IAAA,SAAAJ,EAAAC,GAAA,MAAAD,GAAAC,GACAI,KAAA,SAAAL,EAAAC,GAAA,MAAAD,IAAAC,GACAK,IAAA,SAAAN,EAAAC,GAAA,MAAAD,GAAAC,GAEA,SAAAvM,MAAAC,QAAAgM,KACA,IAAAA,EAAAtZ,OACAsM,EAAAgN,EAAA,MAAAA,EAAA,KACA,IAAAA,EAAAtZ,SAAAyZ,EAAAH,EAAA,MACAG,EAAAH,EAAA,IAAAhN,EAAAgN,EAAA,IAAAA,EAAA,MAKAY,IAQA,OAPA5c,MAAA6I,KAAArI,QAAA,SAAAwO,EAAA2K,GACA,GAAAzU,IAAA,CACAmO,GAAA7S,QAAA,SAAAwb,GACAE,EAAAlN,EAAAgN,KAAA9W,GAAA,KAEAA,GAAA0X,EAAAlW,KAAA,YAAAuV,EAAAtC,EAAA3K,KAEA4N,GAOAhd,EAAAkX,UAAAnJ,UAAAkP,cAAA,SAAAxJ,GAAA,MAAArT,MAAAgc,OAAA3I,EAAA,YAKAzT,EAAAkX,UAAAnJ,UAAAmP,eAAA,SAAAzJ,GAAA,MAAArT,MAAAgc,OAAA3I,EAAA,aAEAzT,EAAAkX,UAAAiB,SAAAE,MAAAzX,QAAA,SAAAuc,EAAApD,GACA,GAAAqD,GAAApd,EAAAkX,UAAAiB,SAAAC,WAAA2B,GACAsD,EAAA,KAAAF,CAGAnd,GAAAkX,UAAAnJ,UAAAoP,EAAA,WAAA,SAAA/N,EAAAyD,GAGA,MAFAA,GAAA,mBAAAA,MAAAA,EACAzS,KAAAkd,iBAAAF,EAAAhO,GAAA,EAAAyD,GACAzS,MAEAJ,EAAAkX,UAAAnJ,UAAAsP,EAAA,WAAA,SAAAjO,EAAAyD,GAGA,MAFAA,GAAA,mBAAAA,MAAAA,EACAzS,KAAAkd,iBAAAF,EAAAhO,GAAA,EAAAyD,GACAzS,MAGAJ,EAAAkX,UAAAnJ,UAAAoP,EAAA,qBAAA,SAAA1J,EAAAZ,GAEA,MADAA,GAAA,mBAAAA,MAAAA,EACAzS,KAAAmd,0BAAAH,GAAA,EAAA3J,EAAAZ,IAEA7S,EAAAkX,UAAAnJ,UAAAsP,EAAA,qBAAA,SAAA5J,EAAAZ,GAEA,MADAA,GAAA,mBAAAA,MAAAA,EACAzS,KAAAmd,0BAAAH,GAAA,EAAA3J,EAAAZ,IAGA7S,EAAAkX,UAAAnJ,UAAAoP,EAAA,eAAA,WAEA,MADA/c,MAAAod,oBAAAJ,GAAA,GACAhd,MAEAJ,EAAAkX,UAAAnJ,UAAAsP,EAAA,eAAA,WAEA,MADAjd,MAAAod,oBAAAJ,GAAA,GACAhd,QAYAJ,EAAAkX,UAAAnJ,UAAAuP,iBAAA,SAAAtV,EAAAoH,EAAAqO,EAAA5K,GAEA,GAAA,mBAAA7K,IAAAhI,EAAAkX,UAAAiB,SAAAC,WAAArR,QAAAiB,MAAA,EACA,KAAA,uDAEA,IAAA,mBAAAoH,GACA,KAAA,wDAEA,oBAAAqO,KACAA,GAAA,EAIA,KACA,GAAAxE,GAAA7Y,KAAA4Y,aAAA5J,GACA,MAAAsO,GACA,MAAAtd,MAIAyS,GACAzS,KAAAod,oBAAAxV,GAAAyV,GAIA3d,EAAAuB,OAAA,IAAA4X,GAAApO,QAAA,iBAAAzK,KAAAgB,OAAAqN,KAAA,IAAAzG,EAAAyV,EACA,IAAAE,GAAAvd,KAAA8Y,uBAAA9J,EACA,QAAAuO,GACA7d,EAAAuB,OAAA,IAAAsc,GAAA9S,QAAA,iBAAAzK,KAAAgB,OAAAqN,KAAA,eAAAzG,EAAAyV,EAIA,IAAAG,GAAAxd,KAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAAjB,QAAAkS,EAmBA,OAlBAwE,IAAAG,KAAA,GACAxd,KAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAAlB,KAAAmS,GAEAwE,GAAAG,KAAA,GACAxd,KAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAA6V,OAAAD,EAAA,GAIAxd,KAAAkb,kBAAAlM,GAGAhP,KAAA8K,OAAA4S,KAAA,kBAAA,GACA,aAAA9V,GAIA5H,KAAA8K,OAAA4S,KAAA,qBAAA1O,QAAAA,EAAA2O,OAAAN,IAAA,GAEArd,MAYAJ,EAAAkX,UAAAnJ,UAAAwP,0BAAA,SAAAvV,EAAAyV,EAAAhK,EAAAZ,GAGA,GAAA,mBAAA7K,IAAAhI,EAAAkX,UAAAiB,SAAAC,WAAArR,QAAAiB,MAAA,EACA,KAAA,gEAEA,OAAA,mBAAA5H,MAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAA5H,MACAqd,EAAA,mBAAAA,MAAAA,EACA5K,EAAA,mBAAAA,MAAAA,EACA1C,MAAAC,QAAAqD,KAAAA,MAGAZ,GACAzS,KAAAod,oBAAAxV,GAAAyV,GAIArd,KAAA8c,eAAAzJ,GAAA7S,QAAA,SAAAwO,GACAhP,KAAAkd,iBAAAtV,EAAAoH,EAAAqO,IACAxR,KAAA7L,OAEAA,OASAJ,EAAAkX,UAAAnJ,UAAAyP,oBAAA,SAAAxV,EAAAyV,GAGA,GAAA,mBAAAzV,IAAAhI,EAAAkX,UAAAiB,SAAAC,WAAArR,QAAAiB,MAAA,EACA,KAAA,0DAEA,IAAA,mBAAA5H,MAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAA,MAAA5H,KAIA,IAHA,mBAAAqd,KAAAA,GAAA,GAGAA,EACArd,KAAA6I,KAAArI,QAAA,SAAAwO,GACAhP,KAAAkd,iBAAAtV,EAAAoH,GAAA,IACAnD,KAAA7L,WACA,CACA,GAAA4d,GAAA5d,KAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAAhB,OACAgX,GAAApd,QAAA,SAAAc,GACA,GAAA0N,GAAAhP,KAAA+Y,eAAAzX,EACA,iBAAA0N,IAAA,OAAAA,GACAhP,KAAAkd,iBAAAtV,EAAAoH,GAAA,IAEAnD,KAAA7L,OACAA,KAAAmC,MAAAnC,KAAAoX,UAAAxP,MAMA,MAFA5H,MAAAuX,gBAAA3P,GAAAyV,EAEArd,MAOAJ,EAAAkX,UAAAnJ,UAAAkQ,eAAA,SAAAC,GACA,gBAAA9d,MAAAgB,OAAAoR,WACApQ,OAAAC,KAAAjC,KAAAgB,OAAAoR,WAAA5R,QAAA,SAAA6a,GACA,GAAA0C,GAAA,6BAAAnZ,KAAAyW,EACA0C,IACAD,EAAAnS,GAAAoS,EAAA,GAAA,IAAA1C,EAAArb,KAAAge,iBAAA3C,EAAArb,KAAAgB,OAAAoR,UAAAiJ,MACAxP,KAAA7L,QAeAJ,EAAAkX,UAAAnJ,UAAAqQ,iBAAA,SAAA3C,EAAAjJ,GAGA,GAAA6L,IACAC,KAAA7C,EAAA1U,QAAA,WAAA,EACAiD,MAAAyR,EAAA1U,QAAA,YAAA,EAGA,OAAA,UAAAqI,GAGAiP,EAAAC,SAAAxe,EAAAob,MAAAqD,SAAAF,EAAArU,UAAAlK,EAAAob,MAAAsD,UAGAhM,EAAA5R,QAAA,SAAA6d,GAGA,GAAA,gBAAAA,IAAA,OAAAA,EAEA,OAAAA,EAAA/L,QAGA,IAAA,MACAtS,KAAAkd,iBAAAmB,EAAAzW,OAAAoH,GAAA,EAAAqP,EAAA5L,UACA,MAGA,KAAA,QACAzS,KAAAkd,iBAAAmB,EAAAzW,OAAAoH,GAAA,EAAAqP,EAAA5L,UACA,MAGA,KAAA,SACA,GAAA6L,GAAAte,KAAAmC,MAAAnC,KAAAoX,UAAAiH,EAAAzW,QAAAjB,QAAA3G,KAAA4Y,aAAA5J,OAAA,EACAyD,EAAA4L,EAAA5L,YAAA6L,CACAte,MAAAkd,iBAAAmB,EAAAzW,OAAAoH,GAAAsP,EAAA7L,EACA,MAGA,KAAA,OACA,GAAA,gBAAA4L,GAAAE,KAAA,CACA,GAAAvX,GAAApH,EAAAgJ,YAAAoG,EAAAqP,EAAAE,KACA,iBAAAF,GAAAG,OACAC,OAAAjX,KAAAR,EAAAqX,EAAAG,QAEAC,OAAAC,SAAAH,KAAAvX,KAaA6E,KAAA7L,QAEA6L,KAAA7L,OASAJ,EAAAkX,UAAAnJ,UAAA1B,cAAA,WACA,GAAA0S,GAAA3e,KAAA8K,OAAAmB,eACA,QACAlH,EAAA4Z,EAAA5Z,EAAA/E,KAAA8K,OAAA9J,OAAAgU,OAAA5I,KACAD,EAAAwS,EAAAxS,EAAAnM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,MASAtM,EAAAkX,UAAAnJ,UAAAiR,WAAA,SAAAC,GACA,GAAAC,GAAA,MACAD,GAAAA,GAAAC,EACAD,EAAA,gBAAAA,GAAAA,EAAAE,cAAAD,GACA,OAAA,MAAA,OAAAnY,QAAAkY,MAAA,IAAAA,EAAAC,EACA,IAAA1a,EACA,QAAAya,GACA,IAAA,OACA,IACAza,EAAAoF,KAAAC,UAAAzJ,KAAA6I,MACA,MAAAmW,GACA5a,EAAA,KACAkF,QAAAC,MAAA,+CAAAvJ,KAAAmY,YAAA,IAAA6G,GAEA,KACA,KAAA,MACA,IAAA,MACA,IACA,GAAAC,GAAAzV,KAAAkF,MAAAlF,KAAAC,UAAAzJ,KAAA6I,MACA,IAAA,gBAAAoW,GACA7a,EAAA6a,EAAAnQ,eACA,IAAAiB,MAAAC,QAAAiP,GAEA,CACA,GAAAC,GAAA,QAAAL,EAAA,KAAA,IACA7W,EAAAhI,KAAAgB,OAAAyP,OAAApG,IAAA,SAAArC,GACA,MAAAwB,MAAAC,UAAAzB,KACAsC,KAAA4U,GAAA,IACA9a,GAAA4D,EAAAiX,EAAA5U,IAAA,SAAA8U,GACA,MAAAnf,MAAAgB,OAAAyP,OAAApG,IAAA,SAAAyG,GACA,MAAA,mBAAAqO,GAAArO,GACAtH,KAAAC,UAAA,MACA,gBAAA0V,GAAArO,IAAA,OAAAqO,EAAArO,GACAf,MAAAC,QAAAmP,EAAArO,IAAA,WAAAqO,EAAArO,GAAApO,OAAA,MAAA,aAEA8G,KAAAC,UAAA0V,EAAArO,MAEAxG,KAAA4U,IACArT,KAAA7L,OAAAsK,KAAA,UAhBAlG,GAAA,SAkBA,MAAA4a,GACA5a,EAAA,KACAkF,QAAAC,MAAA,8CAAAvJ,KAAAmY,YAAA,IAAA6G,IAIA,MAAA5a,IAOAxE,EAAAkX,UAAAnJ,UAAAyR,KAAA,WAMA,MALApf,MAAAoC,IAAAT,UAAAF,KAAA,YAAA,aAAAzB,KAAA8K,OAAA9J,OAAAqe,SAAA1J,OAAA5Q,EAAA,IAAA/E,KAAA8K,OAAA9J,OAAAqe,SAAA1J,OAAAxJ,EAAA,KACAnM,KAAAoC,IAAAiX,SACA5X,KAAA,QAAAzB,KAAA8K,OAAA9J,OAAAqe,SAAAhT,OACA5K,KAAA,SAAAzB,KAAA8K,OAAA9J,OAAAqe,SAAA/S,QACAtM,KAAAib,sBACAjb,MAQAJ,EAAAkX,UAAAnJ,UAAA2R,MAAA,WAEAtf,KAAA6a,oBAIA,IAAA1S,GAAAnI,KAAAyL,YAAA8T,IAAAC,QAAAxf,KAAAmC,MAAAnC,KAAAgB,OAAAyP,OAOA,OANAtI,GAAA0B,KAAA,SAAA4V,GACAzf,KAAA6I,KAAA4W,EAAAxY,KACAjH,KAAAgZ,mBACAhZ,KAAA+W,aAAA,GACAlL,KAAA7L,OAEAmI,GAQAvI,EAAA8f,WAAA,WACA,GAAA1R,MACA2R,IAwFA,OAhFA3R,GAAAI,IAAA,SAAAE,EAAAtN,EAAA8J,GACA,GAAAwD,EAEA,CAAA,GAAAqR,EAAArR,GAAA,CACA,GAAA,gBAAAtN,GACA,KAAA,2CAAAsN,EAAA,GAEA,OAAA,IAAAqR,GAAArR,GAAAtN,EAAA8J,GAGA,KAAA,eAAAwD,EAAA,cARA,MAAA,OAkBAN,EAAAwB,IAAA,SAAAlB,EAAAsR,GACA,GAAAA,EAAA,CACA,GAAA,kBAAAA,GACA,KAAA,6BAAAtR,EAAA,wCAEAqR,GAAArR,GAAAsR,EACAD,EAAArR,GAAAX,UAAA,GAAA/N,GAAAkX,qBAGA6I,GAAArR,IAUAN,EAAAyB,IAAA,SAAAnB,EAAAsR,GACA,GAAAD,EAAArR,GACA,KAAA,wCAAAA,CAEAN,GAAAwB,IAAAlB,EAAAsR,IAWA5R,EAAA6R,OAAA,SAAAC,EAAAxR,EAAAyR,GAEAA,EAAAA,KAEA,IAAAjV,GAAA6U,EAAAG,EACA,KAAAhV,EACA,KAAA,iEAEA,IAAA,gBAAAiV,GACA,KAAA,kDAEA,IAAAC,GAAApgB,EAAAyN,SAAAvC,EAAAiV,EAGA,OADAJ,GAAArR,GAAA0R,EACAA,GAQAhS,EAAA0B,KAAA,WACA,MAAA1N,QAAAC,KAAA0d,IAGA3R,KC1nCApO,EAAA8f,WAAAjQ,IAAA,mBAAA,SAAAzO,GASA,GAPAhB,KAAAkX,eACAzF,MAAA,UACA4B,YAGArS,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,gBAEAnH,MAAAC,QAAAhP,EAAAqS,SACA,KAAA,iFAiFA,OA7EAzT,GAAAkX,UAAArJ,MAAAzN,KAAA0N,WAEA1N,KAAAigB,OAAA,WACA,GAAAC,GAAAlgB,KAEAmgB,EAAAngB,KAAAgc,OAAAhc,KAAAgB,OAAAqS,QAAA,YAEAyK,EAAA9d,KAAAoC,IAAAkW,MACAxV,UAAA,sBAAAod,EAAAlf,OAAAqN,MACAxF,KAAAsX,EAAA,SAAA1f,GAAA,MAAAA,GAAAyf,EAAAlf,OAAAiR,WAGA6L,GAAAsC,QACA/d,OAAA,QACAZ,KAAA,QAAA,iBAAAzB,KAAAgB,OAAAqN,MACA5M,KAAA,KAAA,SAAAhB,GAAA,MAAAyf,GAAAtH,aAAAnY,KAEAqd,EACArc,KAAA,IAAA,SAAAhB,GAAA,MAAAyf,GAAApV,OAAAoV,QAAAzf,EAAAyf,EAAAlf,OAAA6P,OAAAC,UACArP,KAAA,QAAA,GACAA,KAAA,SAAAye,EAAApV,OAAA9J,OAAAsL,QACA7K,KAAA,OAAA,SAAAhB,GAAA,MAAAyf,GAAAxG,yBAAAwG,EAAAlf,OAAAyQ,MAAAhR,KAEAqd,EAAAuC,OAAA3T,SAGA1M,KAAA6d,eAAAC,IAIA9d,KAAAya,gBAAA,SAAAnZ,GACA,GAAA,gBAAAA,GACA,KAAA,gDAEA,KAAAtB,KAAAsX,SAAAhW,GACA,KAAA,kEAEA,IAAA4K,GAAAE,EAAAkU,EAAAC,EAAAC,EACArS,EAAAnO,KAAAsX,SAAAhW,GACAmf,EAAA,EACAC,EAAA,EACAtb,EAAAsb,EAAA,EACA1U,EAAAhM,KAAAiM,gBAEA0U,EAAAxS,EAAArN,SAAAO,OAAA6L,wBACA0T,EAAA5gB,KAAA8K,OAAA9J,OAAAsL,QAAAtM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,IAAAlM,KAAA8K,OAAA9J,OAAAgU,OAAAE,QACA2L,EAAA7gB,KAAA8K,OAAA9J,OAAAqL,OAAArM,KAAA8K,OAAA9J,OAAAgU,OAAA5I,KAAApM,KAAA8K,OAAA9J,OAAAgU,OAAAC,OAEA6L,EAAA9gB,KAAA8K,OAAAiW,QAAA5S,EAAAtF,KAAA7I,KAAAgB,OAAA6P,OAAAC,QACAkQ,EAAAJ,EAAA,EAGAK,EAAAtd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAyU,EAAA,GACAI,EAAAvd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAyU,EAAAD,EAAA,EACAzU,GAAAJ,EAAAjH,EAAA+b,EAAAH,EAAAtU,MAAA,EAAA6U,EAAAD,EACAT,EAAAG,EAAAtU,MAAA,EAAAoU,EAAAS,EAAAD,EAAA7b,EACAub,EAAArU,OAAAoU,EAAAD,EAAAG,EAAAI,GACA9U,EAAAF,EAAAG,EAAA6U,GAAAL,EAAArU,OAAAoU,EAAAD,GACAH,EAAA,OACAC,EAAAI,EAAArU,OAAAoU,IAEAxU,EAAAF,EAAAG,EAAA6U,EAAAN,EAAAD,EACAH,EAAA,KACAC,EAAA,EAAAG,EAAAD,GAGAtS,EAAArN,SAAAwB,MAAA,OAAA8J,EAAA,MAAA9J,MAAA,MAAA4J,EAAA,MAEAiC,EAAAuM,QACAvM,EAAAuM,MAAAvM,EAAArN,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA6L,EAAAuM,MACAjZ,KAAA,QAAA,+BAAA6e,GACAhe,MAAA,OAAAke,EAAA,MACAle,MAAA,MAAAie,EAAA,OAGAvgB,OClGAJ,EAAA8f,WAAAjQ,IAAA,SAAA,SAAAzO,GA2LA,MAxLAhB,MAAAkX,eACA1F,WAAA,GACAL,YAAA,SACAM,MAAA,UACAwB,aAAA,EACAlC,QACAC,KAAA,GAEAiB,SAAA,KACAkP,sBACAtN,YAAA,WACAC,UAAA,UAEAsN,2BAAA,GAEApgB,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,eAGAtX,EAAAkX,UAAArJ,MAAAzN,KAAA0N,WAGA1N,KAAAya,gBAAA,SAAAnZ,GACA,GAAA,gBAAAA,GACA,KAAA,gDAEA,KAAAtB,KAAAsX,SAAAhW,GACA,KAAA,kEAEA,IAYA8K,GAAAkU,EAAAE,EAZArS,EAAAnO,KAAAsX,SAAAhW,GACAkQ,EAAAxR,KAAA0Z,yBAAA1Z,KAAAgB,OAAAwQ,WAAArD,EAAAtF,MACA4X,EAAA,EACAC,EAAA,EACAW,EAAA,EACArV,EAAAhM,KAAAiM,gBACA6U,EAAA9gB,KAAA8K,OAAAiW,QAAA5S,EAAAtF,KAAA7I,KAAAgB,OAAA6P,OAAAC,QACAwQ,EAAA,IAAAthB,KAAAgB,OAAA+P,OAAAC,KAAA,SACAgQ,EAAAhhB,KAAA8K,OAAAwW,GAAAnT,EAAAtF,KAAA7I,KAAAgB,OAAA+P,OAAAD,QACA6P,EAAAxS,EAAArN,SAAAO,OAAA6L,wBAEA9H,EAAAzB,KAAA4d,KAAA/P,EAAA7N,KAAA6d,GAEAV,IAAA9gB,KAAA8K,OAAA9J,OAAAqL,MAAA,GACAD,EAAAJ,EAAAjH,EAAA+b,EAAA1b,EAAAqb,EAAAC,EACAJ,EAAA,OACAE,GAAA,GAAAC,EAAAC,KAEAtU,EAAAJ,EAAAjH,EAAA+b,EAAAH,EAAAtU,MAAAjH,EAAAqb,EAAAC,EACAJ,EAAA,QACAE,EAAAG,EAAAtU,MAAAqU,EAGA,IACAxU,GAAAqU,EADAK,EAAA5gB,KAAA8K,OAAA9J,OAAAsL,QAAAtM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,IAAAlM,KAAA8K,OAAA9J,OAAAgU,OAAAE,OAEA8L,GAAAL,EAAArU,OAAA,GAAA,GACAJ,EAAAF,EAAAG,EAAA6U,EAAA,IAAAP,EAAAY,EACAd,EAAAc,GACAL,EAAAL,EAAArU,OAAA,GAAAsU,GACA1U,EAAAF,EAAAG,EAAA6U,EAAAP,EAAAY,EAAAV,EAAArU,OACAiU,EAAAI,EAAArU,OAAA,EAAAmU,EAAAY,IAEAnV,EAAAF,EAAAG,EAAA6U,EAAAL,EAAArU,OAAA,EACAiU,EAAAI,EAAArU,OAAA,EAAAmU,GAGAtS,EAAArN,SAAAwB,MAAA,OAAA8J,EAAA,MAAA9J,MAAA,MAAA4J,EAAA,MAEAiC,EAAAuM,QACAvM,EAAAuM,MAAAvM,EAAArN,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA6L,EAAAuM,MACAjZ,KAAA,QAAA,+BAAA6e,GACAhe,MAAA,OAAAke,EAAA,MACAle,MAAA,MAAAie,EAAA,OAIAvgB,KAAAigB,OAAA,WAEA,GAAAc,GAAA,UACAO,EAAA,IAAAthB,KAAAgB,OAAA+P,OAAAC,KAAA,QAGA,IAAAhR,KAAAgB,OAAAmgB,sBACAnhB,KAAAgB,OAAAyP,OAAA9J,QAAA3G,KAAAgB,OAAAmgB,qBAAAtN,gBAAA,GACA7T,KAAAgB,OAAAyP,OAAA9J,QAAA3G,KAAAgB,OAAAmgB,qBAAArN,cAAA,EAAA,CAEA,GAAA2N,GAAAzhB,KAAAoC,IAAAkW,MACAxV,UAAA,qDACA+F,KAAA7I,KAAA6I,KAAA,SAAApI,GAAA,MAAAA,GAAAT,KAAAgB,OAAAiR,WAAApG,KAAA7L,MAEAyhB,GAAArB,QACA/d,OAAA,QACAZ,KAAA,QAAA,gDACAA,KAAA,KAAA,SAAAhB,GAAA,MAAAT,MAAA4Y,aAAAnY,GAAA,OAAAoL,KAAA7L,OACAyB,KAAA,YAAA,gBAAAgC,MAAAzD,KAAA8K,OAAA9J,OAAAsL,QAAA,EAAAtM,KAAA8K,OAAA9J,OAAAsL,QAAA,IAEA,IAAAoV,GAAA,SAAAjhB,GACA,GAAAsE,GAAA/E,KAAA8K,OAAAiW,GAAAtgB,EAAAT,KAAAgB,OAAAmgB,qBAAAtN,cACA1H,EAAAnM,KAAA8K,OAAAwW,GAAA7gB,EAAAT,KAAAgB,OAAA+P,OAAAD,OAGA,OAFArN,OAAAsB,KAAAA,GAAA,KACAtB,MAAA0I,KAAAA,GAAA,KACA,aAAApH,EAAA,IAAAoH,EAAA,KACAN,KAAA7L,MACA2hB,EAAA,SAAAlhB,GACA,MAAAT,MAAA8K,OAAAiW,GAAAtgB,EAAAT,KAAAgB,OAAAmgB,qBAAArN,YACA9T,KAAA8K,OAAAiW,GAAAtgB,EAAAT,KAAAgB,OAAAmgB,qBAAAtN,eACAhI,KAAA7L,MACA4hB,EAAA,CACA5hB,MAAAuY,gBACAkJ,EACAjJ,aACAqJ,SAAA7hB,KAAAgB,OAAAwX,WAAAqJ,UAAA,GACAC,KAAA9hB,KAAAgB,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,YAAAigB,GACAjgB,KAAA,QAAAkgB,GAAAlgB,KAAA,SAAAmgB,GAEAH,EACAhgB,KAAA,YAAAigB,GACAjgB,KAAA,QAAAkgB,GAAAlgB,KAAA,SAAAmgB,GAGAH,EAAApB,OAAA3T,SAIA,GAAAqV,GAAA/hB,KAAAoC,IAAAkW,MACAxV,UAAA,wDACA+F,KAAA7I,KAAA6I,KAAA,SAAApI,GAAA,MAAAA,GAAAT,KAAAgB,OAAAiR,WAAApG,KAAA7L,OAGAgiB,EAAAve,MAAAzD,KAAA8K,OAAA9J,OAAAsL,QAAA,EAAAtM,KAAA8K,OAAA9J,OAAAsL,MACAyV,GAAA3B,QACA/d,OAAA,QACAZ,KAAA,QAAA,mDACAA,KAAA,KAAA,SAAAhB,GAAA,MAAAT,MAAA4Y,aAAAnY,GAAA,UAAAoL,KAAA7L,OACAyB,KAAA,YAAA,eAAAugB,EAAA,IAGA,IAAA1L,GAAA,SAAA7V,GACA,GAAAsE,GAAA/E,KAAA8K,OAAAiW,GAAAtgB,EAAAT,KAAAgB,OAAA6P,OAAAC,QACA3E,EAAAnM,KAAA8K,OAAAwW,GAAA7gB,EAAAT,KAAAgB,OAAA+P,OAAAD,OAGA,OAFArN,OAAAsB,KAAAA,GAAA,KACAtB,MAAA0I,KAAAA,GAAA,KACA,aAAApH,EAAA,IAAAoH,EAAA,KACAN,KAAA7L,MAEAyT,EAAA,SAAAhT,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAyQ,MAAAhR,IAAAoL,KAAA7L,MACAiT,EAAA,SAAAxS,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAiS,aAAAxS,IAAAoL,KAAA7L,MAEA6R,EAAAnS,EAAA0C,IAAA6f,SACAnQ,KAAA,SAAArR,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAwQ,WAAA/Q,IAAAoL,KAAA7L,OACAqO,KAAA,SAAA5N,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAmQ,YAAA1Q,IAAAoL,KAAA7L,MAGAA,MAAAuY,gBACAwJ,EACAvJ,aACAqJ,SAAA7hB,KAAAgB,OAAAwX,WAAAqJ,UAAA,GACAC,KAAA9hB,KAAAgB,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,YAAA6U,GACA7U,KAAA,OAAAgS,GACAhS,KAAA,eAAAwR,GACAxR,KAAA,IAAAoQ,GAEAkQ,EACAtgB,KAAA,YAAA6U,GACA7U,KAAA,OAAAgS,GACAhS,KAAA,eAAAwR,GACAxR,KAAA,IAAAoQ,GAIAkQ,EAAA1B,OAAA3T,SAGAqV,EAAApW,GAAA,sBAAA,SAAAuW,GACAliB,KAAA8K,OAAA4S,KAAA,kBAAAwE,GAAA,IACArW,KAAA7L,OAGAA,KAAA6d,eAAAkE,IAIA/hB,OC1LAJ,EAAA8f,WAAAjQ,IAAA,QAAA,SAAAzO,GAgfA,MA1eAhB,MAAAkX,eAEAvG,OAAA,mBACAc,MAAA,UACA0Q,gBAAA,GACAC,mBAAA,EACAC,YAAA,GACAC,qBAAA,EACAC,uBAAA,IAEAvhB,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,eAGAtX,EAAAkX,UAAArJ,MAAAzN,KAAA0N,WAOA1N,KAAA8Y,uBAAA,SAAA9J,GACA,MAAAhP,MAAA4Y,aAAA5J,GAAA,eAOAhP,KAAAwiB,eAAA,WACA,MAAA,GAAAxiB,KAAAgB,OAAAshB,qBACAtiB,KAAAgB,OAAAmhB,gBACAniB,KAAAgB,OAAAohB,mBACApiB,KAAAgB,OAAAqhB,YACAriB,KAAAgB,OAAAuhB,wBASAviB,KAAAyiB,eAAA,EAQAziB,KAAA0iB,OAAA,EAMA1iB,KAAA2iB,kBAAAC,MAOA5iB,KAAA6iB,aAAA,WA8HA,MAtHA7iB,MAAA8iB,cAAA,SAAAC,EAAAC,GACA,IACA,GAAAC,GAAAjjB,KAAAoC,IAAAkW,MAAAjW,OAAA,QACAZ,KAAA,IAAA,GAAAA,KAAA,IAAA,GAAAA,KAAA,QAAA,gCACAa,MAAA,YAAA0gB,GACA9Z,KAAA6Z,EAAA,KACAG,EAAAD,EAAA5hB,OAAA8hB,UAAA9W,KAEA,OADA4W,GAAAvW,SACAwW,EACA,MAAAlE,GACA,MAAA,KAKAhf,KAAA0iB,OAAA,EACA1iB,KAAA2iB,kBAAAC,MAEA5iB,KAAA6I,KAAAwB,IAAA,SAAA5J,EAAA2iB,GAIA,GAAApjB,KAAA6I,KAAAua,GAAAC,SAAArjB,KAAA6I,KAAAua,GAAAC,QAAA1c,QAAA,KAAA,CACA,GAAAtG,GAAAL,KAAA6I,KAAAua,GAAAC,QAAAhjB,MAAA,IACAL,MAAA6I,KAAAua,GAAAC,QAAAhjB,EAAA,GACAL,KAAA6I,KAAAua,GAAAE,aAAAjjB,EAAA,GAgBA,GAZAL,KAAA6I,KAAAua,GAAAG,cAAAvjB,KAAA6I,KAAAua,GAAAI,YAAAxjB,KAAAyiB,gBAAAc,cAIAvjB,KAAA6I,KAAAua,GAAAK,eACAne,MAAAtF,KAAA8K,OAAAiW,QAAApd,KAAAG,IAAArD,EAAA6E,MAAAtF,KAAAmC,MAAAmD,QACAC,IAAAvF,KAAA8K,OAAAiW,QAAApd,KAAAE,IAAApD,EAAA8E,IAAAvF,KAAAmC,MAAAoD,OAEAvF,KAAA6I,KAAAua,GAAAK,cAAAP,YAAAljB,KAAA8iB,cAAA9iB,KAAA6I,KAAAua,GAAAL,UAAA/iB,KAAAgB,OAAAmhB,iBACAniB,KAAA6I,KAAAua,GAAAK,cAAApX,MAAArM,KAAA6I,KAAAua,GAAAK,cAAAle,IAAAvF,KAAA6I,KAAAua,GAAAK,cAAAne,MAEAtF,KAAA6I,KAAAua,GAAAK,cAAAC,YAAA,SACA1jB,KAAA6I,KAAAua,GAAAK,cAAApX,MAAArM,KAAA6I,KAAAua,GAAAK,cAAAP,YAAA,CACA,GAAAziB,EAAA6E,MAAAtF,KAAAmC,MAAAmD,MACAtF,KAAA6I,KAAAua,GAAAK,cAAAle,IAAAvF,KAAA6I,KAAAua,GAAAK,cAAAne,MACAtF,KAAA6I,KAAAua,GAAAK,cAAAP,YACAljB,KAAAgB,OAAAmhB,gBACAniB,KAAA6I,KAAAua,GAAAK,cAAAC,YAAA,YACA,IAAAjjB,EAAA8E,IAAAvF,KAAAmC,MAAAoD,IACAvF,KAAA6I,KAAAua,GAAAK,cAAAne,MAAAtF,KAAA6I,KAAAua,GAAAK,cAAAle,IACAvF,KAAA6I,KAAAua,GAAAK,cAAAP,YACAljB,KAAAgB,OAAAmhB,gBACAniB,KAAA6I,KAAAua,GAAAK,cAAAC,YAAA,UACA,CACA,GAAAC,IAAA3jB,KAAA6I,KAAAua,GAAAK,cAAAP,YAAAljB,KAAA6I,KAAAua,GAAAK,cAAApX,OAAA,EACArM,KAAAgB,OAAAmhB,eACAniB,MAAA6I,KAAAua,GAAAK,cAAAne,MAAAqe,EAAA3jB,KAAA8K,OAAAiW,QAAA/gB,KAAAmC,MAAAmD,QACAtF,KAAA6I,KAAAua,GAAAK,cAAAne,MAAAtF,KAAA8K,OAAAiW,QAAA/gB,KAAAmC,MAAAmD,OACAtF,KAAA6I,KAAAua,GAAAK,cAAAle,IAAAvF,KAAA6I,KAAAua,GAAAK,cAAAne,MAAAtF,KAAA6I,KAAAua,GAAAK,cAAAP,YACAljB,KAAA6I,KAAAua,GAAAK,cAAAC,YAAA,SACA1jB,KAAA6I,KAAAua,GAAAK,cAAAle,IAAAoe,EAAA3jB,KAAA8K,OAAAiW,QAAA/gB,KAAAmC,MAAAoD,MACAvF,KAAA6I,KAAAua,GAAAK,cAAAle,IAAAvF,KAAA8K,OAAAiW,QAAA/gB,KAAAmC,MAAAoD,KACAvF,KAAA6I,KAAAua,GAAAK,cAAAne,MAAAtF,KAAA6I,KAAAua,GAAAK,cAAAle,IAAAvF,KAAA6I,KAAAua,GAAAK,cAAAP,YACAljB,KAAA6I,KAAAua,GAAAK,cAAAC,YAAA,QAEA1jB,KAAA6I,KAAAua,GAAAK,cAAAne,OAAAqe,EACA3jB,KAAA6I,KAAAua,GAAAK,cAAAle,KAAAoe,GAGA3jB,KAAA6I,KAAAua,GAAAK,cAAApX,MAAArM,KAAA6I,KAAAua,GAAAK,cAAAle,IAAAvF,KAAA6I,KAAAua,GAAAK,cAAAne,MAGAtF,KAAA6I,KAAAua,GAAAK,cAAAne,OAAAtF,KAAAgB,OAAAshB,qBACAtiB,KAAA6I,KAAAua,GAAAK,cAAAle,KAAAvF,KAAAgB,OAAAshB,qBACAtiB,KAAA6I,KAAAua,GAAAK,cAAApX,OAAA,EAAArM,KAAAgB,OAAAshB,qBAGAtiB,KAAA6I,KAAAua,GAAAQ,gBACAte,MAAAtF,KAAA8K,OAAAiW,QAAA8C,OAAA7jB,KAAA6I,KAAAua,GAAAK,cAAAne,OACAC,IAAAvF,KAAA8K,OAAAiW,QAAA8C,OAAA7jB,KAAA6I,KAAAua,GAAAK,cAAAle,MAEAvF,KAAA6I,KAAAua,GAAAQ,eAAAvX,MAAArM,KAAA6I,KAAAua,GAAAQ,eAAAre,IAAAvF,KAAA6I,KAAAua,GAAAQ,eAAAte,MAGAtF,KAAA6I,KAAAua,GAAAU,MAAA,IAEA,KADA,GAAAC,GAAA,EACA,OAAA/jB,KAAA6I,KAAAua,GAAAU,OAAA,CACA,GAAAE,IAAA,CACAhkB,MAAA2iB,iBAAAoB,GAAA1Z,IAAA,SAAA4Z,GACA,IAAAD,EAAA,CACA,GAAAE,GAAAvgB,KAAAE,IAAAogB,EAAAR,cAAAne,MAAAtF,KAAAyjB,cAAAne,OACA6e,EAAAxgB,KAAAG,IAAAmgB,EAAAR,cAAAle,IAAAvF,KAAAyjB,cAAAle,IACA4e,GAAAD,EAAAD,EAAAR,cAAApX,MAAArM,KAAAyjB,cAAApX,QACA2X,GAAA,KAGAnY,KAAA7L,KAAA6I,KAAAua,KACAY,GAIAD,IACAA,EAAA/jB,KAAA0iB,SACA1iB,KAAA0iB,OAAAqB,EACA/jB,KAAA2iB,iBAAAoB,SANA/jB,KAAA6I,KAAAua,GAAAU,MAAAC,EACA/jB,KAAA2iB,iBAAAoB,GAAArd,KAAA1G,KAAA6I,KAAAua,KAWApjB,KAAA6I,KAAAua,GAAAtY,OAAA9K,KACAA,KAAA6I,KAAAua,GAAAI,YAAAnZ,IAAA,SAAA5J,EAAA2jB,GACApkB,KAAA6I,KAAAua,GAAAI,YAAAY,GAAAtZ,OAAA9K,KAAA6I,KAAAua,GACApjB,KAAA6I,KAAAua,GAAAI,YAAAY,GAAAC,MAAAha,IAAA,SAAA5J,EAAAue,GACAhf,KAAA6I,KAAAua,GAAAI,YAAAY,GAAAC,MAAArF,GAAAlU,OAAA9K,KAAA6I,KAAAua,GAAAI,YAAAY,IACAvY,KAAA7L,QACA6L,KAAA7L,QAEA6L,KAAA7L,OACAA,MAMAA,KAAAigB,OAAA,WAEA,GAAAC,GAAAlgB,IACAA,MAAA6iB,cAEA,IAAAxW,GAAAC,EAAAvH,EAAAoH,EAGA2R,EAAA9d,KAAAoC,IAAAkW,MAAAxV,UAAA,yBACA+F,KAAA7I,KAAA6I,KAAA,SAAApI,GAAA,MAAAA,GAAAsiB,WAEAjF,GAAAsC,QAAA/d,OAAA,KACAZ,KAAA,QAAA,uBAEAqc,EAAArc,KAAA,KAAA,SAAAhB,GAAA,MAAAT,MAAA4Y,aAAAnY,IAAAoL,KAAA7L,OACA+C,KAAA,SAAA2Q,GAEA,GAAA7I,GAAA6I,EAAA5I,OAGAwZ,EAAA5kB,EAAAuB,OAAAjB,MAAA8C,UAAA,2DACA+F,MAAA6K,GAAA,SAAAjT,GAAA,MAAAoK,GAAAiO,uBAAArY,IAEA6jB,GAAAlE,QAAA/d,OAAA,QACAZ,KAAA,QAAA,sDAEA6iB,EACA7iB,KAAA,KAAA,SAAAhB,GACA,MAAAoK,GAAAiO,uBAAArY,KAEAgB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAEA7gB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAGAjW,EAAA,SAAA5L,GACA,MAAAA,GAAAgjB,cAAApX,OAEAC,EAAA,WACA,MAAAzB,GAAA2X,iBAAA3X,EAAA7J,OAAAuhB,wBAEAxd,EAAA,SAAAtE,GACA,MAAAA,GAAAgjB,cAAAne,OAEA6G,EAAA,SAAA1L,GACA,OAAAA,EAAAqjB,MAAA,GAAAjZ,EAAA2X,kBAEA3X,EAAA0N,gBACA+L,EACA9L,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEAmY,EACA7iB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAGAmY,EAAAjE,OAAA3T,QAGA,IAAA6X,GAAA,SAAA9jB,GAAA,MAAAyf,GAAAxG,yBAAAwG,EAAAlf,OAAAyQ,MAAAhR,IACA+jB,EAAA,SAAA/jB,GAAA,MAAAyf,GAAAxG,yBAAAwG,EAAAlf,OAAA2P,OAAAlQ,IACAgkB,EAAA/kB,EAAAuB,OAAAjB,MAAA8C,UAAA,wCACA+F,MAAA6K,GAAA,SAAAjT,GAAA,MAAAA,GAAAsiB,UAAA,cACAzgB,OAAAmR,KAAA8Q,EAAA5T,OAAA6T,GAEAC,GAAArE,QAAA/d,OAAA,QACAZ,KAAA,QAAA,mCAEA4K,EAAA,SAAA5L,GACA,MAAAoK,GAAAC,OAAAiW,QAAAtgB,EAAA8E,KAAAsF,EAAAC,OAAAiW,QAAAtgB,EAAA6E,QAEAgH,EAAA,WACA,MAAA,IAEAvH,EAAA,SAAAtE,GACA,MAAAoK,GAAAC,OAAAiW,QAAAtgB,EAAA6E,QAEA6G,EAAA,SAAA1L,GACA,OAAAA,EAAAqjB,MAAA,GAAAjZ,EAAA2X,iBACA3X,EAAA7J,OAAAshB,qBACAzX,EAAA7J,OAAAmhB,gBACAtX,EAAA7J,OAAAohB,mBACAze,KAAAG,IAAA+G,EAAA7J,OAAAqhB,YAAA,GAAA,GAEAxX,EAAA0N,gBACAkM,EACAjM,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEAsY,EACAhjB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAGAsY,EAAApE,OAAA3T,QAGA,IAAAgY,GAAAhlB,EAAAuB,OAAAjB,MAAA8C,UAAA,qCACA+F,MAAA6K,GAAA,SAAAjT,GAAA,MAAAA,GAAAsiB,UAAA,UAEA2B,GAAAtE,QAAA/d,OAAA,QACAZ,KAAA,QAAA,gCAEAijB,EACAjjB,KAAA,cAAA,SAAAhB,GACA,MAAAA,GAAAgjB,cAAAC,cAEAxa,KAAA,SAAAzI,GACA,MAAA,MAAAA,EAAAkkB,OAAAlkB,EAAAsiB,UAAA,IAAA,IAAAtiB,EAAAsiB,YAEAzgB,MAAA,YAAAoR,EAAA5I,OAAA9J,OAAAmhB,iBAEApd,EAAA,SAAAtE,GACA,MAAA,WAAAA,EAAAgjB,cAAAC,YACAjjB,EAAAgjB,cAAAne,MAAA7E,EAAAgjB,cAAApX,MAAA,EACA,UAAA5L,EAAAgjB,cAAAC,YACAjjB,EAAAgjB,cAAAne,MAAAuF,EAAA7J,OAAAshB,qBACA,QAAA7hB,EAAAgjB,cAAAC,YACAjjB,EAAAgjB,cAAAle,IAAAsF,EAAA7J,OAAAshB,qBADA,QAIAnW,EAAA,SAAA1L,GACA,OAAAA,EAAAqjB,MAAA,GAAAjZ,EAAA2X,iBACA3X,EAAA7J,OAAAshB,qBACAzX,EAAA7J,OAAAmhB,iBAEAtX,EAAA0N,gBACAmM,EACAlM,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEAuY,EACAjjB,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAGAuY,EAAArE,OAAA3T,QAIA,IAAAkY,GAAA,SAAAnkB,GAAA,MAAAyf,GAAAxG,yBAAAwG,EAAAlf,OAAAyQ,MAAAhR,EAAAqK,OAAAA,SACA+Z,EAAA,SAAApkB,GAAA,MAAAyf,GAAAxG,yBAAAwG,EAAAlf,OAAA2P,OAAAlQ,EAAAqK,OAAAA,SAEAuZ,EAAA3kB,EAAAuB,OAAAjB,MAAA8C,UAAA,oCACA+F,KAAA6K,EAAA8P,YAAA9P,EAAA5I,OAAA2X,gBAAA4B,MAAA,SAAA5jB,GAAA,MAAAA,GAAAqkB,SAEAT,GAAAjE,QAAA/d,OAAA,QACAZ,KAAA,QAAA,+BAEA4iB,EACA/hB,OAAAmR,KAAAmR,EAAAjU,OAAAkU,IAEAxY,EAAA,SAAA5L,GACA,MAAAoK,GAAAC,OAAAiW,QAAAtgB,EAAA8E,KAAAsF,EAAAC,OAAAiW,QAAAtgB,EAAA6E,QAEAgH,EAAA,WACA,MAAAzB,GAAA7J,OAAAqhB,aAEAtd,EAAA,SAAAtE,GACA,MAAAoK,GAAAC,OAAAiW,QAAAtgB,EAAA6E,QAEA6G,EAAA,WACA,OAAAuH,EAAAoQ,MAAA,GAAAjZ,EAAA2X,iBACA3X,EAAA7J,OAAAshB,qBACAzX,EAAA7J,OAAAmhB,gBACAtX,EAAA7J,OAAAohB,oBAEAvX,EAAA0N,gBACA8L,EACA7L,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEAkY,EACA5iB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAGAkY,EAAAhE,OAAA3T,QAGA,IAAAqY,GAAArlB,EAAAuB,OAAAjB,MAAA8C,UAAA,yCACA+F,MAAA6K,GAAA,SAAAjT,GAAA,MAAAA,GAAAsiB,UAAA,cAEAgC,GAAA3E,QAAA/d,OAAA,QACAZ,KAAA,QAAA,oCAEAsjB,EACAtjB,KAAA,KAAA,SAAAhB,GACA,MAAAoK,GAAA+N,aAAAnY,GAAA,eAEAgB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAEA7gB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAGAjW,EAAA,SAAA5L,GACA,MAAAA,GAAAgjB,cAAApX,OAEAC,EAAA,WACA,MAAAzB,GAAA2X,iBAAA3X,EAAA7J,OAAAuhB,wBAEAxd,EAAA,SAAAtE,GACA,MAAAA,GAAAgjB,cAAAne,OAEA6G,EAAA,SAAA1L,GACA,OAAAA,EAAAqjB,MAAA,GAAAjZ,EAAA2X,kBAEA3X,EAAA0N,gBACAwM,EACAvM,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEA4Y,EACAtjB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAIA4Y,EAAA1E,OAAA3T,SAGAqY,EAAApZ,GAAA,sBAAA,SAAAqD,GACAA,EAAAlE,OAAAA,OAAA4S,KAAA,kBAAA1O,GAAA,KAIAnE,EAAAgT,eAAAkH,KAKAjH,EAAAuC,OAAA3T,UAQA1M,KAAAya,gBAAA,SAAAnZ,GACA,GAAA,gBAAAA,GACA,KAAA,gDAEA,KAAAtB,KAAAsX,SAAAhW,GACA,KAAA,kEAEA,IAiBA4K,GAAAoU,EAAAC,EAjBApS,EAAAnO,KAAAsX,SAAAhW,GACAmf,EAAA,EACAC,EAAA,EACA1U,EAAAhM,KAAAiM,gBACA0U,EAAAxS,EAAArN,SAAAO,OAAA6L,wBACA8X,EAAAhlB,KAAA8Y,uBAAA3K,EAAAtF,MACAoc,EAAAvlB,EAAAuB,OAAA,IAAA+jB,GAAA3jB,OAAA8hB,UACAvC,EAAA5gB,KAAA8K,OAAA9J,OAAAsL,QAAAtM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,IAAAlM,KAAA8K,OAAA9J,OAAAgU,OAAAE,QACA2L,EAAA7gB,KAAA8K,OAAA9J,OAAAqL,OAAArM,KAAA8K,OAAA9J,OAAAgU,OAAA5I,KAAApM,KAAA8K,OAAA9J,OAAAgU,OAAAC,OAGAiQ,GAAA/W,EAAAtF,KAAA4a,cAAAne,MAAA6I,EAAAtF,KAAA4a,cAAAle,KAAA,EAAAvF,KAAAgB,OAAAshB,qBAAA,EACArB,EAAAtd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAA6Y,EAAA,GACAhE,EAAAvd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAA6Y,EAAArE,EAAA,GACAzU,EAAAJ,EAAAjH,EAAAmgB,EAAAvE,EAAAtU,MAAA,EAAA6U,EAAAD,EACAT,EAAAG,EAAAtU,MAAA,EAAAoU,EAAA,EAAAS,EAAAD,CAGAN,GAAArU,OAAAoU,EAAAD,EAAAG,GAAAqE,EAAA9Y,EAAA8Y,EAAA3Y,SACAJ,EAAAF,EAAAG,EAAA8Y,EAAA9Y,GAAAwU,EAAArU,OAAAoU,EAAAD,GACAH,EAAA,OACAC,EAAAI,EAAArU,OAAAoU,IAEAxU,EAAAF,EAAAG,EAAA8Y,EAAA9Y,EAAA8Y,EAAA3Y,OAAAoU,EAAAD,EACAH,EAAA,KACAC,EAAA,EAAAG,EAAAD,GAGAtS,EAAArN,SAAAwB,MAAA,OAAA8J,EAAA,MAAA9J,MAAA,MAAA4J,EAAA,MAEAiC,EAAAuM,QACAvM,EAAAuM,MAAAvM,EAAArN,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA6L,EAAAuM,MACAjZ,KAAA,QAAA,+BAAA6e,GACAhe,MAAA,OAAAke,EAAA,MACAle,MAAA,MAAAie,EAAA;EAGAvgB,OChfAJ,EAAA8f,WAAAjQ,IAAA,gBAAA,SAAAzO,GAyFA,MAtFAhB,MAAAkX,eACAiO,wBACAC,MAAA,qBACAC,KAAA,oBAEAC,yBACAF,MAAA,qBACAC,KAAA,kBAGArkB,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,eAGAtX,EAAAkX,UAAArJ,MAAAzN,KAAA0N,WAGA1N,KAAAigB,OAAA,WAGA,GAAAza,GAAA,CACAxF,MAAA6I,KAAArI,QAAA,SAAAC,EAAAC,GACAV,KAAA6I,KAAAnI,GAAA6kB,aAAA/f,EACAxF,KAAA6I,KAAAnI,GAAA8kB,WAAAhgB,EAAA/E,EAAA,qBACA+E,GAAA/E,EAAA,sBACAoL,KAAA7L,MAEA,IAAAylB,GAAAzlB,KAAAoC,IAAAkW,MACAxV,UAAA,oCACA+F,KAAA7I,KAAA6I,KAAA,SAAApI,GAAA,MAAAA,GAAA,eAGAglB,GAAArF,QACA/d,OAAA,QACAZ,KAAA,QAAA,8BAGA,IAAAoJ,GAAA7K,KACAgL,EAAAhL,KAAA8K,MAEA2a,GACAhkB,KAAA,OAAA,SAAAhB,GAAA,MAAAA,GAAA,cAAA,EAAAoK,EAAA7J,OAAAmkB,uBAAAC,MAAAva,EAAA7J,OAAAmkB,uBAAAE,OACA5jB,KAAA,IAAA,SAAAhB,GAAA,MAAAuK,GAAA+V,QAAAtgB,EAAA8kB,gBACA9jB,KAAA,IAAA,GACAA,KAAA,QAAA,SAAAhB,GAAA,MAAAuK,GAAA+V,QAAAtgB,EAAA,wBACAgB,KAAA,SAAAuJ,EAAAhK,OAAAqe,SAAA/S,QAGAmZ,EAAApF,OAAA3T,QAIA,IAAAgZ,GAAA,wBAAA9gB,KAAA5E,KAAAmC,MAAAwjB,QACA,KAAAD,EACA,KAAA,gEAEA,IAAArgB,GAAAqgB,EAAA,GACAtgB,EAAAsgB,EAAA,EAEAlgB,IAAAxF,KAAA6I,KAAAxD,EAAA,GAAAkgB,eAAAngB,CAGA,IAAAvD,GAAA7B,KAAAoC,IAAAkW,MACAxV,UAAA,2CACA+F,OAAAvD,MAAAE,EAAAD,IAAAC,EAAA,IAEA3D,GAAAue,QACA/d,OAAA,QACAZ,KAAA,QAAA,sCAEAI,EACA2W,aACAqJ,SAAA,KACAvf,OACAmR,KAAA,0BACA9C,OAAA,0BACAC,eAAA,QAEAnP,KAAA,IAAA,SAAAhB,GAAA,MAAAuK,GAAA+V,QAAAtgB,EAAA6E,SACA7D,KAAA,IAAA,GACAA,KAAA,QAAA,SAAAhB,GAAA,MAAAuK,GAAA+V,QAAAtgB,EAAA8E,IAAA9E,EAAA6E,SACA7D,KAAA,SAAAuJ,EAAAhK,OAAAqe,SAAA/S,QAEAzK,EAAAwe,OAAA3T,UAIA1M,OCzFAJ,EAAA8f,WAAAjQ,IAAA,YAAA,SAAAzO,GAwbA,MArbAhB,MAAAkX,eACArD,YAAA,QACAC,UAAA,MACAC,kBAAA,WACA6R,kBAAA,OACAC,6BAAA,EACA7R,cAAA,EACA8R,aAAA,GACAvD,uBAAA,EACAD,qBAAA,EACArO,oBAAA,EACAxC,MAAA,UACAwB,aAAA,GAEAjS,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,eAGAtX,EAAAkX,UAAArJ,MAAAzN,KAAA0N,WAQA1N,KAAA8Y,uBAAA,SAAA9J,GACA,MAAAhP,MAAAgB,OAAAgT,cACAhU,KAAAmY,YAAA,eAAAnJ,EAAAhP,KAAAgB,OAAA+S,oBAAArP,QAAA,YAAA,KAEA1E,KAAA4Y,aAAA5J,GAAA,eACAnD,KAAA7L,MAGAA,KAAAwiB,eAAA,WACA,MAAAxiB,MAAAgB,OAAA8kB,aACA9lB,KAAAgB,OAAAuhB,uBACA,EAAAviB,KAAAgB,OAAAshB,sBAGAtiB,KAAA0iB,OAAA,EACA1iB,KAAA+lB,gBAAA,EAGA/lB,KAAAgmB,sBAAApD,MAIA5iB,KAAA6iB,aAAA,WAUA,GAPA7iB,KAAA+lB,gBAAA/lB,KAAA0iB,OACA1iB,KAAA0iB,OAAA,EACA1iB,KAAAgmB,sBAAApD,MACA5iB,KAAAimB,2BAIAjmB,KAAAgB,OAAA+S,mBAAA/T,KAAAgB,OAAAgT,aAAA,CACAhU,KAAA6I,KAAAwB,IAAA,SAAA5J,GACAT,KAAAimB,wBAAAxlB,EAAAT,KAAAgB,OAAA+S,oBAAA,MACAlI,KAAA7L,MACA,IAAAiJ,GAAAjH,OAAAC,KAAAjC,KAAAimB,wBACA,UAAAjmB,KAAAgB,OAAA4kB,mBAAA3c,EAAAid,UACAjd,EAAAzI,QAAA,SAAAgE,GACAxE,KAAAimB,wBAAAzhB,GAAAxE,KAAA0iB,OAAA,EACA1iB,KAAAgmB,qBAAAhmB,KAAA0iB,OAAA,MACA1iB,KAAA0iB,UACA7W,KAAA7L,OAiEA,MA9DAA,MAAA6I,KAAAwB,IAAA,SAAA5J,EAAAC,GAwBA,GArBAV,KAAA6I,KAAAnI,GAAAoK,OAAA9K,KAIAA,KAAA6I,KAAAnI,GAAA+iB,eACAne,MAAAtF,KAAA8K,OAAAiW,QAAApd,KAAAG,IAAArD,EAAAT,KAAAgB,OAAA6S,aAAA7T,KAAAmC,MAAAmD,QACAC,IAAAvF,KAAA8K,OAAAiW,QAAApd,KAAAE,IAAApD,EAAAT,KAAAgB,OAAA8S,WAAA9T,KAAAmC,MAAAoD,OAEAvF,KAAA6I,KAAAnI,GAAA+iB,cAAApX,MAAArM,KAAA6I,KAAAnI,GAAA+iB,cAAAle,IAAAvF,KAAA6I,KAAAnI,GAAA+iB,cAAAne,MAIAtF,KAAA6I,KAAAnI,GAAAkjB,gBACAte,MAAAtF,KAAA8K,OAAAiW,QAAA8C,OAAA7jB,KAAA6I,KAAAnI,GAAA+iB,cAAAne,OACAC,IAAAvF,KAAA8K,OAAAiW,QAAA8C,OAAA7jB,KAAA6I,KAAAnI,GAAA+iB,cAAAle,MAEAvF,KAAA6I,KAAAnI,GAAAkjB,eAAAvX,MAAArM,KAAA6I,KAAAnI,GAAAkjB,eAAAre,IAAAvF,KAAA6I,KAAAnI,GAAAkjB,eAAAte,MAKAtF,KAAAgB,OAAA+S,mBAAA/T,KAAAgB,OAAAgT,aAAA,CACA,GAAAxP,GAAAxE,KAAA6I,KAAAnI,GAAAV,KAAAgB,OAAA+S,kBACA/T,MAAA6I,KAAAnI,GAAAojB,MAAA9jB,KAAAimB,wBAAAzhB,GACAxE,KAAAgmB,qBAAAhmB,KAAA6I,KAAAnI,GAAAojB,OAAApd,KAAAhG,OACA,CAIAV,KAAA0iB,OAAA,EACA1iB,KAAA6I,KAAAnI,GAAAojB,MAAA,IAEA,KADA,GAAAC,GAAA,EACA,OAAA/jB,KAAA6I,KAAAnI,GAAAojB,OAAA,CACA,GAAAE,IAAA,CACAhkB,MAAAgmB,qBAAAjC,GAAA1Z,IAAA,SAAA8b,GACA,IAAAnC,EAAA,CACA,GAAAE,GAAAvgB,KAAAE,IAAAsiB,EAAA1C,cAAAne,MAAAtF,KAAAyjB,cAAAne,OACA6e,EAAAxgB,KAAAG,IAAAqiB,EAAA1C,cAAAle,IAAAvF,KAAAyjB,cAAAle,IACA4e,GAAAD,EAAAiC,EAAA1C,cAAApX,MAAArM,KAAAyjB,cAAApX,QACA2X,GAAA,KAGAnY,KAAA7L,KAAA6I,KAAAnI,KACAsjB,GAIAD,IACAA,EAAA/jB,KAAA0iB,SACA1iB,KAAA0iB,OAAAqB,EACA/jB,KAAAgmB,qBAAAjC,SANA/jB,KAAA6I,KAAAnI,GAAAojB,MAAAC,EACA/jB,KAAAgmB,qBAAAjC,GAAArd,KAAA1G,KAAA6I,KAAAnI,QAYAmL,KAAA7L,OAEAA,MAIAA,KAAAigB,OAAA,WAEAjgB,KAAA6iB,eAKA7iB,KAAAoC,IAAAkW,MAAAxV,UAAA,sEAAA4J,SACA1K,OAAAC,KAAAjC,KAAAimB,yBAAAzlB,QAAA,SAAA0B,GAEA,GAAAkkB,KACAA,GAAApmB,KAAAgB,OAAA+S,mBAAA7R,CAEA,IAAAmkB,IAAAC,QAAAtmB,KAAAgB,OAAAgT,aAAA,KAAA,OACAhU,MAAAoC,IAAAkW,MAAA5M,OAAA,OAAA,gBACAjK,KAAA,KAAAzB,KAAA8Y,uBAAAsN,IACA3kB,KAAA,QAAA,6FACAA,KAAA,KAAAzB,KAAAgB,OAAAshB,sBAAA7gB,KAAA,KAAAzB,KAAAgB,OAAAshB,sBACA7gB,KAAA,QAAAzB,KAAA8K,OAAA9J,OAAAqe,SAAAhT,OACA5K,KAAA,SAAAzB,KAAAwiB,iBAAAxiB,KAAAgB,OAAAuhB,wBACA9gB,KAAA,IAAA,GACAA,KAAA,KAAAzB,KAAAimB,wBAAA/jB,GAAA,GAAAlC,KAAAwiB,kBACAlgB,MAAA+jB,IACAxa,KAAA7L,MAEA,IAAAqM,GAAAC,EAAAvH,EAAAoH,EAAAsH,EAAAR,EAGA6K,EAAA9d,KAAAoC,IAAAkW,MAAAxV,UAAA,6BACA+F,KAAA7I,KAAA6I,KAAA,SAAApI,GAAA,MAAAA,GAAAT,KAAAgB,OAAAiR,WAAApG,KAAA7L,MA+JA,OA7JA8d,GAAAsC,QAAA/d,OAAA,KACAZ,KAAA,QAAA,2BAEAqc,EAAArc,KAAA,KAAA,SAAAhB,GAAA,MAAAT,MAAA4Y,aAAAnY,IAAAoL,KAAA7L,OACA+C,KAAA,SAAAwjB,GAEA,GAAA1b,GAAA0b,EAAAzb,OAIA0b,GAAAF,QAAAzb,EAAA7J,OAAAgT,aAAA,OAAA,MACAyS,EAAA/mB,EAAAuB,OAAAjB,MAAA8C,UAAA,+GACA+F,MAAA0d,GAAA,SAAA9lB,GAAA,MAAAoK,GAAA+N,aAAAnY,GAAA,eACAgmB,GAAArG,QAAA1U,OAAA,OAAA,gBACAjK,KAAA,QAAA,0GACAglB,EACAhlB,KAAA,KAAA,SAAAhB,GACA,MAAAoK,GAAA+N,aAAAnY,GAAA,gBAEAgB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAEA7gB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAEAhgB,MAAAkkB,GACAna,EAAA,SAAA5L,GACA,MAAAA,GAAAgjB,cAAApX,MAAA,EAAAxB,EAAA7J,OAAAshB,sBAEAhW,EAAA,WACA,MAAAzB,GAAA2X,iBAAA3X,EAAA7J,OAAAuhB,wBAEAxd,EAAA,SAAAtE,GACA,MAAAA,GAAAgjB,cAAAne,MAAAuF,EAAA7J,OAAAshB,sBAEAnW,EAAA,SAAA1L,GACA,OAAAA,EAAAqjB,MAAA,GAAAjZ,EAAA2X,kBAEA3X,EAAA0N,gBACAkO,EACAjO,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEAsa,EACAhlB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEAsa,EAAApG,OAAA3T,QAGA,IAAAga,GAAAhnB,EAAAuB,OAAAjB,MAAA8C,UAAA,iDACA+F,MAAA0d,GAAA,SAAA9lB,GAAA,MAAAA,GAAAoK,EAAA7J,OAAAiR,UAAA,kBAEAyU,GAAAtG,QAAA/d,OAAA,QACAZ,KAAA,QAAA,4CAEA6K,EAAAzB,EAAA7J,OAAA8kB,aACAzZ,EAAA,SAAA5L,GACA,MAAAA,GAAAgjB,cAAApX,OAEAtH,EAAA,SAAAtE,GACA,MAAAA,GAAAgjB,cAAAne,OAEA6G,EAAA,SAAA1L,GACA,OAAAA,EAAAqjB,MAAA,GAAAjZ,EAAA2X,iBACA3X,EAAA7J,OAAAshB,sBAEA7O,EAAA,SAAAhT,GACA,MAAAoK,GAAA6O,yBAAA7O,EAAA7J,OAAAyQ,MAAAhR,IAEAwS,EAAA,SAAAxS,GACA,MAAAoK,GAAA6O,yBAAA7O,EAAA7J,OAAAiS,aAAAxS,IAIAoK,EAAA0N,gBACAmO,EACAlO,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GACA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GACA1K,KAAA,OAAAgS,GACAhS,KAAA,eAAAwR,GAEAyT,EACAjlB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GACA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GACA1K,KAAA,OAAAgS,GACAhS,KAAA,eAAAwR,GAGAyT,EAAArG,OAAA3T,QAGA,IAAAqY,GAAArlB,EAAAuB,OAAAjB,MAAA8C,UAAA,6CACA+F,MAAA0d,GAAA,SAAA9lB,GAAA,MAAAA,GAAAkmB,cAAA,cAEA5B,GAAA3E,QAAA/d,OAAA,QACAZ,KAAA,QAAA,wCAEAsjB,EACAtjB,KAAA,KAAA,SAAAhB,GACA,MAAAoK,GAAA+N,aAAAnY,GAAA,eAEAgB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAEA7gB,KAAA,KAAA,WACA,MAAAoJ,GAAA7J,OAAAshB,uBAGAjW,EAAA,SAAA5L,GACA,MAAAA,GAAAgjB,cAAApX,OAEAC,EAAA,WACA,MAAAzB,GAAA2X,iBAAA3X,EAAA7J,OAAAuhB,wBAEAxd,EAAA,SAAAtE,GACA,MAAAA,GAAAgjB,cAAAne,OAEA6G,EAAA,SAAA1L,GACA,OAAAA,EAAAqjB,MAAA,GAAAjZ,EAAA2X,kBAEA3X,EAAA0N,gBACAwM,EACAvM,aACAqJ,SAAAhX,EAAA7J,OAAAwX,WAAAqJ,UAAA,GACAC,KAAAjX,EAAA7J,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAEA4Y,EACAtjB,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GAAA7K,KAAA,IAAAsD,GAAAtD,KAAA,IAAA0K,GAIA4Y,EAAA1E,OAAA3T,SAGAqY,EAAApZ,GAAA,QAAA,SAAAuW,GACAA,EAAApX,OAAAA,OAAA4S,KAAA,kBAAAwE,GAAA,IACArW,KAAA7L,OAGA6K,EAAAgT,eAAAkH,KAKAjH,EAAAuC,OAAA3T,SAGA1M,KAAA+lB,kBAAA/lB,KAAA0iB,QACA1iB,KAAA4mB,uBAGA5mB,MAKAA,KAAAya,gBAAA,SAAAnZ,GACA,GAAA,gBAAAA,GACA,KAAA,gDAEA,KAAAtB,KAAAsX,SAAAhW,GACA,KAAA,kEAEA,IAgBA4K,GAAAoU,EAAAC,EAhBApS,EAAAnO,KAAAsX,SAAAhW,GACAmf,EAAA,EACAC,EAAA,EACA1U,EAAAhM,KAAAiM,gBACA0U,EAAAxS,EAAArN,SAAAO,OAAA6L,wBACA2Z,EAAAnnB,EAAAuB,OAAA,IAAAjB,KAAA8Y,uBAAA3K,EAAAtF,OAAAxH,OAAA8hB,UACAvC,EAAA5gB,KAAA8K,OAAA9J,OAAAsL,QAAAtM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,IAAAlM,KAAA8K,OAAA9J,OAAAgU,OAAAE,QACA2L,EAAA7gB,KAAA8K,OAAA9J,OAAAqL,OAAArM,KAAA8K,OAAA9J,OAAAgU,OAAA5I,KAAApM,KAAA8K,OAAA9J,OAAAgU,OAAAC,OAGA6R,GAAA3Y,EAAAtF,KAAA4a,cAAAne,MAAA6I,EAAAtF,KAAA4a,cAAAle,KAAA,EAAAvF,KAAAgB,OAAAshB,qBAAA,EACArB,EAAAtd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAya,EAAA,GACA5F,EAAAvd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAya,EAAAjG,EAAA,GACAzU,EAAAJ,EAAAjH,EAAA+hB,EAAAnG,EAAAtU,MAAA,EAAA6U,EAAAD,EACAT,EAAAG,EAAAtU,MAAA,EAAAoU,EAAA,EAAAS,EAAAD,CAGAN,GAAArU,OAAAoU,EAAAD,EAAAG,GAAAiG,EAAA1a,EAAA0a,EAAAva,SACAJ,EAAAF,EAAAG,EAAA0a,EAAA1a,GAAAwU,EAAArU,OAAAoU,EAAAD,GACAH,EAAA,OACAC,EAAAI,EAAArU,OAAAoU,IAEAxU,EAAAF,EAAAG,EAAA0a,EAAA1a,EAAA0a,EAAAva,OAAAoU,EAAAD,EACAH,EAAA,KACAC,EAAA,EAAAG,EAAAD,GAGAtS,EAAArN,SAAAwB,MAAA,OAAA8J,EAAA,MAAA9J,MAAA,MAAA4J,EAAA,MAEAiC,EAAAuM,QACAvM,EAAAuM,MAAAvM,EAAArN,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA6L,EAAAuM,MACAjZ,KAAA,QAAA,+BAAA6e,GACAhe,MAAA,OAAAke,EAAA,MACAle,MAAA,MAAAie,EAAA,OAKAvgB,KAAA4mB,qBAAA,WACA,GAAAG,KAAA/mB,KAAAgB,OAAA6kB,8BAAA,IAAA7lB,KAAAgB,OAAA6kB,4BACA,IAAA7lB,KAAAgB,OAAAgT,aAAA,CACA,GAAA0O,IAAA1iB,KAAA0iB,QAAA,EACAoD,GAAA9lB,KAAAgB,OAAA8kB,cAAA,EACAkB,EAAA,IAAAhnB,KAAAgB,OAAAshB,sBAAA,KAAAtiB,KAAAgB,OAAAuhB,wBAAA,GACA0E,EAAAvE,EAAAoD,GAAApD,EAAA,GAAAsE,CACAhnB,MAAA8K,OAAAoc,kBAAAD,GACAF,GAAA/mB,KAAA8K,OAAA8G,SACA5R,KAAA8K,OAAA8G,OAAAhG,OACA5L,KAAA8K,OAAA9J,OAAAqU,KAAA0R,IACA9G,QAAA,EACAzZ,SACAd,OACAJ,MAAA2hB,EAAAjnB,KAAAgB,OAAA8kB,aAAA,EACAvgB,IAAAvF,KAAAgB,OAAA8kB,aAAA,IAGA9lB,KAAAgB,OAAA4Q,OAAApR,QAAA,SAAAwO,GACA,GAAA9M,GAAA8M,EAAAhP,KAAAgB,OAAA+S,mBACA+P,EAAA9jB,KAAAimB,wBAAA/jB,EACA4hB,KACA,SAAA9jB,KAAAgB,OAAA4kB,oBACA9B,EAAAngB,KAAAuC,IAAA4d,EAAApB,EAAA,IAEA1iB,KAAA8K,OAAA9J,OAAAqU,KAAA0R,GAAAvgB,MAAAE,MACAyF,EAAA2X,EACA5a,KAAA8F,EAAA+C,UAGAlG,KAAA7L,OACAA,KAAAgB,OAAA+P,QACAC,KAAAhR,KAAAgB,OAAA6kB,6BACA7hB,MAAA,EACAiN,QAAAyR,GAEA1iB,KAAA8K,OAAAmV,UAEAjgB,KAAAyL,YAAAjJ,qBAEAukB,IAAA/mB,KAAA8K,OAAA8G,SACA5R,KAAAgB,OAAAiT,oBAAAjU,KAAA8K,OAAA8G,OAAAtG,OACAtL,KAAA8K,OAAA9J,OAAAqU,KAAA0R,IAAA9G,QAAA,GACAjgB,KAAA8K,OAAAmV,SAGA,OAAAjgB,OAKAA,KAAAmnB,kBAAA,WAOA,MANAnnB,MAAAgB,OAAAgT,cAAAhU,KAAAgB,OAAAgT,aACAhU,KAAA8K,OAAA8G,SAAA5R,KAAAgB,OAAAiT,qBACAjU,KAAA8K,OAAA9J,OAAAgU,OAAAE,OAAA,GAAAlV,KAAAgB,OAAAgT,aAAA,EAAAhU,KAAA8K,OAAA8G,OAAA5Q,OAAAsL,OAAA,IAEAtM,KAAAigB,SACAjgB,KAAA4mB,uBACA5mB,MAGAA,OCxbAJ,EAAA8f,WAAAjQ,IAAA,OAAA,SAAAzO,GA4RA,MAxRAhB,MAAAkX,eACA5U,OACAmR,KAAA,OACA7C,eAAA,OAEAwW,YAAA,SACAvW,QAAAC,MAAA,KACAC,QAAAD,MAAA,IAAAE,KAAA,GACAqW,cAAA,GAEArmB,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,eAIAlX,KAAAsnB,YAAA,KAMAtnB,KAAAunB,KAAA,KAMAvnB,KAAAwnB,gBAAA,KAGA5nB,EAAAkX,UAAArJ,MAAAzN,KAAA0N,WASA1N,KAAAynB,uBAAA,WACA,GAAArjB,IACAkiB,SACAvhB,EAAArF,EAAAgoB,MAAA1nB,KAAAsnB,aAAA,GACAnb,EAAA,MAEAtD,QACA8e,MAAA,MAEAC,EAAA5nB,KAAAgB,OAAA6P,OAAAC,MACA+W,EAAA7nB,KAAAgB,OAAA+P,OAAAD,MACAiQ,EAAA,UACAO,EAAA,IAAAthB,KAAAgB,OAAA+P,OAAAC,KAAA,QACA5M,GAAAyE,KAAA+e,GAAA5nB,KAAA8K,OAAAiW,GAAA8C,OAAAzf,EAAAkiB,QAAAvhB,EACA,IAAA+iB,GAAApoB,EAAAqoB,SAAA,SAAAC,GAAA,OAAAA,EAAAJ,KAAAxb,KACAnD,EAAA6e,EAAA9nB,KAAA6I,KAAAzE,EAAAyE,KAAA+e,IAAA,EACAK,EAAAjoB,KAAA6I,KAAAI,GACAif,EAAAloB,KAAA6I,KAAAI,EAAA,GACAme,EAAA1nB,EAAAyoB,mBAAAF,EAAAJ,IAAAK,EAAAL,IACAniB,GAAAwiB,EAAAN,IAAAK,EAAAL,EAWA,OAVAxjB,GAAAyE,KAAAgf,GAAAT,EAAAhjB,EAAAyE,KAAA+e,GAAAliB,EAAAA,GACAtB,EAAAkiB,QAAAna,EAAAnM,KAAA8K,OAAAwW,GAAAld,EAAAyE,KAAAgf,IACA7nB,KAAAgB,OAAAmN,QAAAia,cACAhkB,EAAAyE,KAAA+e,GAAAxjB,EAAAyE,KAAA+e,GAAAS,YAAAroB,KAAAgB,OAAAmN,QAAAia,cAEApoB,KAAAgB,OAAAmN,QAAAma,cACAlkB,EAAAyE,KAAAgf,GAAAzjB,EAAAyE,KAAAgf,GAAAQ,YAAAroB,KAAAgB,OAAAmN,QAAAma,cAEAlkB,EAAAujB,OAAA3nB,KAAA8K,OAAAwW,GAAA4G,EAAAL,IAAA7nB,KAAA8K,OAAAwW,GAAA2G,EAAAJ,MACA7nB,KAAA8K,OAAAiW,GAAAmH,EAAAN,IAAA5nB,KAAA8K,OAAAiW,GAAAkH,EAAAL,KACAxjB,GAOApE,KAAAya,gBAAA,SAAAnZ,GACA,GAAA,gBAAAA,GACA,KAAA,gDAEA,KAAAtB,KAAAsX,SAAAhW,GACA,KAAA,kEAEA,IAQA4K,GAAAE,EAAAmU,EAAAC,EAAAF,EARAnS,EAAAnO,KAAAsX,SAAAhW,GACAqf,EAAAxS,EAAArN,SAAAO,OAAA6L,wBACAuT,EAAA,EACAY,EAAA,EACAX,EAAAja,WAAAzG,KAAAgB,OAAAsB,MAAA,kBAAA,EACA0J,EAAAhM,KAAAiM,gBACA2U,EAAA5gB,KAAA8K,OAAA9J,OAAAsL,QAAAtM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,IAAAlM,KAAA8K,OAAA9J,OAAAgU,OAAAE,QACA2L,EAAA7gB,KAAA8K,OAAA9J,OAAAqL,OAAArM,KAAA8K,OAAA9J,OAAAgU,OAAA5I,KAAApM,KAAA8K,OAAA9J,OAAAgU,OAAAC,OAIAsT,EAAAvoB,KAAAynB,wBAIA,IAAA9jB,KAAAuC,IAAAqiB,EAAAZ,OAAA,EAGAY,EAAAjC,QAAAvhB,GAAA/E,KAAA8K,OAAA9J,OAAAqL,MAAA,GACAD,EAAAJ,EAAAjH,EAAAwjB,EAAAjC,QAAAvhB,EAAA2b,EAAAD,EAAAC,EACAJ,EAAA,OACAE,GAAA,GAAAC,EAAAC,KAEAtU,EAAAJ,EAAAjH,EAAAwjB,EAAAjC,QAAAvhB,EAAA4b,EAAAtU,MAAAqU,EAAAD,EAAAC,EACAJ,EAAA,QACAE,EAAAG,EAAAtU,MAAAqU,GAGA6H,EAAAjC,QAAAna,EAAAwU,EAAArU,OAAA,GAAA,GACAJ,EAAAF,EAAAG,EAAAoc,EAAAjC,QAAAna,EAAA,IAAAsU,EAAAY,EACAd,EAAAc,GACAkH,EAAAjC,QAAAna,EAAAwU,EAAArU,OAAA,GAAAsU,GACA1U,EAAAF,EAAAG,EAAAoc,EAAAjC,QAAAna,EAAAsU,EAAAY,EAAAV,EAAArU,OACAiU,EAAAI,EAAArU,OAAA,EAAAmU,EAAAY,IAEAnV,EAAAF,EAAAG,EAAAoc,EAAAjC,QAAAna,EAAAwU,EAAArU,OAAA,EACAiU,EAAAI,EAAArU,OAAA,EAAAmU,OAGA,CAIA,GAAAQ,GAAAtd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAkc,EAAAjC,QAAAvhB,EAAA,GACAmc,EAAAvd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAkc,EAAAjC,QAAAvhB,EAAA8b,EAAA,EACAzU,GAAAJ,EAAAjH,EAAAwjB,EAAAjC,QAAAvhB,EAAA4b,EAAAtU,MAAA,EAAA6U,EAAAD,CACA,IAAAuH,GAAA/H,EAAA,EACAgI,EAAA9H,EAAAtU,MAAA,IAAAoU,CACAD,GAAAG,EAAAtU,MAAA,EAAAoU,EAAAS,EAAAD,EACAT,EAAA7c,KAAAE,IAAAF,KAAAG,IAAA0c,EAAAgI,GAAAC,GAGA9H,EAAArU,OAAAoU,EAAAD,EAAA8H,EAAAjC,QAAAna,GACAD,EAAAF,EAAAG,EAAAoc,EAAAjC,QAAAna,EAAAuU,EAAAD,EACAH,EAAA,KACAC,EAAA,EAAAG,EAAAD,IAEAvU,EAAAF,EAAAG,EAAAoc,EAAAjC,QAAAna,GAAAwU,EAAArU,OAAAoU,EAAAD,GACAH,EAAA,OACAC,EAAAI,EAAArU,OAAAoU,GAKAvS,EAAArN,SAAAwB,OAAA8J,KAAAA,EAAA,KAAAF,IAAAA,EAAA,OAEAiC,EAAAuM,QACAvM,EAAAuM,MAAAvM,EAAArN,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA6L,EAAAuM,MACAjZ,KAAA,QAAA,+BAAA6e,GACAhe,OAAA8J,KAAAoU,EAAA,KAAAtU,IAAAqU,EAAA,QAOAvgB,KAAAigB,OAAA,WAGA,GAAApV,GAAA7K,KACAgL,EAAAhL,KAAA8K,OACA8c,EAAA5nB,KAAAgB,OAAA6P,OAAAC,MACA+W,EAAA7nB,KAAAgB,OAAA+P,OAAAD,MACAiQ,EAAA,UACAO,EAAA,IAAAthB,KAAAgB,OAAA+P,OAAAC,KAAA,SAGA8M,EAAA9d,KAAAoC,IAAAkW,MACAxV,UAAA,2BACA+F,MAAA7I,KAAA6I,MA4BA,IAzBA7I,KAAA0oB,KAAA5K,EAAAsC,QACA/d,OAAA,QACAZ,KAAA,QAAA,sBAGAzB,KAAAunB,KAAA7nB,EAAA0C,IAAAmlB,OACAxiB,EAAA,SAAAtE,GAAA,MAAAgG,YAAAuE,EAAA+V,GAAAtgB,EAAAmnB,OACAzb,EAAA,SAAA1L,GAAA,MAAAgG,YAAAuE,EAAAsW,GAAA7gB,EAAAonB,OACAT,YAAApnB,KAAAgB,OAAAomB,aAGApnB,KAAAuY,gBACAuF,EACAtF,aACAqJ,SAAA7hB,KAAAgB,OAAAwX,WAAAqJ,UAAA,GACAC,KAAA9hB,KAAAgB,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,IAAAzB,KAAAunB,MACAjlB,MAAAtC,KAAAgB,OAAAsB,OAEAwb,EACArc,KAAA,IAAAzB,KAAAunB,MACAjlB,MAAAtC,KAAAgB,OAAAsB,OAIAtC,KAAAgB,OAAAmN,QAAA,CAEA,GAAAkZ,GAAA5gB,WAAAzG,KAAAgB,OAAAqmB,eAAAvY,WAAA,KACA6Z,EAAA3oB,KAAAoC,IAAAkW,MACAxV,UAAA,mCACA+F,MAAA7I,KAAA6I,MACA8f,GAAAvI,QACA/d,OAAA,QACAZ,KAAA,QAAA,8BACAa,MAAA,eAAA+kB,EACA,IAAAuB,GAAAlpB,EAAA0C,IAAAmlB,OACAxiB,EAAA,SAAAtE,GAAA,MAAAgG,YAAAuE,EAAA+V,GAAAtgB,EAAAmnB,OACAzb,EAAA,SAAA1L,GAAA,MAAAgG,YAAAuE,EAAAsW,GAAA7gB,EAAAonB,OACAT,YAAApnB,KAAAgB,OAAAomB,YACAuB,GACAlnB,KAAA,IAAAmnB,GACAjd,GAAA,YAAA,WACAI,aAAAlB,EAAA2c,iBACA3c,EAAAyc,YAAAtnB,IACA,IAAAuoB,GAAA1d,EAAA4c,wBACA5c,GAAA2P,cAAA+N,EAAA1f,QAEA8C,GAAA,YAAA,WACAI,aAAAlB,EAAA2c,iBACA3c,EAAAyc,YAAAtnB,IACA,IAAAuoB,GAAA1d,EAAA4c,wBACA5c,GAAA8P,cAAA4N,EAAA1f,MACAgC,EAAA4P,gBAAA5P,EAAA+N,kBAEAjN,GAAA,WAAA,WACAd,EAAA2c,gBAAAzf,WAAA,WACA8C,EAAAyc,YAAA,KACAzc,EAAA+P,eAAA/P,EAAA+N,iBACA,OAEA+P,EAAAtI,OAAA3T,SAIAoR,EAAAuC,OAAA3T,UAWA1M,KAAAkd,iBAAA,SAAAtV,EAAAoH,EAAAqO,GACA,MAAArd,MAAAod,oBAAAxV,EAAAyV,IAEArd,KAAAmd,0BAAA,SAAAvV,EAAAyV,GACA,MAAArd,MAAAod,oBAAAxV,EAAAyV,IAEArd,KAAAod,oBAAA,SAAAxV,EAAAyV,GAEA,GAAA,mBAAAzV,IAAAhI,EAAAkX,UAAAiB,SAAAC,WAAArR,QAAAiB,MAAA,EACA,KAAA,0DAEA,IAAA,mBAAA5H,MAAAmC,MAAAnC,KAAAoX,UAAAxP,GAAA,MAAA5H,KACA,oBAAAqd,KAAAA,GAAA,GAGArd,KAAAuX,gBAAA3P,GAAAyV,CAGA,IAAAwL,GAAA,oBAQA,OAPA7mB,QAAAC,KAAAjC,KAAAuX,iBAAA/W,QAAA,SAAAsoB,GACA9oB,KAAAuX,gBAAAuR,KAAAD,GAAA,uBAAAC,IACAjd,KAAA7L,OACAA,KAAA0oB,KAAAjnB,KAAA,QAAAonB,GAGA7oB,KAAA8K,OAAA4S,KAAA,kBAAA,GACA1d,MAGAA,OAYAJ,EAAA8f,WAAAjQ,IAAA,kBAAA,SAAAzO,GAwGA,MArGAhB,MAAAkX,eACA5U,OACAqO,OAAA,UACAC,eAAA,MACAwC,mBAAA,aAEA7C,YAAA,aACAM,QACAG,KAAA,EACA+X,WAAA,GAEAhY,QACAC,KAAA,EACA+X,WAAA,GAEA3jB,OAAA,GAEApE,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,gBAGA,aAAA,YAAAvQ,QAAA3F,EAAAuP,gBAAA,IACAvP,EAAAuP,YAAA,cAKAvQ,KAAA6I,QAEA7I,KAAAunB,KAAA,KAGA3nB,EAAAkX,UAAArJ,MAAAzN,KAAA0N,WAKA1N,KAAAigB,OAAA,WAGA,GAAAjV,GAAAhL,KAAA8K,OACAiW,EAAA,UACAO,EAAA,IAAAthB,KAAAgB,OAAA+P,OAAAC,KAAA,SACAgY,EAAA,WACAC,EAAA,IAAAjpB,KAAAgB,OAAA+P,OAAAC,KAAA,UACAkY,EAAA,UACAC,EAAA,IAAAnpB,KAAAgB,OAAA+P,OAAAC,KAAA,QAGA,gBAAAhR,KAAAgB,OAAAuP,YACAvQ,KAAA6I,OACA9D,EAAAiG,EAAAge,GAAA,GAAA7c,EAAAnM,KAAAgB,OAAAoE,SACAL,EAAAiG,EAAAge,GAAA,GAAA7c,EAAAnM,KAAAgB,OAAAoE,SAGApF,KAAA6I,OACA9D,EAAA/E,KAAAgB,OAAAoE,OAAA+G,EAAAnB,EAAAie,GAAA,KACAlkB,EAAA/E,KAAAgB,OAAAoE,OAAA+G,EAAAnB,EAAAie,GAAA,IAKA,IAAAnL,GAAA9d,KAAAoC,IAAAkW,MACAxV,UAAA,2BACA+F,MAAA7I,KAAA6I,MAGA7I,MAAA0oB,KAAA5K,EAAAsC,QACA/d,OAAA,QACAZ,KAAA,QAAA,sBAGAzB,KAAAunB,KAAA7nB,EAAA0C,IAAAmlB,OACAxiB,EAAA,SAAAtE,EAAAC,GACA,GAAAqE,GAAA0B,WAAAuE,EAAA+V,GAAAtgB,EAAAA,GACA,OAAAgD,OAAAsB,GAAAiG,EAAAke,GAAAxoB,GAAAqE,IAEAoH,EAAA,SAAA1L,EAAAC,GACA,GAAAyL,GAAA1F,WAAAuE,EAAAsW,GAAA7gB,EAAAA,GACA,OAAAgD,OAAA0I,GAAAnB,EAAAme,GAAAzoB,GAAAyL,IAEAib,YAAA,UAGApnB,KAAAuY,gBACAuF,EACAtF,aACAqJ,SAAA7hB,KAAAgB,OAAAwX,WAAAqJ,UAAA,GACAC,KAAA9hB,KAAAgB,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,IAAAzB,KAAAunB,MACAjlB,MAAAtC,KAAAgB,OAAAsB,OAEAwb,EACArc,KAAA,IAAAzB,KAAAunB,MACAjlB,MAAAtC,KAAAgB,OAAAsB,OAIAwb,EAAAuC,OAAA3T,UAIA1M,OCjZAJ,EAAA8f,WAAAjQ,IAAA,UAAA,SAAAzO,GA0cA,MAvcAhB,MAAAkX,eACA1F,WAAA,GACAL,YAAA,SACAyB,oBAAA,aACAnB,MAAA,UACAwB,aAAA,EACAlC,QACAC,KAAA,GAEAiB,SAAA,MAEAjR,EAAApB,EAAAmO,QAAAS,MAAAxN,EAAAhB,KAAAkX,eAIAlW,EAAA+Q,OAAAtO,MAAAzC,EAAA+Q,MAAAmB,WACAlS,EAAA+Q,MAAAmB,QAAA,GAIAtT,EAAAkX,UAAArJ,MAAAzN,KAAA0N,WAGA1N,KAAAya,gBAAA,SAAAnZ,GACA,GAAA,gBAAAA,GACA,KAAA,gDAEA,KAAAtB,KAAAsX,SAAAhW,GACA,KAAA,kEAEA,IAAA4K,GAAAE,EAAAkU,EAAAC,EAAAC,EACArS,EAAAnO,KAAAsX,SAAAhW,GACAkQ,EAAAxR,KAAA0Z,yBAAA1Z,KAAAgB,OAAAwQ,WAAArD,EAAAtF,MACAzD,EAAAzB,KAAA4d,KAAA/P,EAAA7N,KAAA6d,IACAf,EAAA,EACAC,EAAA,EACAW,EAAA,EACArV,EAAAhM,KAAAiM,gBACA6U,EAAA9gB,KAAA8K,OAAAiW,QAAA5S,EAAAtF,KAAA7I,KAAAgB,OAAA6P,OAAAC,QACAwQ,EAAA,IAAAthB,KAAAgB,OAAA+P,OAAAC,KAAA,SACAgQ,EAAAhhB,KAAA8K,OAAAwW,GAAAnT,EAAAtF,KAAA7I,KAAAgB,OAAA+P,OAAAD,QACA6P,EAAAxS,EAAArN,SAAAO,OAAA6L,wBACA0T,EAAA5gB,KAAA8K,OAAA9J,OAAAsL,QAAAtM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,IAAAlM,KAAA8K,OAAA9J,OAAAgU,OAAAE,QACA2L,EAAA7gB,KAAA8K,OAAA9J,OAAAqL,OAAArM,KAAA8K,OAAA9J,OAAAgU,OAAA5I,KAAApM,KAAA8K,OAAA9J,OAAAgU,OAAAC,MACA,IAAA,aAAAjV,KAAAgB,OAAA4R,oBAAA,CAEA,GAAAqO,GAAAtd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAyU,EAAA,GACAI,EAAAvd,KAAAG,IAAA6c,EAAAtU,MAAA,EAAAyU,EAAAD,EAAA,EACAzU,GAAAJ,EAAAjH,EAAA+b,EAAAH,EAAAtU,MAAA,EAAA6U,EAAAD,EACAT,EAAAG,EAAAtU,MAAA,EAAAoU,EAAA,EAAAS,EAAAD,EAAA7b,EAEAub,EAAArU,OAAAoU,EAAAD,EAAAG,GAAAI,EAAA5b,IACA8G,EAAAF,EAAAG,EAAA6U,GAAA5b,EAAAub,EAAArU,OAAAoU,EAAAD,GACAH,EAAA,OACAC,EAAAI,EAAArU,OAAAoU,IAEAxU,EAAAF,EAAAG,EAAA6U,EAAA5b,EAAAsb,EAAAD,EACAH,EAAA,KACAC,EAAA,EAAAG,EAAAD,OAIAK,IAAA9gB,KAAA8K,OAAA9J,OAAAqL,MAAA,GACAD,EAAAJ,EAAAjH,EAAA+b,EAAA1b,EAAAqb,EAAAC,EACAJ,EAAA,OACAE,GAAA,GAAAC,EAAAC,KAEAtU,EAAAJ,EAAAjH,EAAA+b,EAAAH,EAAAtU,MAAAjH,EAAAqb,EAAAC,EACAJ,EAAA,QACAE,EAAAG,EAAAtU,MAAAqU,GAGAE,EAAA5gB,KAAA8K,OAAA9J,OAAAsL,QAAAtM,KAAA8K,OAAA9J,OAAAgU,OAAA9I,IAAAlM,KAAA8K,OAAA9J,OAAAgU,OAAAE,QACA8L,EAAAL,EAAArU,OAAA,GAAA,GACAJ,EAAAF,EAAAG,EAAA6U,EAAA,IAAAP,EAAAY,EACAd,EAAAc,GACAL,EAAAL,EAAArU,OAAA,GAAAsU,GACA1U,EAAAF,EAAAG,EAAA6U,EAAAP,EAAAY,EAAAV,EAAArU,OACAiU,EAAAI,EAAArU,OAAA,EAAAmU,EAAAY,IAEAnV,EAAAF,EAAAG,EAAA6U,EAAAL,EAAArU,OAAA,EACAiU,EAAAI,EAAArU,OAAA,EAAAmU,EAIAtS,GAAArN,SAAAwB,MAAA,OAAA8J,EAAA,MAAA9J,MAAA,MAAA4J,EAAA,MAEAiC,EAAAuM,QACAvM,EAAAuM,MAAAvM,EAAArN,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA6L,EAAAuM,MACAjZ,KAAA,QAAA,+BAAA6e,GACAhe,MAAA,OAAAke,EAAA,MACAle,MAAA,MAAAie,EAAA,OAMAvgB,KAAAopB,YAAA,WACA,GAAAve,GAAA7K,KACAwR,EAAA3G,EAAA6O,yBAAA7O,EAAA7J,OAAAwQ,eACA0B,EAAArI,EAAA7J,OAAA+Q,MAAAmB,QACAmW,EAAAC,QAAAze,EAAA7J,OAAA+Q,MAAAoB,OACAoW,EAAA,EAAArW,EACAsW,EAAA3e,EAAAC,OAAA9J,OAAAqL,MAAAxB,EAAAC,OAAA9J,OAAAgU,OAAA5I,KAAAvB,EAAAC,OAAA9J,OAAAgU,OAAAC,MAAA,EAAA/B,EACAuW,EAAA,SAAAC,EAAAC,GACA,GAAAC,IAAAF,EAAAjoB,KAAA,KACAooB,EAAA,EAAA3W,EAAA,EAAAvP,KAAA4d,KAAA/P,EACA,IAAA6X,EACA,GAAAS,IAAAH,EAAAloB,KAAA,MACAsoB,EAAA7W,EAAA,EAAAvP,KAAA4d,KAAA/P,EAEA,WAAAkY,EAAApnB,MAAA,gBACAonB,EAAApnB,MAAA,cAAA,OACAonB,EAAAjoB,KAAA,IAAAmoB,EAAAC,GACAR,GAAAM,EAAAloB,KAAA,KAAAqoB,EAAAC,KAEAL,EAAApnB,MAAA,cAAA,SACAonB,EAAAjoB,KAAA,IAAAmoB,EAAAC,GACAR,GAAAM,EAAAloB,KAAA,KAAAqoB,EAAAC,IAKAlf,GAAAmf,YAAAjnB,KAAA,SAAAtC,EAAAC,GACA,GAAA2b,GAAArc,KACAiqB,EAAAvqB,EAAAuB,OAAAob,GACA6N,GAAAD,EAAAxoB,KAAA,KACA0oB,EAAAF,EAAA5oB,OAAA6L,uBACA,IAAAgd,EAAAC,EAAA9d,MAAA6G,EAAAsW,EAAA,CACA,GAAAY,GAAAf,EAAA3pB,EAAAuB,OAAA4J,EAAAwf,YAAA,GAAA3pB,IAAA,IACA+oB,GAAAQ,EAAAG,MAIAvf,EAAAmf,YAAAjnB,KAAA,SAAAtC,EAAAC,GACA,GAAA2b,GAAArc,KACAiqB,EAAAvqB,EAAAuB,OAAAob,EACA,IAAA,QAAA4N,EAAA3nB,MAAA,eAAA,CACA,GAAA4nB,IAAAD,EAAAxoB,KAAA,KACA0oB,EAAAF,EAAA5oB,OAAA6L,wBACAkd,EAAAf,EAAA3pB,EAAAuB,OAAA4J,EAAAwf,YAAA,GAAA3pB,IAAA,IACAmK,GAAAmf,YAAAjnB,KAAA,WACA,GAAAuZ,GAAAtc,KACAsqB,EAAA5qB,EAAAuB,OAAAqb,GACAiO,EAAAD,EAAAjpB,OAAA6L,wBACAsd,EAAAL,EAAA/d,KAAAme,EAAAne,KAAAme,EAAAle,MAAA,EAAA6G,GACAiX,EAAA/d,KAAA+d,EAAA9d,MAAA,EAAA6G,EAAAqX,EAAAne,MACA+d,EAAAje,IAAAqe,EAAAre,IAAAqe,EAAAje,OAAA,EAAA4G,GACAiX,EAAA7d,OAAA6d,EAAAje,IAAA,EAAAgH,EAAAqX,EAAAre,GACAse,KACAf,EAAAQ,EAAAG,GAEAF,GAAAD,EAAAxoB,KAAA,KACAyoB,EAAAC,EAAA9d,MAAA6G,EAAAqW,GACAE,EAAAQ,EAAAG,UAWApqB,KAAAyqB,gBAAA,WACAzqB,KAAA0qB,qBACA,IAAA7f,GAAA7K,KACA2qB,EAAA,GACAzX,EAAAlT,KAAAgB,OAAA+Q,MAAAmB,QACA0X,GAAA,CAuDA,IAtDA/f,EAAAmf,YAAAjnB,KAAA,WACA,GAAAsZ,GAAArc,KACAiqB,EAAAvqB,EAAAuB,OAAAob,GACA5G,EAAAwU,EAAAxoB,KAAA,IACAoJ,GAAAmf,YAAAjnB,KAAA,WACA,GAAAuZ,GAAAtc,IAEA,IAAAqc,IAAAC,EAAA,CACA,GAAAgO,GAAA5qB,EAAAuB,OAAAqb,EAGA,IAAA2N,EAAAxoB,KAAA,iBAAA6oB,EAAA7oB,KAAA,eAAA,CAEA,GAAA0oB,GAAAF,EAAA5oB,OAAA6L,wBACAqd,EAAAD,EAAAjpB,OAAA6L,wBACAsd,EAAAL,EAAA/d,KAAAme,EAAAne,KAAAme,EAAAle,MAAA,EAAA6G,GACAiX,EAAA/d,KAAA+d,EAAA9d,MAAA,EAAA6G,EAAAqX,EAAAne,MACA+d,EAAAje,IAAAqe,EAAAre,IAAAqe,EAAAje,OAAA,EAAA4G,GACAiX,EAAA7d,OAAA6d,EAAAje,IAAA,EAAAgH,EAAAqX,EAAAre,GACA,IAAAse,EAAA,CACAI,GAAA,CAGA,IAQAC,GARAnV,EAAA4U,EAAA7oB,KAAA,KACAqpB,EAAAX,EAAAje,IAAAqe,EAAAre,IAAA,GAAA,EACA6e,EAAAD,EAAAH,EACAK,GAAAvV,EAAAsV,EACAE,GAAAvV,EAAAqV,EAEAG,EAAA,EAAAhY,EACAiY,EAAAtgB,EAAAC,OAAA9J,OAAAsL,OAAAzB,EAAAC,OAAA9J,OAAAgU,OAAA9I,IAAArB,EAAAC,OAAA9J,OAAAgU,OAAAE,OAAA,EAAAhC,CAEA8X,GAAAb,EAAA7d,OAAA,EAAA4e,GACAL,GAAApV,EAAAuV,EACAA,GAAAvV,EACAwV,GAAAJ,GACAI,EAAAV,EAAAje,OAAA,EAAA4e,IACAL,GAAAnV,EAAAuV,EACAA,GAAAvV,EACAsV,GAAAH,GAEAG,EAAAb,EAAA7d,OAAA,EAAA6e,GACAN,EAAAG,GAAAvV,EACAuV,GAAAvV,EACAwV,GAAAJ,GACAI,EAAAV,EAAAje,OAAA,EAAA6e,IACAN,EAAAI,GAAAvV,EACAuV,GAAAvV,EACAsV,GAAAH,GAEAZ,EAAAxoB,KAAA,IAAAupB,GACAV,EAAA7oB,KAAA,IAAAwpB,UAGAL,EAAA,CAEA,GAAA/f,EAAA7J,OAAA+Q,MAAAoB,MAAA,CACA,GAAAiY,GAAAvgB,EAAAmf,YAAA,EACAnf,GAAAwf,YAAA5oB,KAAA,KAAA,SAAAhB,EAAAC,GACA,GAAA2qB,GAAA3rB,EAAAuB,OAAAmqB,EAAA1qB,GACA,OAAA2qB,GAAA5pB,KAAA,OAIAzB,KAAA0qB,oBAAA,KACA3iB,WAAA,WACA/H,KAAAyqB,mBACA5e,KAAA7L,MAAA,KAMAA,KAAAigB,OAAA,WAEA,GAAApV,GAAA7K,KACA+gB,EAAA,UACAO,EAAA,IAAAthB,KAAAgB,OAAA+P,OAAAC,KAAA,QAGA,IAAAhR,KAAAgB,OAAA+Q,MAAA,CAEA,GAAAuZ,GAAAtrB,KAAA6I,KAAAmT,OAAA,SAAAvb,GACA,GAAAoK,EAAA7J,OAAA+Q,MAAAsB,QAEA,CAEA,GAAAnO,IAAA,CA6BA,OA5BA2F,GAAA7J,OAAA+Q,MAAAsB,QAAA7S,QAAA,SAAAwb,GACA,GAAA1K,GAAA,GAAA1R,GAAAqK,KAAAC,MAAA8R,EAAAlL,OAAAjJ,QAAApH,EACA,IAAAgD,MAAA6N,GACApM,GAAA,MAEA,QAAA8W,EAAA1I,UACA,IAAA,IACAhC,EAAA0K,EAAA5R,QAAAlF,GAAA,EACA,MACA,KAAA,KACAoM,GAAA0K,EAAA5R,QAAAlF,GAAA,EACA,MACA,KAAA,IACAoM,EAAA0K,EAAA5R,QAAAlF,GAAA,EACA,MACA,KAAA,KACAoM,GAAA0K,EAAA5R,QAAAlF,GAAA,EACA,MACA,KAAA,IACAoM,IAAA0K,EAAA5R,QAAAlF,GAAA,EACA,MACA,SAEAA,GAAA,KAKAA,EAhCA,OAAA,IAoCAgb,EAAAlgB,IACAA,MAAAurB,aAAAvrB,KAAAoC,IAAAkW,MACAxV,UAAA,mBAAA9C,KAAAgB,OAAAqN,KAAA,UACAxF,KAAAyiB,EAAA,SAAA7qB,GAAA,MAAAA,GAAAyf,EAAAlf,OAAAiR,UAAA,WACAjS,KAAAurB,aAAAnL,QACA/d,OAAA,KACAZ,KAAA,QAAA,iBAAAzB,KAAAgB,OAAAqN,KAAA,UAEArO,KAAAgqB,aAAAhqB,KAAAgqB,YAAAtd,SACA1M,KAAAgqB,YAAAhqB,KAAAurB,aAAAlpB,OAAA,QACAZ,KAAA,QAAA,iBAAAzB,KAAAgB,OAAAqN,KAAA,UACArO,KAAAgqB,YACA9gB,KAAA,SAAAzI,GACA,MAAAb,GAAAgJ,YAAAnI,EAAAoK,EAAA7J,OAAA+Q,MAAA7I,MAAA,MAEA5G,MAAAuI,EAAA7J,OAAA+Q,MAAAzP,WACAb,MACAsD,EAAA,SAAAtE,GACA,GAAAsE,GAAA8F,EAAAC,OAAAiW,GAAAtgB,EAAAoK,EAAA7J,OAAA6P,OAAAC,QACAnN,KAAA4d,KAAA1W,EAAA6O,yBAAA7O,EAAA7J,OAAAwQ,WAAA/Q,IACAoK,EAAA7J,OAAA+Q,MAAAmB,OAEA,OADAzP,OAAAsB,KAAAA,GAAA,KACAA,GAEAoH,EAAA,SAAA1L,GACA,GAAA0L,GAAAtB,EAAAC,OAAAwW,GAAA7gB,EAAAoK,EAAA7J,OAAA+P,OAAAD,OAEA,OADArN,OAAA0I,KAAAA,GAAA,KACAA,GAEAkK,cAAA,WACA,MAAA,WAIAxL,EAAA7J,OAAA+Q,MAAAoB,QACAnT,KAAAqqB,aAAArqB,KAAAqqB,YAAA3d,SACA1M,KAAAqqB,YAAArqB,KAAAurB,aAAAlpB,OAAA,QACAZ,KAAA,QAAA,iBAAAzB,KAAAgB,OAAAqN,KAAA,UACArO,KAAAqqB,YACA/nB,MAAAuI,EAAA7J,OAAA+Q,MAAAoB,MAAA7Q,WACAb,MACA+pB,GAAA,SAAA/qB,GACA,GAAAsE,GAAA8F,EAAAC,OAAAiW,GAAAtgB,EAAAoK,EAAA7J,OAAA6P,OAAAC,OAEA,OADArN,OAAAsB,KAAAA,GAAA,KACAA,GAEA0Q,GAAA,SAAAhV,GACA,GAAA0L,GAAAtB,EAAAC,OAAAwW,GAAA7gB,EAAAoK,EAAA7J,OAAA+P,OAAAD,OAEA,OADArN,OAAA0I,KAAAA,GAAA,KACAA,GAEAsf,GAAA,SAAAhrB,GACA,GAAAsE,GAAA8F,EAAAC,OAAAiW,GAAAtgB,EAAAoK,EAAA7J,OAAA6P,OAAAC,QACAnN,KAAA4d,KAAA1W,EAAA6O,yBAAA7O,EAAA7J,OAAAwQ,WAAA/Q,IACAoK,EAAA7J,OAAA+Q,MAAAmB,QAAA,CAEA,OADAzP,OAAAsB,KAAAA,GAAA,KACAA,GAEA2Q,GAAA,SAAAjV,GACA,GAAA0L,GAAAtB,EAAAC,OAAAwW,GAAA7gB,EAAAoK,EAAA7J,OAAA+P,OAAAD,OAEA,OADArN,OAAA0I,KAAAA,GAAA,KACAA,MAKAnM,KAAAurB,aAAAlL,OAAA3T,SAIA,GAAAoR,GAAA9d,KAAAoC,IAAAkW,MACAxV,UAAA,sBAAA9C,KAAAgB,OAAAqN,MACAxF,KAAA7I,KAAA6I,KAAA,SAAApI,GAAA,MAAAA,GAAAT,KAAAgB,OAAAiR,WAAApG,KAAA7L,OAGAgiB,EAAAve,MAAAzD,KAAA8K,OAAA9J,OAAAsL,QAAA,EAAAtM,KAAA8K,OAAA9J,OAAAsL,MACAwR,GAAAsC,QACA/d,OAAA,QACAZ,KAAA,QAAA,iBAAAzB,KAAAgB,OAAAqN,MACA5M,KAAA,KAAA,SAAAhB,GAAA,MAAAT,MAAA4Y,aAAAnY,IAAAoL,KAAA7L,OACAyB,KAAA,YAAA,eAAAugB,EAAA,IAGA,IAAA1L,GAAA,SAAA7V,GACA,GAAAsE,GAAA/E,KAAA8K,OAAAiW,GAAAtgB,EAAAT,KAAAgB,OAAA6P,OAAAC,QACA3E,EAAAnM,KAAA8K,OAAAwW,GAAA7gB,EAAAT,KAAAgB,OAAA+P,OAAAD,OAGA,OAFArN,OAAAsB,KAAAA,GAAA,KACAtB,MAAA0I,KAAAA,GAAA,KACA,aAAApH,EAAA,IAAAoH,EAAA,KACAN,KAAA7L,MAEAyT,EAAA,SAAAhT,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAyQ,MAAAhR,IAAAoL,KAAA7L,MACAiT,EAAA,SAAAxS,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAiS,aAAAxS,IAAAoL,KAAA7L,MAEA6R,EAAAnS,EAAA0C,IAAA6f,SACAnQ,KAAA,SAAArR,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAwQ,WAAA/Q,IAAAoL,KAAA7L,OACAqO,KAAA,SAAA5N,GAAA,MAAAT,MAAA0Z,yBAAA1Z,KAAAgB,OAAAmQ,YAAA1Q,IAAAoL,KAAA7L,MAIAA,MAAAuY,gBACAuF,EACAtF,aACAqJ,SAAA7hB,KAAAgB,OAAAwX,WAAAqJ,UAAA,GACAC,KAAA9hB,KAAAgB,OAAAwX,WAAAsJ,MAAA,gBACArgB,KAAA,YAAA6U,GACA7U,KAAA,OAAAgS,GACAhS,KAAA,eAAAwR,GACAxR,KAAA,IAAAoQ,GAEAiM,EACArc,KAAA,YAAA6U,GACA7U,KAAA,OAAAgS,GACAhS,KAAA,eAAAwR,GACAxR,KAAA,IAAAoQ,GAIAiM,EAAAuC,OAAA3T,SAGAoR,EAAAnS,GAAA,sBAAA,SAAAqD,GACAhP,KAAA8K,OAAA4S,KAAA,kBAAA1O,GAAA,IACAnD,KAAA7L,OAGAA,KAAA6d,eAAAC,GAGA9d,KAAAgB,OAAA+Q,QACA/R,KAAAopB,cACAppB,KAAA0qB,oBAAA,EACA1qB,KAAAyqB,kBAEAzqB,KAAAgqB,YAAAre,GAAA,sBAAA,SAAAqD,GACAhP,KAAA8K,OAAA4S,KAAA,kBAAA1O,GAAA,IACAnD,KAAA7L,OAEAA,KAAA6d,eAAA7d,KAAAgqB,eAMAhqB,KAAA0rB,gBAAA,SAAA1c,GACA,GAAA2c,GAAA,IACA,IAAA,mBAAA3c,GACA,KAAA,mDAGA2c,GAFA,gBAAA3c,GACAhP,KAAAgB,OAAAiR,UAAA,mBAAAjD,GAAAhP,KAAAgB,OAAAiR,UACAjD,EAAAhP,KAAAgB,OAAAiR,UAAAnD,WACA,mBAAAE,GAAAA,GACAA,EAAAA,GAAAF,WAEAE,EAAAF,WAGAE,EAAAF,WAEA9O,KAAAyL,YAAAmgB,YAAAC,SAAAF,KAGA3rB,OAYAJ,EAAA8f,WAAAG,OAAA,UAAA,oBAQAiM,aAAA,WACA,GAAAC,GAAA/rB,KAAAgB,OAAA6P,OAAAC,OAAA,IAEA+B,EAAA7S,KAAAgB,OAAA6P,OAAAgC,cACA,KAAAA,EACA,KAAA,cAAA7S,KAAAgB,OAAAM,GAAA,8BAGA,IAAA0qB,GAAAhsB,KAAA6I,KACAojB,KAAA,SAAA5P,EAAAC,GACA,GAAA4P,GAAA7P,EAAAxJ,GACAsZ,EAAA7P,EAAAzJ,GACAuZ,EAAAF,EAAApd,SAAAod,EAAApd,WAAAiQ,cAAAmN,EACAG,EAAAF,EAAArd,SAAAqd,EAAArd,WAAAiQ,cAAAoN,CACA,OAAAC,KAAAC,EAAA,EAAAD,EAAAC,GAAA,EAAA,GAMA,OALAL,GAAAxrB,QAAA,SAAAC,EAAAC,GAGAD,EAAAsrB,GAAAtrB,EAAAsrB,IAAArrB,IAEAsrB,GASAM,wBAAA,WAGA,GAAAzZ,GAAA7S,KAAAgB,OAAA6P,OAAAgC,eACAkZ,EAAA/rB,KAAAgB,OAAA6P,OAAAC,OAAA,IACAyb,IACAvsB,MAAA6I,KAAArI,QAAA,SAAAgsB,GACA,GAAAC,GAAAD,EAAA3Z,GACA9N,EAAAynB,EAAAT,GACAW,EAAAH,EAAAE,KAAA1nB,EAAAA,EACAwnB,GAAAE,IAAA9oB,KAAAE,IAAA6oB,EAAA,GAAA3nB,GAAApB,KAAAG,IAAA4oB,EAAA,GAAA3nB,KAGA,IAAA4nB,GAAA3qB,OAAAC,KAAAsqB,EAGA,OAFAvsB,MAAA4sB,uBAAAD,GAEAJ,GAwBAK,uBAAA,SAAAD,GACA,GAAAE,GAAA7sB,KAAAgB,OAAAyQ,MAAAJ,WACAyb,EAAA9sB,KAAAmX,aAAA1F,MAAAJ,UAGA,IAAA,oBAAArR,KAAAgB,OAAAyQ,MAAAL,eACA,KAAA,uEAGA,IAAA0b,EAAA/Z,WAAArQ,QAAAoqB,EAAAnb,OAAAjP,OAAA,CAEA,GAAAqqB,KACAD,GAAA/Z,WAAAvS,QAAA,SAAAisB,GAAAM,EAAAN,GAAA,IACAE,EAAAK,MAAA,SAAA1e,GAAA,MAAAye,GAAA/iB,eAAAsE,KAEAue,EAAA9Z,WAAA+Z,EAAA/Z,WAEA8Z,EAAA9Z,WAAA4Z,MAGAE,GAAA9Z,WAAA4Z,CAGA,IAAAM,EACA,IAAAH,EAAAnb,OAAAjP,OACAuqB,EAAAH,EAAAnb,WACA,CACA,GAAAub,GAAAP,EAAAjqB,QAAA,GAAAhD,EAAAytB,MAAAC,WAAA1tB,EAAAytB,MAAAE,UACAJ,GAAAC,IAAAxnB,QAEA,KAAAunB,EAAAvqB,OAAAiqB,EAAAjqB,QAAAuqB,EAAAA,EAAAK,OAAAL,EACAA,GAAAA,EAAArmB,MAAA,EAAA+lB,EAAAjqB,QACAmqB,EAAAlb,OAAAsb,GAUA3S,SAAA,SAAAP,EAAAQ,GACA,IAAA,IAAA,KAAA5T,QAAAoT,MAAA,EACA,KAAA,8BAEA,IAAAvU,GAAA+U,EAAA/U,UAAA,MACA,KAAA,OAAA,SAAA,SAAAmB,QAAAnB,MAAA,EACA,KAAA,uBAGA,IAAA+nB,GAAAvtB,KAAAwtB,WACA,KAAAD,IAAAvrB,OAAAC,KAAAsrB,GAAA7qB,OACA,QAGA,IAAA,MAAAqX,EACA,QAGA,IAAA,MAAAA,EAAA,CAEA,GAAA0T,GAAAztB,KAAAgB,OAAAyQ,MAAAJ,WAAA0B,eACA2a,EAAA1tB,KAAAgB,OAAAyQ,MAAAJ,WAAAM,UAEA,OAAA3P,QAAAC,KAAAsrB,GAAAljB,IAAA,SAAAoiB,EAAAxjB,GACA,GACA0kB,GADAjB,EAAAa,EAAAd,EAGA,QAAAjnB,GACA,IAAA,OACAmoB,EAAAjB,EAAA,EACA,MACA,KAAA,SAEA,GAAAkB,GAAAlB,EAAA,GAAAA,EAAA,EACAiB,GAAAjB,EAAA,IAAA,IAAAkB,EAAAA,EAAAlB,EAAA,IAAA,CACA,MACA,KAAA,QACAiB,EAAAjB,EAAA,GAGA,OACA3nB,EAAA4oB,EACAzkB,KAAAujB,EACAnqB,OACAmR,KAAAia,EAAAD,EAAA9mB,QAAA8lB,KAAA,gBAOArT,uBAAA,WAOA,MANApZ,MAAA6I,KAAA7I,KAAA8rB,eAKA9rB,KAAAwtB,YAAAxtB,KAAAssB,0BACAtsB,QC5nBAJ,EAAAiuB,iBAAA,WAEA,GAAA7f,MAEA8f,KAEAC,EAAA,SAAAhpB,GACA,IAAA,GAAArE,GAAA,EAAAA,EAAAotB,EAAAprB,OAAAhC,IAAA,CACA,IAAAotB,EAAAptB,GAAAstB,YACA,KAAA,gCAAAttB,EAAA,gDAEA,IAAAotB,EAAAptB,GAAAstB,cAAAjpB,EACA,MAAA+oB,GAAAptB,GAGA,MAAA,MA6GA,OArGAsN,GAAAI,IAAA,SAAAE,GACA,MAAAyf,GAAAzf,IAQAN,EAAAyB,IAAA,SAAAwe,GACAA,EAAAD,aACA1kB,QAAA4kB,KAAA,iDAEAJ,EAAApnB,KAAAunB,IAWAjgB,EAAA6R,OAAA,SAAAC,EAAAqO,EAAApO,GACA,GAAAjV,GAAAijB,EAAAjO,EACA,KAAAhV,EACA,KAAA,8DAEA,KAAAqjB,EACA,KAAA,6CAEA,IAAA,gBAAApO,GACA,KAAA,kDAEA,IAAAC,GAAApgB,EAAAyN,SAAAvC,EAAAiV,EAGA,OAFAC,GAAAgO,YAAAG,EACAL,EAAApnB,KAAAsZ,GACAA,GAIAhS,EAAAtH,KAAA,SAAAunB,GACA3kB,QAAA4kB,KAAA,sEACAlgB,EAAAyB,IAAAwe,IAOAjgB,EAAA0B,KAAA,WACA,MAAAoe,GAAAzjB,IAAA,SAAAtF,GAAA,MAAAA,GAAAipB,eAQAhgB,EAAAJ,OAAA,SAAAU,GAEA,GAAA8f,GAAAL,EAAAzf,EACA,IAAA8f,EAAA,CACA,GAAAC,GAAA3gB,SAEA,OADA2gB,GAAA,GAAA,KACA,IAAAC,SAAA3gB,UAAA9B,KAAA4B,MAAA2gB,EAAAC,IAEA,KAAA,wCAAA/f,GAUAN,EAAAugB,OAAA,WACA,MAAAT,IASA9f,EAAAwgB,OAAA,SAAAzpB,GACA+oB,EAAA/oB,GAQAiJ,EAAAygB,MAAA,WACAX,MAGA9f,KAcApO,EAAA8uB,wBAAA,WAEA,GAAA1gB,MACA6J,KAEA8W,EAAA,SAAArgB,GACA,IAAAA,EACA,MAAA,KAEA,IAAAsgB,GAAA/W,EAAAvJ,EACA,IAAAsgB,EACA,MAAAA,EAEA,MAAA,kBAAAtgB,EAAA,cAMAugB,EAAA,SAAAvgB,GACA,MAAAqgB,GAAArgB,IAKAwgB,EAAA,SAAA/pB,GAIA,IAHA,GAEAgqB,GAFAC,KACA9f,EAAA,aAEA,QAAA6f,EAAA7f,EAAAtK,KAAAG,KACAiqB,EAAAtoB,KAAAqoB,EAAA,GAEA,OAAA,KAAAC,EAAAtsB,OACAmsB,EAAAG,EAAA,IACAA,EAAAtsB,OAAA,EACA,SAAAqC,GAEA,IAAA,GADAP,GAAAO,EACArE,EAAA,EAAAA,EAAAsuB,EAAAtsB,OAAAhC,IACA8D,EAAAqqB,EAAAG,EAAAtuB,IAAA8D,EAEA,OAAAA,IAGA,KAsDA,OA7CAwJ,GAAAI,IAAA,SAAAE,GACA,MAAAA,IAAA,MAAAA,EAAA2gB,UAAA,EAAA,GACAH,EAAAxgB,GAEAugB,EAAAvgB,IASAN,EAAAwB,IAAA,SAAAlB,EAAA4gB,GACA,GAAA,MAAA5gB,EAAA2gB,UAAA,EAAA,GACA,KAAA,kDAEAC,GACArX,EAAAvJ,GAAA4gB,QAEArX,GAAAvJ,IAUAN,EAAAyB,IAAA,SAAAnB,EAAA4gB,GACA,GAAArX,EAAAvJ,GACA,KAAA,4CAAAA,CAEAN,GAAAwB,IAAAlB,EAAA4gB,IAOAlhB,EAAA0B,KAAA,WACA,MAAA1N,QAAAC,KAAA4V,IAGA7J,KAOApO,EAAA8uB,wBAAAjf,IAAA,WAAA,SAAA1K,GACA,MAAAtB,OAAAsB,IAAAA,GAAA,EAAA,MACApB,KAAAD,IAAAqB,GAAApB,KAAAC,OAOAhE,EAAA8uB,wBAAAjf,IAAA,mBAAA,SAAA1K,GACA,GAAAtB,MAAAsB,GAAA,MAAA,KACA,IAAA,IAAAA,EAAA,MAAA,GACA,IAAA7B,GAAAS,KAAAwrB,KAAApqB,GACA6oB,EAAA1qB,EAAA6B,EACAqB,EAAAzC,KAAAU,IAAA,GAAAupB,EACA,OAAA,KAAA1qB,GACAkD,EAAA,IAAAnC,QAAA,GACA,IAAAf,GACAkD,EAAA,KAAAnC,QAAA,GAEAmC,EAAAnC,QAAA,GAAA,UAAAf,IAUAtD,EAAA8uB,wBAAAjf,IAAA,cAAA,SAAA1K,GACA,GAAAtB,MAAAsB,GAAA,MAAA,KACA,IAAA,IAAAA,EAAA,MAAA,GAEA,IACArB,GADAwC,EAAAvC,KAAAuC,IAAAnB,EAOA,OAJArB,GADAwC,EAAA,EACAvC,KAAAwrB,KAAAxrB,KAAAD,IAAAwC,GAAAvC,KAAAC,MAEAD,KAAAK,MAAAL,KAAAD,IAAAwC,GAAAvC,KAAAC,MAEAD,KAAAuC,IAAAxC,IAAA,EACAqB,EAAAd,QAAA,GAEAc,EAAAqqB,cAAA,GAAA1qB,QAAA,IAAA,IAAAA,QAAA,IAAA,YASA9E,EAAA8uB,wBAAAjf,IAAA,YAAA,SAAA4f,GACA,MAAAC,oBAAAD,KAUAzvB,EAAA8uB,wBAAAjf,IAAA,aAAA,SAAA4f,GACA,MAAAA,IAGAA,GAAA,GAEAA,EAAA3qB,QAAA,YAAA,SAAA6qB,GACA,OAAAA,GACA,IAAA,IACA,MAAA,QACA,KAAA,IACA,MAAA,QACA,KAAA,IACA,MAAA,MACA,KAAA,IACA,MAAA,MACA,KAAA,IACA,MAAA,OACA,KAAA,IACA,MAAA,aAjBA,KAiCA3vB,EAAAia,eAAA,WAEA,GAAA7L,MACAwhB,IA0DA,OAhDAxhB,GAAAI,IAAA,SAAAE,EAAA+C,EAAAjH,GACA,GAAAkE,EAEA,CAAA,GAAAkhB,EAAAlhB,GACA,MAAA,mBAAA+C,IAAA,mBAAAjH,GACAolB,EAAAlhB,GAEAkhB,EAAAlhB,GAAA+C,EAAAjH,EAGA,MAAA,mBAAAkE,EAAA,cARA,MAAA,OAiBAN,EAAAwB,IAAA,SAAAlB,EAAA4gB,GACAA,EACAM,EAAAlhB,GAAA4gB,QAEAM,GAAAlhB,IASAN,EAAAyB,IAAA,SAAAnB,EAAA4gB,GACA,GAAAM,EAAAlhB,GACA,KAAA,4CAAAA,CAEAN,GAAAwB,IAAAlB,EAAA4gB,IAQAlhB,EAAA0B,KAAA,WACA,MAAA1N,QAAAC,KAAAutB,IAGAxhB,KAaApO,EAAAia,eAAApK,IAAA,KAAA,SAAA4B,EAAAoe,GACA,MAAA,mBAAAA,IAAApe,EAAAC,cAAAme,EACA,mBAAApe,GAAAE,KACAF,EAAAE,KAEA,KAGAF,EAAAxH,OAmBAjK,EAAAia,eAAApK,IAAA,gBAAA,SAAA4B,EAAAoe,GACA,GAAA/d,GAAAL,EAAAK,WACAC,EAAAN,EAAAM,UACA,IAAA,mBAAA8d,IAAA,OAAAA,GAAAhsB,OAAAgsB,GACA,MAAApe,GAAA2B,WAAA3B,EAAA2B,WAAA,IAEA,IAAA0c,GAAAhe,EAAA4J,OAAA,SAAAqU,EAAAC,GACA,OAAAH,EAAAE,IAAAF,GAAAE,IAAAF,EAAAG,EACAD,EAEAC,GAGA,OAAAje,GAAAD,EAAA/K,QAAA+oB,MAgBA9vB,EAAAia,eAAApK,IAAA,kBAAA,SAAA4B,EAAAjH,GACA,MAAA,mBAAAA,IAAAiH,EAAA0B,WAAApM,QAAAyD,MAAA,EACAiH,EAAA2B,WAAA3B,EAAA2B,WAAA,KAEA3B,EAAAM,OAAAN,EAAA0B,WAAApM,QAAAyD,MAmBAxK,EAAAia,eAAApK,IAAA,cAAA,SAAA4B,EAAAoe,GACA,GAAA/d,GAAAL,EAAAK,WACAC,EAAAN,EAAAM,WACAke,EAAAxe,EAAA2B,WAAA3B,EAAA2B,WAAA,IACA,IAAAtB,EAAAhP,OAAA,GAAAgP,EAAAhP,SAAAiP,EAAAjP,OAAA,MAAAmtB,EACA,IAAA,mBAAAJ,IAAA,OAAAA,GAAAhsB,OAAAgsB,GAAA,MAAAI,EACA,KAAAJ,GAAApe,EAAAK,OAAA,GACA,MAAAC,GAAA,EACA,KAAA8d,GAAApe,EAAAK,OAAAL,EAAAK,OAAAhP,OAAA,GACA,MAAAiP,GAAAD,EAAAhP,OAAA,EAEA,IAAAotB,GAAA,IAKA,IAJApe,EAAAlR,QAAA,SAAAuvB,EAAApW,GACAA,GACAjI,EAAAiI,EAAA,KAAA8V,GAAA/d,EAAAiI,KAAA8V,IAAAK,EAAAnW,KAEA,OAAAmW,EAAA,MAAAD,EACA,IAAAG,KAAAP,EAAA/d,EAAAoe,EAAA,KAAApe,EAAAoe,GAAApe,EAAAoe,EAAA,GACA,OAAAG,UAAAD,GACAtwB,EAAA0nB,YAAAzV,EAAAme,EAAA,GAAAne,EAAAme,IAAAE,GADAH,ICrgBAjwB,EAAAswB,UAAA,SAAAplB,GAEA,KAAAA,YAAAlL,GAAA8B,MAAAoJ,YAAAlL,GAAAqX,OACA,KAAA,sEA4BA,OAzBAjX,MAAA8K,OAAAA,EAEA9K,KAAAsB,GAAAtB,KAAA8K,OAAAqN,YAAA,aAEAnY,KAAAqO,KAAArO,KAAA8K,iBAAAlL,GAAA8B,KAAA,OAAA,QAEA1B,KAAAyL,YAAA,SAAAzL,KAAAqO,KAAArO,KAAA8K,OAAA9K,KAAA8K,OAAAA,OAGA9K,KAAAc,SAAA,KAEAd,KAAAmU,cAKAnU,KAAAmwB,aAAA,KAMAnwB,KAAAowB,SAAA,EAGApwB,KAAAyC,cAQA7C,EAAAswB,UAAAviB,UAAAlL,WAAA;AAyBA,MAvBAsN,OAAAC,QAAAhQ,KAAA8K,OAAA9J,OAAAkN,UAAAiG,aACAnU,KAAA8K,OAAA9J,OAAAkN,UAAAiG,WAAA3T,QAAA,SAAAQ,GACA,IACA,GAAAqvB,GAAAzwB,EAAAswB,UAAAI,WAAAliB,IAAApN,EAAAqN,KAAArN,EAAAhB,KACAA,MAAAmU,WAAAzN,KAAA2pB,GACA,MAAArR,GACA1V,QAAA4kB,KAAAlP,KAEAnT,KAAA7L,OAIA,UAAAA,KAAAqO,OACA3O,EAAAuB,OAAAjB,KAAA8K,OAAAA,OAAA1I,IAAAf,OAAAmJ,YAAAmB,GAAA,aAAA3L,KAAAsB,GAAA,WACAyK,aAAA/L,KAAAmwB,cACAnwB,KAAAc,UAAA,WAAAd,KAAAc,SAAAwB,MAAA,eAAAtC,KAAAsL,QACAO,KAAA7L,OACAN,EAAAuB,OAAAjB,KAAA8K,OAAAA,OAAA1I,IAAAf,OAAAmJ,YAAAmB,GAAA,YAAA3L,KAAAsB,GAAA,WACAyK,aAAA/L,KAAAmwB,cACAnwB,KAAAmwB,aAAApoB,WAAA,WAAA/H,KAAA4L,QAAAC,KAAA7L,MAAA,MACA6L,KAAA7L,QAGAA,MASAJ,EAAAswB,UAAAviB,UAAA4iB,cAAA,WACA,GAAAvwB,KAAAowB,QAAA,OAAA,CACA,IAAAA,IAAA,CAOA,OALApwB,MAAAmU,WAAA3T,QAAA,SAAA6vB,GACAD,EAAAA,GAAAC,EAAAE,kBAGAH,EAAAA,GAAApwB,KAAAyL,YAAAgN,iBAAAC,UAAA1Y,KAAAyL,YAAAoK,YAAA6C,WACA0X,GAOAxwB,EAAAswB,UAAAviB,UAAArC,KAAA,WACA,IAAAtL,KAAAc,SAAA,CACA,OAAAd,KAAAqO,MACA,IAAA,OACArO,KAAAc,SAAApB,EAAAuB,OAAAjB,KAAA8K,OAAA1I,IAAAf,OAAAmJ,YACAkB,OAAA,MAAA,eACA,MACA,KAAA,QACA1L,KAAAc,SAAApB,EAAAuB,OAAAjB,KAAA8K,OAAAA,OAAA1I,IAAAf,OAAAmJ,YACAkB,OAAA,MAAA,2DAAAjB,QAAA,sBAAA,GAGAzK,KAAAc,SAAA2J,QAAA,gBAAA,GAAAA,QAAA,MAAAzK,KAAAqO,KAAA,cAAA,GAAA5M,KAAA,KAAAzB,KAAAsB,IAIA,MAFAtB,MAAAmU,WAAA3T,QAAA,SAAA6vB,GAAAA,EAAA/kB,SACAtL,KAAAc,SAAAwB,OAAAkuB,WAAA,YACAxwB,KAAA8L,UAOAlM,EAAAswB,UAAAviB,UAAA7B,OAAA,WACA,MAAA9L,MAAAc,UACAd,KAAAmU,WAAA3T,QAAA,SAAA6vB,GAAAA,EAAAvkB,WACA9L,KAAAwF,YAFAxF,MASAJ,EAAAswB,UAAAviB,UAAAnI,SAAA,WACA,IAAAxF,KAAAc,SAAA,MAAAd,KAEA,IAAA,UAAAA,KAAAqO,KAAA,CACA,GAAArC,GAAAhM,KAAA8K,OAAAmB,gBACAC,GAAAF,EAAAG,EAAA,KAAA2C,WAAA,KACA1C,EAAAJ,EAAAjH,EAAA+J,WAAA,KACAzC,GAAArM,KAAA8K,OAAA9J,OAAAqL,MAAA,GAAAyC,WAAA,IACA9O,MAAAc,SAAAwB,OAAAkD,SAAA,WAAA0G,IAAAA,EAAAE,KAAAA,EAAAC,MAAAA,IAIA,MADArM,MAAAmU,WAAA3T,QAAA,SAAA6vB,GAAAA,EAAA7qB,aACAxF,MAQAJ,EAAAswB,UAAAviB,UAAA/B,KAAA,WACA,OAAA5L,KAAAc,UAAAd,KAAAuwB,gBAAAvwB,MACAA,KAAAmU,WAAA3T,QAAA,SAAA6vB,GAAAA,EAAAzkB,SACA5L,KAAAc,SAAAwB,OAAAkuB,WAAA,WACAxwB,OAQAJ,EAAAswB,UAAAviB,UAAA8iB,QAAA,SAAAC,GAEA,MADA,mBAAAA,KAAAA,GAAA,GACA1wB,KAAAc,SACAd,KAAAuwB,kBAAAG,EAAA1wB,MACAA,KAAAmU,WAAA3T,QAAA,SAAA6vB,GAAAA,EAAAI,SAAA,KACAzwB,KAAAmU,cACAnU,KAAAc,SAAA4L,SACA1M,KAAAc,SAAA,KACAd,MANAA,MA0BAJ,EAAAswB,UAAAS,UAAA,SAAA3vB,EAAA8J,GAiDA,MA/CA9K,MAAAgB,OAAAA,MACAhB,KAAAgB,OAAAyQ,QAAAzR,KAAAgB,OAAAyQ,MAAA,QAGAzR,KAAA8K,OAAAA,GAAA,KAKA9K,KAAA4wB,aAAA,KAEA5wB,KAAAyL,YAAA,KAMAzL,KAAA6wB,WAAA,KACA7wB,KAAA8K,iBAAAlL,GAAAswB,YAEA,UAAAlwB,KAAA8K,OAAAuD,MACArO,KAAA4wB,aAAA5wB,KAAA8K,OAAAA,OACA9K,KAAAyL,YAAAzL,KAAA8K,OAAAA,OAAAA,OACA9K,KAAA6wB,WAAA7wB,KAAA4wB,eAEA5wB,KAAAyL,YAAAzL,KAAA8K,OAAAA,OACA9K,KAAA6wB,WAAA7wB,KAAAyL,cAIAzL,KAAAc,SAAA,KAMAd,KAAA8wB,OAAA,KAOA9wB,KAAAowB,SAAA,EACApwB,KAAAgB,OAAAwE,WAAAxF,KAAAgB,OAAAwE,SAAA,QAGAxF,MAMAJ,EAAAswB,UAAAS,UAAAhjB,UAAArC,KAAA,WACA,GAAAtL,KAAA8K,QAAA9K,KAAA8K,OAAAhK,SAAA,CACA,IAAAd,KAAAc,SAAA,CACA,GAAAsT,IAAA,QAAA,SAAA,OAAAzN,QAAA3G,KAAAgB,OAAAoT,mBAAA,EAAA,uBAAApU,KAAAgB,OAAAoT,eAAA,EACApU,MAAAc,SAAAd,KAAA8K,OAAAhK,SAAAuB,OAAA,OACAZ,KAAA,QAAA,gBAAAzB,KAAAgB,OAAAwE,SAAA4O,GACApU,KAAAgB,OAAAsB,OAAAtC,KAAAc,SAAAwB,MAAAtC,KAAAgB,OAAAsB,OACA,kBAAAtC,MAAAyC,YAAAzC,KAAAyC,aAKA,MAHAzC,MAAA8wB,QAAA,gBAAA9wB,KAAA8wB,OAAAlpB,QAAA5H,KAAA8wB,OAAAC,KAAAzlB,OACAtL,KAAAc,SAAAwB,OAAAkuB,WAAA,YACAxwB,KAAA8L,SACA9L,KAAAwF,aAMA5F,EAAAswB,UAAAS,UAAAhjB,UAAA7B,OAAA,aAKAlM,EAAAswB,UAAAS,UAAAhjB,UAAAnI,SAAA,WAEA,MADAxF,MAAA8wB,QAAA9wB,KAAA8wB,OAAAC,KAAAvrB,WACAxF,MAMAJ,EAAAswB,UAAAS,UAAAhjB,UAAA4iB,cAAA,WACA,QAAAvwB,KAAAowB,YACApwB,KAAA8wB,SAAA9wB,KAAA8wB,OAAAV,UAOAxwB,EAAAswB,UAAAS,UAAAhjB,UAAA/B,KAAA,WACA,OAAA5L,KAAAc,UAAAd,KAAAuwB,gBAAAvwB,MACAA,KAAA8wB,QAAA9wB,KAAA8wB,OAAAC,KAAAnlB,OACA5L,KAAAc,SAAAwB,OAAAkuB,WAAA,WACAxwB,OAOAJ,EAAAswB,UAAAS,UAAAhjB,UAAA8iB,QAAA,SAAAC,GAEA,MADA,mBAAAA,KAAAA,GAAA,GACA1wB,KAAAc,SACAd,KAAAuwB,kBAAAG,EAAA1wB,MACAA,KAAA8wB,QAAA9wB,KAAA8wB,OAAAC,MAAA/wB,KAAA8wB,OAAAC,KAAAN,UACAzwB,KAAAc,SAAA4L,SACA1M,KAAAc,SAAA,KACAd,KAAA8wB,OAAA,KACA9wB,MANAA,MAcAJ,EAAAswB,UAAAI,WAAA,WAEA,GAAAtiB,MACAmG,IA8DA,OArDAnG,GAAAI,IAAA,SAAAE,EAAAtN,EAAA8J,GACA,GAAAwD,EAEA,CAAA,GAAA6F,EAAA7F,GAAA,CACA,GAAA,gBAAAtN,GACA,KAAA,oDAAAsN,EAAA,GAEA,OAAA,IAAA6F,GAAA7F,GAAAtN,EAAA8J,GAGA,KAAA,wBAAAwD,EAAA,cARA,MAAA,OAiBAN,EAAAwB,IAAA,SAAAlB,EAAA+hB,GACA,GAAAA,EAAA,CACA,GAAA,kBAAAA,GACA,KAAA,sCAAA/hB,EAAA,wCAEA6F,GAAA7F,GAAA+hB,EACAlc,EAAA7F,GAAAX,UAAA,GAAA/N,GAAAswB,UAAAS,qBAGAxc,GAAA7F,IASAN,EAAAyB,IAAA,SAAAnB,EAAA+hB,GACA,GAAAlc,EAAA7F,GACA,KAAA,iDAAAA,CAEAN,GAAAwB,IAAAlB,EAAA+hB,IAQAriB,EAAA0B,KAAA,WACA,MAAA1N,QAAAC,KAAAkS,IAGAnG,KAUApO,EAAAswB,UAAAS,UAAAK,OAAA,SAAAlmB,GAEA,KAAAA,YAAAlL,GAAAswB,UAAAS,WACA,KAAA,6DAGA3wB,MAAA8K,OAAAA,EAEA9K,KAAA4wB,aAAA5wB,KAAA8K,OAAA8lB,aAEA5wB,KAAAyL,YAAAzL,KAAA8K,OAAAW,YAEAzL,KAAA6wB,WAAA7wB,KAAA8K,OAAA+lB,WAGA7wB,KAAAixB,iBAAAjxB,KAAA8K,OAAAA,OAEA9K,KAAAc,SAAA,KAMAd,KAAAkxB,IAAA,IAOAlxB,KAAAmxB,OAAA,SAAAD,GAEA,MADA,mBAAAA,KAAAlxB,KAAAkxB,IAAAA,EAAApiB,YACA9O,MAQAA,KAAAkB,KAAA,GAQAlB,KAAAoxB,QAAA,SAAAlwB,GAEA,MADA,mBAAAA,KAAAlB,KAAAkB,KAAAA,EAAA4N,YACA9O,MAKAA,KAAAqxB,QAAArxB,KAAAsxB,QAOAtxB,KAAAsU,MAAA,GAMAtU,KAAAuxB,SAAA,SAAAjd,GAEA,MADA,mBAAAA,KAAAtU,KAAAsU,MAAAA,EAAAxF,YACA9O,MAOAA,KAAAyR,MAAA,OAQAzR,KAAAwxB,SAAA,SAAA/f,GAKA,MAJA,mBAAAA,MACA,OAAA,MAAA,SAAA,SAAA,QAAA,OAAA,UAAA9K,QAAA8K,MAAA,EAAAzR,KAAAyR,MAAAA,EACAzR,KAAAyR,MAAA,QAEAzR,MAQAA,KAAAsC,SAMAtC,KAAAyxB,SAAA,SAAAnvB,GAEA,MADA,mBAAAA,KAAAtC,KAAAsC,MAAAA,GACAtC,MAQAA,KAAA0xB,SAAA,WACA,GAAAtd,IAAA,QAAA,SAAA,OAAAzN,QAAA3G,KAAA8K,OAAA9J,OAAAoT,mBAAA,EAAA,8BAAApU,KAAA8K,OAAA9J,OAAAoT,eAAA,EACA,OAAA,2CAAApU,KAAAyR,OAAAzR,KAAA4H,OAAA,IAAA5H,KAAA4H,OAAA,IAAAwM,GASApU,KAAAowB,SAAA,EAOApwB,KAAA2xB,WAAA,EAMA3xB,KAAA4xB,aAAA,SAAAC,GAIA,MAHAA,GAAA,mBAAAA,IAAAvI,QAAAuI,GACA7xB,KAAA2xB,UAAAE,EACA7xB,KAAA2xB,YAAA3xB,KAAAowB,SAAA,GACApwB,MAMAA,KAAAuwB,cAAA,WACA,MAAAvwB,MAAA2xB,WAAA3xB,KAAAowB,SAQApwB,KAAA4H,OAAA,GAKA5H,KAAA8xB,UAAA,SAAAlqB,GAEA,MADA,mBAAAA,KAAA,GAAA,cAAA,YAAAjB,QAAAiB,MAAA,IAAA5H,KAAA4H,OAAAA,GACA5H,KAAA8L,UAOA9L,KAAA+xB,UAAA,SAAAF,GAEA,MADAA,GAAA,mBAAAA,IAAAvI,QAAAuI,GACAA,EAAA7xB,KAAA8xB,UAAA,eACA,gBAAA9xB,KAAA4H,OAAA5H,KAAA8xB,UAAA,IACA9xB,MAOAA,KAAAgyB,QAAA,SAAAH,GAEA,MADAA,GAAA,mBAAAA,IAAAvI,QAAAuI,GACAA,EAAA7xB,KAAA8xB,UAAA,YACA,aAAA9xB,KAAA4H,OAAA5H,KAAA8xB,UAAA,IACA9xB,MAKAA,KAAAqS,YAAA,aACArS,KAAAiyB,eAAA,SAAA5f,GAGA,MAFA,kBAAAA,GAAArS,KAAAqS,YAAAA,EACArS,KAAAqS,YAAA,aACArS,MAGAA,KAAAuS,WAAA,aACAvS,KAAAkyB,cAAA,SAAA3f,GAGA,MAFA,kBAAAA,GAAAvS,KAAAuS,WAAAA,EACAvS,KAAAuS,WAAA,aACAvS,MAGAA,KAAAwS,QAAA,aACAxS,KAAAmyB,WAAA,SAAA3f,GAGA,MAFA,kBAAAA,GAAAxS,KAAAwS,QAAAA,EACAxS,KAAAwS,QAAA,aACAxS,MAOAA,KAAAsL,KAAA,WACA,GAAAtL,KAAA8K,OAIA,MAHA9K,MAAAc,WACAd,KAAAc,SAAAd,KAAA8K,OAAAhK,SAAAuB,OAAArC,KAAAkxB,KAAAzvB,KAAA,QAAAzB,KAAA0xB,aAEA1xB,KAAA8L,UAMA9L,KAAAoyB,UAAA,WAAA,MAAApyB,OAKAA,KAAA8L,OAAA,WACA,MAAA9L,MAAAc,UACAd,KAAAoyB,YACApyB,KAAAc,SACAW,KAAA,QAAAzB,KAAA0xB,YACAjwB,KAAA,QAAAzB,KAAAsU,OAAAhS,MAAAtC,KAAAsC,OACAqJ,GAAA,YAAA,aAAA3L,KAAA4H,OAAA,KAAA5H,KAAAqS,aACA1G,GAAA,WAAA,aAAA3L,KAAA4H,OAAA,KAAA5H,KAAAuS,YACA5G,GAAA,QAAA,aAAA3L,KAAA4H,OAAA,KAAA5H,KAAAwS,SACAtR,KAAAlB,KAAAkB,MACAlB,KAAA+wB,KAAAjlB,SACA9L,KAAAqyB,aACAryB,MAXAA,MAiBAA,KAAAqyB,WAAA,WAAA,MAAAryB,OAKAA,KAAA4L,KAAA,WAKA,MAJA5L,MAAAc,WAAAd,KAAAuwB,kBACAvwB,KAAAc,SAAA4L,SACA1M,KAAAc,SAAA,MAEAd,MASAA,KAAA+wB,MACAuB,eAAA,KACAC,eAAA,KACAC,gBAAA,EACA5c,QAAA,EAIAtK,KAAA,WAaA,MAZAtL,MAAA+wB,KAAAuB,iBACAtyB,KAAA+wB,KAAAuB,eAAA5yB,EAAAuB,OAAAjB,KAAAyL,YAAArJ,IAAAf,OAAAmJ,YAAAnI,OAAA,OACAZ,KAAA,QAAA,uCAAAzB,KAAAyR,OACAhQ,KAAA,KAAAzB,KAAA6wB,WAAA1Y,YAAA,mBACAnY,KAAA+wB,KAAAwB,eAAAvyB,KAAA+wB,KAAAuB,eAAAjwB,OAAA,OACAZ,KAAA,QAAA,6BACAzB,KAAA+wB,KAAAwB,eAAA5mB,GAAA,SAAA,WACA3L,KAAA+wB,KAAAyB,gBAAAxyB,KAAA+wB,KAAAwB,eAAAlxB,OAAAoxB,WACA5mB,KAAA7L,QAEAA,KAAA+wB,KAAAuB,eAAAhwB,OAAAkuB,WAAA,YACAxwB,KAAA+wB,KAAAnb,QAAA,EACA5V,KAAA+wB,KAAAjlB,UACAD,KAAA7L,MAIA8L,OAAA,WACA,MAAA9L,MAAA+wB,KAAAuB,gBACAtyB,KAAA+wB,KAAAlwB,WACAb,KAAA+wB,KAAAwB,iBAAAvyB,KAAA+wB,KAAAwB,eAAAlxB,OAAAoxB,UAAAzyB,KAAA+wB,KAAAyB,iBACAxyB,KAAA+wB,KAAAvrB,YAHAxF,KAAA+wB,MAIAllB,KAAA7L,MACAwF,SAAA,WACA,IAAAxF,KAAA+wB,KAAAuB,eAAA,MAAAtyB,MAAA+wB,IAEA/wB,MAAA+wB,KAAAuB,eAAAhwB,OAAAgK,OAAA,MACA,IAAAU,GAAA,EACA0lB,EAAA,GACAC,EAAA,GACA3mB,EAAAhM,KAAA6wB,WAAA5kB,gBACA2mB,EAAAC,SAAAC,gBAAAL,WAAAI,SAAA5rB,KAAAwrB,UACAM,EAAA/yB,KAAAyL,YAAAunB,qBACAC,EAAAjzB,KAAAixB,iBAAAnwB,SAAAO,OAAA6L,wBACAgmB,EAAAlzB,KAAAc,SAAAO,OAAA6L,wBACAimB,EAAAnzB,KAAA+wB,KAAAuB,eAAAjxB,OAAA6L,wBACAkmB,EAAApzB,KAAA+wB,KAAAwB,eAAAlxB,OAAAgyB,aACAnnB,EAAA,EAAAE,EAAA,CACA,WAAApM,KAAAixB,iBAAA5iB,MACAnC,EAAAF,EAAAG,EAAA8mB,EAAA3mB,OAAA,EAAAU,EACAZ,EAAAzI,KAAAG,IAAAkI,EAAAjH,EAAA/E,KAAA6wB,WAAA7vB,OAAAqL,MAAA8mB,EAAA9mB,MAAAW,EAAAhB,EAAAjH,EAAAiI,KAEAd,EAAAgnB,EAAAhe,OAAA0d,EAAA5lB,EAAA+lB,EAAA7mB,IACAE,EAAAzI,KAAAG,IAAAovB,EAAA9mB,KAAA8mB,EAAA7mB,MAAA8mB,EAAA9mB,MAAA0mB,EAAA3mB,KAAAJ,EAAAjH,EAAAiI,GAEA,IAAAsmB,GAAA3vB,KAAAG,IAAA9D,KAAA6wB,WAAA7vB,OAAAqL,MAAA,EAAAW,EAAA0lB,EAAAA,GACAa,EAAAD,EACAE,EAAAF,EAAA,EAAAtmB,EACAymB,EAAA9vB,KAAAG,IAAA9D,KAAA6wB,WAAA7vB,OAAAsL,OAAA,GAAAU,EAAA2lB,EAAAA,GACArmB,EAAA3I,KAAAE,IAAAuvB,EAAAK,GACAC,EAAAD,CAUA,OATAzzB,MAAA+wB,KAAAuB,eAAAhwB,OACA4J,IAAAA,EAAA4C,WAAA,KACA1C,KAAAA,EAAA0C,WAAA,KACAvC,YAAAgnB,EAAAzkB,WAAA,KACAtC,aAAAknB,EAAA5kB,WAAA,KACAxC,OAAAA,EAAAwC,WAAA,OAEA9O,KAAA+wB,KAAAwB,eAAAjwB,OAAAiK,YAAAinB,EAAA1kB,WAAA,OACA9O,KAAA+wB,KAAAwB,eAAAlxB,OAAAoxB,UAAAzyB,KAAA+wB,KAAAyB,gBACAxyB,KAAA+wB,MACAllB,KAAA7L,MACA4L,KAAA,WACA,MAAA5L,MAAA+wB,KAAAuB,gBACAtyB,KAAA+wB,KAAAuB,eAAAhwB,OAAAkuB,WAAA,WACAxwB,KAAA+wB,KAAAnb,QAAA,EACA5V,KAAA+wB,MAHA/wB,KAAA+wB,MAIAllB,KAAA7L,MACAywB,QAAA,WACA,MAAAzwB,MAAA+wB,KAAAuB,gBACAtyB,KAAA+wB,KAAAwB,eAAA7lB,SACA1M,KAAA+wB,KAAAuB,eAAA5lB,SACA1M,KAAA+wB,KAAAwB,eAAA,KACAvyB,KAAA+wB,KAAAuB,eAAA,KACAtyB,KAAA+wB,MALA/wB,KAAA+wB,MAMAllB,KAAA7L,MAQAa,SAAA,aAAAgL,KAAA7L,MAKA2zB,YAAA,SAAAC,GAiBA,MAhBA,kBAAAA,IACA5zB,KAAA+wB,KAAAlwB,SAAA+yB,EACA5zB,KAAAmyB,WAAA,WACAnyB,KAAA+wB,KAAAnb,QACA5V,KAAA+wB,KAAAzlB,OACAtL,KAAA+xB,YAAAjmB,SACA9L,KAAAowB,SAAA,IAEApwB,KAAA+wB,KAAAnlB,OACA5L,KAAA+xB,WAAA,GAAAjmB,SACA9L,KAAA2xB,YAAA3xB,KAAAowB,SAAA,KAEAvkB,KAAA7L,QAEAA,KAAAmyB,aAEAnyB,MACA6L,KAAA7L,QAYAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,QAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAAsL,KAAA,WAIA,MAHAtL,MAAA6zB,aAAA7zB,KAAA8K,OAAAhK,SAAAuB,OAAA,OACAZ,KAAA,QAAA,mCAAAzB,KAAAgB,OAAAwE,UACAxF,KAAA8zB,eAAA9zB,KAAA6zB,aAAAxxB,OAAA,MACArC,KAAA8L,UAEA9L,KAAA8L,OAAA,WACA,GAAAwI,GAAAtT,EAAAsT,MAAAxF,UAGA,OAFA9O,MAAAgB,OAAAuT,WAAAD,GAAA,WAAAtU,KAAAgB,OAAAuT,SAAA,YACAvU,KAAA8zB,eAAA5yB,KAAAoT,GACAtU,QASAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,aAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,GAAAioB,GAAA/zB,KAAAyL,YAAAzK,OAAAqL,MAAAyC,WAAAnI,QAAA,QAAA,EAAA3G,KAAAyL,YAAAzK,OAAAqL,MAAArM,KAAAyL,YAAAzK,OAAAqL,MAAApI,QAAA,GACA+vB,EAAAh0B,KAAAyL,YAAAzK,OAAAsL,OAAAwC,WAAAnI,QAAA,QAAA,EAAA3G,KAAAyL,YAAAzK,OAAAsL,OAAAtM,KAAAyL,YAAAzK,OAAAsL,OAAArI,QAAA,EAIA,OAHAjE,MAAAc,SAAAI,KAAA6yB,EAAA,QAAAC,EAAA,MACAhzB,EAAAgR,OAAAhS,KAAAc,SAAAW,KAAA,QAAAT,EAAAgR,OACAhR,EAAAsB,OAAAtC,KAAAc,SAAAwB,MAAAtB,EAAAsB,OACAtC,QAUAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,eAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WAUA,MATArI,OAAAzD,KAAAyL,YAAAtJ,MAAAmD,QAAA7B,MAAAzD,KAAAyL,YAAAtJ,MAAAoD,MACA,OAAAvF,KAAAyL,YAAAtJ,MAAAmD,OAAA,OAAAtF,KAAAyL,YAAAtJ,MAAAoD,IAIAvF,KAAAc,SAAAwB,MAAA,UAAA,SAHAtC,KAAAc,SAAAwB,MAAA,UAAA,MACAtC,KAAAc,SAAAI,KAAAtB,EAAAoD,oBAAAhD,KAAAyL,YAAAtJ,MAAAoD,IAAAvF,KAAAyL,YAAAtJ,MAAAmD,MAAA,MAAA,KAIAtE,EAAAgR,OAAAhS,KAAAc,SAAAW,KAAA,QAAAT,EAAAgR,OACAhR,EAAAsB,OAAAtC,KAAAc,SAAAwB,MAAAtB,EAAAsB,OACAtC,QASAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,WAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,MAAA9L,MAAA8wB,OAAA9wB,MACAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAA,kBAAAG,SAAA,uDACAU,eAAA,WACAjyB,KAAA8wB,OAAAhwB,SACA2J,QAAA,qCAAA,GACAvJ,KAAA,mBACAlB,KAAAi0B,oBAAApqB,KAAA,SAAAqqB,GACAl0B,KAAA8wB,OAAAhwB,SACAW,KAAA,OAAA,+BAAAyyB,GACAzpB,QAAA,qCAAA,GACAA,QAAA,wCAAA,GACAvJ,KAAA,mBACA2K,KAAA7L,QACA6L,KAAA7L,OACAkyB,cAAA,WACAlyB,KAAA8wB,OAAAhwB,SAAA2J,QAAA,wCAAA,IACAoB,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,KAAA8wB,OAAAhwB,SAAAW,KAAA,YAAA,iBAAAA,KAAA,WAAA,iBACAzB,OAEAA,KAAAm0B,WAAA,EACA,KAAA,GAAAC,KAAApyB,QAAAC,KAAA4wB,SAAAwB,aACA,GAAA,OAAAxB,SAAAwB,YAAAD,GAAA7V,MACAsU,SAAAwB,YAAAD,GAAA7V,KAAA5X,QAAA,oBAAA,EAAA,CAEA/G,EAAAkH,kBAAA,MAAA+rB,SAAAwB,YAAAD,GAAA7V,MACA1U,KAAA,SAAAzC,GACApH,KAAAm0B,WAAA/sB,EAAA1C,QAAA,UAAA,KAAAA,QAAA,OAAA,KACA1E,KAAAm0B,WAAAxtB,QAAA,mCACA3G,KAAAm0B,WAAAn0B,KAAAm0B,WAAAlF,UAAA,EAAAjvB,KAAAm0B,WAAAxtB,QAAA,oCAEAkF,KAAA7L,MACA,OAGAA,KAAAi0B,kBAAA,WACA,MAAAt0B,GAAA20B,MAAA,WAEA,GAAA3yB,GAAA3B,KAAA8K,OAAAhK,SAAAuB,OAAA,OAAAC,MAAA,UAAA,QACApB,KAAAlB,KAAAyL,YAAArJ,IAAAf,OAAAkzB,UAEA5yB,GAAAmB,UAAA,gBAAA4J,SACA/K,EAAAmB,UAAA,oBAAA4J,SAEA/K,EAAAmB,UAAA,eAAAC,KAAA,WACA,GAAAyxB,GAAA,IAAA90B,EAAAuB,OAAAjB,MAAAyB,KAAA,MAAAwtB,WAAA,GAAAroB,MAAA,GAAA,EACAlH,GAAAuB,OAAAjB,MAAAyB,KAAA,KAAA+yB,IAIA,IAAAC,GAAA/0B,EAAAuB,OAAAU,EAAAV,OAAA,OAAAI,OAAAmJ,YAAAtJ,OACAwzB,EAAA,oCAAA10B,KAAAm0B,WAAA,eACAQ,EAAAF,EAAA9tB,QAAA,KAAA,CAKA,OAJA8tB,GAAAA,EAAA7tB,MAAA,EAAA+tB,GAAAD,EAAAD,EAAA7tB,MAAA+tB,GAEAhzB,EAAA+K,SAEAkoB,KAAAtF,mBAAAmF,GAAA/vB,QAAA,kBAAA,SAAAQ,EAAA2vB,GACA,MAAAC,QAAAC,aAAA,KAAAF,OAEAhpB,KAAA7L,UAWAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,eAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,MAAA9L,MAAA8wB,OAAA9wB,MACAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAA,KAAAG,SAAA,gBACAY,WAAA,WACA,IAAAnxB,EAAAg0B,mBAAAC,QAAA,sEACA,OAAA,CAEA,IAAAjqB,GAAAhL,KAAA4wB,YAIA,OAHA5lB,GAAAkD,UAAAtC,MAAA,GACAlM,EAAAuB,OAAA+J,EAAAF,OAAA1I,IAAAf,OAAAmJ,YAAAmB,GAAA,aAAAX,EAAAmN,YAAA,aAAA,MACAzY,EAAAuB,OAAA+J,EAAAF,OAAA1I,IAAAf,OAAAmJ,YAAAmB,GAAA,YAAAX,EAAAmN,YAAA,aAAA,MACAnN,EAAAF,OAAAoqB,YAAAlqB,EAAA1J,KACAuK,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,SAUAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,gBAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,GAAA9L,KAAA8wB,OAAA,CACA,GAAAqE,GAAA,IAAAn1B,KAAA4wB,aAAA5vB,OAAAo0B,OAEA,OADAp1B,MAAA8wB,OAAAkB,QAAAmD,GACAn1B,KASA,MAPAA,MAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAA,KAAAG,SAAA,iBACAY,WAAA,WACAnyB,KAAA4wB,aAAAtX,SACAtZ,KAAA8L,UACAD,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,KAAA8L,YAUAlM,EAAAswB,UAAAI,WAAA7gB,IAAA,kBAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,GAAA9L,KAAA8wB,OAAA,CACA,GAAAuE,GAAAr1B,KAAA4wB,aAAA5vB,OAAAo0B,UAAAp1B,KAAAyL,YAAA6pB,qBAAA5yB,OAAA,CAEA,OADA1C,MAAA8wB,OAAAkB,QAAAqD,GACAr1B,KASA,MAPAA,MAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAA,KAAAG,SAAA,mBACAY,WAAA,WACAnyB,KAAA4wB,aAAAnX,WACAzZ,KAAA8L,UACAD,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,KAAA8L,YAaAlM,EAAAswB,UAAAI,WAAA7gB,IAAA,eAAA,SAAAzO,GAEA,MADApB,GAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACAjK,MAAAzD,KAAAyL,YAAAtJ,MAAAmD,QAAA7B,MAAAzD,KAAAyL,YAAAtJ,MAAAoD,MACAvF,KAAA8L,OAAA,iBACAxC,SAAA4kB,KAAA,6FAGAzqB,MAAAzC,EAAA4T,OAAA,IAAA5T,EAAA4T,QAAA5T,EAAA4T,KAAA,KACA,gBAAA5T,GAAAyT,cAAAzT,EAAAyT,YAAAzT,EAAA4T,KAAA,EAAA,IAAA,KACA,gBAAA5T,GAAA0T,eACA1T,EAAA0T,aAAA,oBAAA1T,EAAA4T,KAAA,EAAA,IAAA,KAAAhV,EAAAoD,oBAAAW,KAAAuC,IAAAlF,EAAA4T,MAAA,MAAA,SAEA5U,KAAA8L,OAAA,WACA,MAAA9L,MAAA8wB,OAAA9wB,MACAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAApwB,EAAAyT,aAAA8c,SAAAvwB,EAAA0T,cACAyd,WAAA,WACAnyB,KAAAyL,YAAAmgB,YACAtmB,MAAA3B,KAAAG,IAAA9D,KAAAyL,YAAAtJ,MAAAmD,MAAAtE,EAAA4T,KAAA,GACArP,IAAAvF,KAAAyL,YAAAtJ,MAAAoD,IAAAvE,EAAA4T,QAEA/I,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,WAWAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,cAAA,SAAAzO,GAEA,MADApB,GAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACAjK,MAAAzD,KAAAyL,YAAAtJ,MAAAmD,QAAA7B,MAAAzD,KAAAyL,YAAAtJ,MAAAoD,MACAvF,KAAA8L,OAAA,iBACAxC,SAAA4kB,KAAA,4FAGAzqB,MAAAzC,EAAA4T,OAAA,IAAA5T,EAAA4T,QAAA5T,EAAA4T,KAAA,IACA,gBAAA5T,GAAAyT,cAAAzT,EAAAyT,YAAAzT,EAAA4T,KAAA,EAAA,KAAA,MACA,gBAAA5T,GAAA0T,eACA1T,EAAA0T,aAAA,gBAAA1T,EAAA4T,KAAA,EAAA,MAAA,MAAA,QAAA,IAAAjR,KAAAuC,IAAAlF,EAAA4T,OAAA3Q,QAAA,GAAA,UAEAjE,KAAA8L,OAAA,WACA,GAAA9L,KAAA8wB,OAAA,CACA,GAAAyE,IAAA,EACAC,EAAAx1B,KAAAyL,YAAAtJ,MAAAoD,IAAAvF,KAAAyL,YAAAtJ,MAAAmD,KAQA,OAPAtE,GAAA4T,KAAA,IAAAnR,MAAAzD,KAAAyL,YAAAzK,OAAA2H,mBAAA6sB,GAAAx1B,KAAAyL,YAAAzK,OAAA2H,mBACA4sB,GAAA,GAEAv0B,EAAA4T,KAAA,IAAAnR,MAAAzD,KAAAyL,YAAAzK,OAAA0H,mBAAA8sB,GAAAx1B,KAAAyL,YAAAzK,OAAA0H,mBACA6sB,GAAA,GAEAv1B,KAAA8wB,OAAAkB,SAAAuD,GACAv1B,KAqBA,MAnBAA,MAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAApwB,EAAAyT,aAAA8c,SAAAvwB,EAAA0T,cACAyd,WAAA,WACA,GAAAqD,GAAAx1B,KAAAyL,YAAAtJ,MAAAoD,IAAAvF,KAAAyL,YAAAtJ,MAAAmD,MACAmwB,EAAA,EAAAz0B,EAAA4T,KACA8gB,EAAAF,EAAAC,CACAhyB,OAAAzD,KAAAyL,YAAAzK,OAAA2H,oBACA+sB,EAAA/xB,KAAAE,IAAA6xB,EAAA11B,KAAAyL,YAAAzK,OAAA2H,mBAEAlF,MAAAzD,KAAAyL,YAAAzK,OAAA0H,oBACAgtB,EAAA/xB,KAAAG,IAAA4xB,EAAA11B,KAAAyL,YAAAzK,OAAA0H,kBAEA,IAAAmiB,GAAAlnB,KAAAK,OAAA0xB,EAAAF,GAAA,EACAx1B,MAAAyL,YAAAmgB,YACAtmB,MAAA3B,KAAAG,IAAA9D,KAAAyL,YAAAtJ,MAAAmD,MAAAulB,EAAA,GACAtlB,IAAAvF,KAAAyL,YAAAtJ,MAAAoD,IAAAslB,KAEAhf,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,UAcAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,OAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,MAAA9L,MAAA8wB,OAAA9wB,MACAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAApwB,EAAAyT,aAAA8c,SAAAvwB,EAAA0T,cACA1U,KAAA8wB,OAAAC,KAAA4C,YAAA,WACA3zB,KAAA8wB,OAAAC,KAAAwB,eAAArxB,KAAAF,EAAA20B,YACA9pB,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,SAaAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,mBAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WAEA1N,KAAAyC,WAAA,WAEAzC,KAAAyL,YAAAtJ,MAAAyzB,MAAA51B,KAAAyL,YAAAtJ,MAAAyzB,UACA51B,KAAAyL,YAAAtJ,MAAAyzB,MAAAC,WAAA71B,KAAAyL,YAAAtJ,MAAAyzB,MAAAC,eAOA71B,KAAAyL,YAAAqqB,iBAEAhF,OAAA9wB,KAQAyP,IAAA,SAAAsmB,GACA,GAAA/mB,GAAAxF,KAAAkF,MAAAlF,KAAAC,UAAAssB,GACA,iBAAAA,IAAA,gBAAA/mB,GAAA9N,OACA8N,EAAA9N,KAAA,kBAAA60B,GAAA9c,OAAA8c,EAAA9c,SAAA8c,EAAAjnB,WAGA,KAAA,GAAApO,GAAA,EAAAA,EAAAV,KAAAmC,MAAAyzB,MAAAC,WAAAnzB,OAAAhC,IACA,GAAA8I,KAAAC,UAAAzJ,KAAAmC,MAAAyzB,MAAAC,WAAAn1B,MAAA8I,KAAAC,UAAAuF,GACA,MAAAhP,KAMA,OAHAA,MAAAmC,MAAAyzB,MAAAC,WAAAnvB,KAAAsI,GACAhP,KAAA4rB,aACA5rB,KAAA81B,gBAAAE,kBACAh2B,MACA6L,KAAA7L,KAAAyL,aAOAwqB,YAAA,SAAAtc,GACA,GAAA,mBAAA3Z,MAAAmC,MAAAyzB,MAAAC,WAAAlc,GACA,KAAA,oDAAAA,EAAA7K,UAKA,OAHA9O,MAAAmC,MAAAyzB,MAAAC,WAAApY,OAAA9D,EAAA,GACA3Z,KAAA4rB,aACA5rB,KAAA81B,gBAAAE,kBACAh2B,MACA6L,KAAA7L,KAAAyL,aAKAyqB,UAAA,WAIA,MAHAl2B,MAAAmC,MAAAyzB,MAAAC,cACA71B,KAAA4rB,aACA5rB,KAAA81B,gBAAAE,kBACAh2B,MACA6L,KAAA7L,KAAAyL,aAMAuqB,gBAAA,WACAh2B,KAAA8wB,OAAAhlB,SACA9L,KAAA8wB,OAAAC,KAAAjlB,UACAD,KAAA7L,QAEA6L,KAAA7L,MAEAA,KAAA8L,OAAA,WAEA,MAAA9L,MAAA8wB,OAAA9wB,MAEAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAApwB,EAAAyT,aAAA8c,SAAAvwB,EAAA0T,cACAyd,WAAA,WACAnyB,KAAA8wB,OAAAC,KAAAlwB,YACAgL,KAAA7L,OAEAA,KAAA8wB,OAAAC,KAAA4C,YAAA,WACA,GAAA7yB,GAAAd,KAAA8wB,OAAAC,KAAAwB,cAOA,IANAzxB,EAAAI,KAAA,IAEA,mBAAAlB,MAAAyL,YAAAtJ,MAAAyzB,MAAA10B,MACAJ,EAAAuB,OAAA,OAAAnB,KAAAlB,KAAAyL,YAAAtJ,MAAAyzB,MAAA10B,MAGAlB,KAAAyL,YAAAtJ,MAAAyzB,MAAAC,WAAAnzB,OAEA,CACA5B,EAAAuB,OAAA,MAAAnB,KAAA,qBAAAlB,KAAAyL,YAAAtJ,MAAAyzB,MAAAC,WAAAnzB,OAAA,IACA,IAAAyzB,GAAAr1B,EAAAuB,OAAA,QACArC,MAAAyL,YAAAtJ,MAAAyzB,MAAAC,WAAAr1B,QAAA,SAAA41B,EAAAzc,GACA,GAAAzY,GAAA,gBAAAk1B,IAAA,gBAAAA,GAAAl1B,KAAAk1B,EAAAl1B,KAAAk1B,EAAAtnB,WACAunB,EAAAF,EAAA9zB,OAAA,KACAg0B,GAAAh0B,OAAA,MAAAA,OAAA,UACAZ,KAAA,QAAA,2CAAAzB,KAAAgB,OAAAyQ,OACAnP,OAAA+R,cAAA,QACA1I,GAAA,QAAA,WACA3L,KAAAyL,YAAAqqB,gBAAAG,YAAAtc,IACA9N,KAAA7L,OACAkB,KAAA,KACAm1B,EAAAh0B,OAAA,MAAAnB,KAAAA,IACA2K,KAAA7L,OACAc,EAAAuB,OAAA,UACAZ,KAAA,QAAA,2CAAAzB,KAAAgB,OAAAyQ,OACAnP,OAAA+R,cAAA,QAAAnT,KAAA,2BACAyK,GAAA,QAAA,WACA3L,KAAAyL,YAAAqqB,gBAAAI,aACArqB,KAAA7L,WArBAc,GAAAuB,OAAA,KAAAnB,KAAA,2BAuBA2K,KAAA7L,OAEAA,KAAA8wB,OAAAsB,UAAA,WACA,GAAAlxB,GAAA,OACA,IAAAlB,KAAAyL,YAAAtJ,MAAAyzB,MAAAC,WAAAnzB,OAAA,CACA,GAAA4zB,GAAAt2B,KAAAyL,YAAAtJ,MAAAyzB,MAAAC,WAAAnzB,OAAA,EAAA,aAAA,WACAxB,IAAA,KAAAlB,KAAAyL,YAAAtJ,MAAAyzB,MAAAC,WAAAnzB,OAAA,IAAA4zB,EAAA,IAEAt2B,KAAA8wB,OAAAM,QAAAlwB,GAAA8wB,SAAA,IACAnmB,KAAA7L,MAEAA,KAAA8wB,OAAAxlB,OAEAtL,SASAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,sBAAA,SAAAzO,GAGA,GAFApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1M,EAAAuV,gBAAAvV,EAAAuV,cAAA,cACAvW,KAAA4wB,aAAAxa,YAAApV,EAAAuV,eACA,KAAA,qEAEAvW,MAAA8L,OAAA,WACA,GAAAjB,GAAA7K,KAAA4wB,aAAAxa,YAAApV,EAAAuV,eACArV,EAAA2J,EAAA7J,OAAAgT,aAAA,eAAA,cACA,OAAAhU,MAAA8wB,QACA9wB,KAAA8wB,OAAAM,QAAAlwB,GACAlB,KAAA8wB,OAAAxlB,OACAtL,KAAA8K,OAAAtF,WACAxF,OAEAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAAlwB,GACAqwB,SAAA,4DACAY,WAAA,WACAtnB,EAAAsc,oBACAnnB,KAAAu2B,eAAAxqB,aAAA/L,KAAAu2B,cACA,IAAApvB,GAAA0D,EAAA7J,OAAAwX,YAAA3N,EAAA7J,OAAAwX,WAAAqJ,UAAA,EAAA,CACA7hB,MAAAu2B,cAAAxuB,WAAA,WACA/H,KAAA4wB,aAAA1J,oBACAlnB,KAAAyL,YAAAjJ,kBACAqJ,KAAA7L,MAAAmH,GACAnH,KAAA8L,UACAD,KAAA7L,OACAA,KAAA8L,aAUAlM,EAAAswB,UAAAI,WAAA7gB,IAAA,iBAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,MAAA9L,MAAA8wB,OAAA9wB,MACAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAA,kBACAG,SAAA,yEACAY,WAAA,WACAnyB,KAAA4wB,aAAA1J,oBACAlnB,KAAA8L,UACAD,KAAA7L,OACAA,KAAA8wB,OAAAxlB,OACAtL,SASAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,gBAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WACA1N,KAAA8L,OAAA,WACA,GAAA5K,GAAAlB,KAAA4wB,aAAAhf,OAAA5Q,OAAA4U,OAAA,cAAA,aACA,OAAA5V,MAAA8wB,QACA9wB,KAAA8wB,OAAAM,QAAAlwB,GAAAoK,OACAtL,KAAA8K,OAAAtF,WACAxF,OAEAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OACA8f,SAAA,0CACAY,WAAA,WACAnyB,KAAA4wB,aAAAhf,OAAA5Q,OAAA4U,QAAA5V,KAAA4wB,aAAAhf,OAAA5Q,OAAA4U,OACA5V,KAAA4wB,aAAAhf,OAAAqO,SACAjgB,KAAA8L,UACAD,KAAA7L,OACAA,KAAA8L,aASAlM,EAAAswB,UAAAI,WAAA7gB,IAAA,cAAA,SAAAzO,GACApB,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,WAEA1N,KAAA8L,OAAA,WAKA,MAHA,gBAAA9K,GAAAyT,cAAAzT,EAAAyT,YAAA,eACA,gBAAAzT,GAAA0T,eAAA1T,EAAA0T,aAAA,uDAEA1U,KAAA8wB,OAAA9wB,MAEAA,KAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAAhxB,MACAwxB,SAAAxwB,EAAAyQ,OAAA2f,QAAApwB,EAAAyT,aAAA8c,SAAAvwB,EAAA0T,cACAyd,WAAA,WACAnyB,KAAA8wB,OAAAC,KAAAlwB,YACAgL,KAAA7L,OAEAA,KAAA8wB,OAAAC,KAAA4C,YAAA,WACA3zB,KAAA8wB,OAAAC,KAAAwB,eAAArxB,KAAA,GACA,IAAAi1B,GAAAn2B,KAAA8wB,OAAAC,KAAAwB,eAAAlwB,OAAA,QAoDA,OAnDArC,MAAA4wB,aAAArX,0BAAA3S,QAAAsf,UAAA1lB,QAAA,SAAAc,EAAAqY,GACA,GAAA9O,GAAA7K,KAAA4wB,aAAAxa,YAAA9U,GACAgN,EAAA,gBAAAzD,GAAA7J,OAAAsN,KAAAzD,EAAAvJ,GAAAuJ,EAAA7J,OAAAsN,KACA+nB,EAAAF,EAAA9zB,OAAA,KAEAg0B,GAAAh0B,OAAA,MAAAnB,KAAAoN,GAEAtN,EAAAoa,SAAA5a,QAAA,SAAAg2B,GACA,GAEAt1B,GAAAsR,EAAAuf,EAFA0E,EAAA72B,EAAAkX,UAAAiB,SAAAC,WAAArR,QAAA6vB,GACAE,EAAA92B,EAAAkX,UAAAiB,SAAAE,MAAAwe,EAEA5rB,GAAA0M,gBAAAif,IACAt1B,EAAAtB,EAAAkX,UAAAiB,SAAAG,eAAAue,GACAjkB,EAAA,KAAAkkB,EAAA,cACA3E,EAAA,iBAEA7wB,EAAAtB,EAAAkX,UAAAiB,SAAAE,MAAAwe,GACAjkB,EAAAkkB,EAAA,cACA3E,EAAA,IAEAsE,EAAAh0B,OAAA,MAAAA,OAAA,KACAZ,KAAA,QAAA,2CAAAzB,KAAAgB,OAAAyQ,MAAAsgB,GACAzvB,OAAA+R,cAAA,QACA1I,GAAA,QAAA,WAAAd,EAAA2H,KAAAxS,KAAA8wB,OAAAC,KAAAlwB,YAAAgL,KAAA7L,OACAkB,KAAAA,IACA2K,KAAA7L,MAEA,IAAA22B,GAAA,IAAAhd,EACAid,EAAAjd,IAAA3Z,KAAA4wB,aAAArX,0BAAA7W,OAAA,EACAm0B,EAAAR,EAAAh0B,OAAA,KACAw0B,GAAAx0B,OAAA,KACAZ,KAAA,QAAA,2EAAAzB,KAAAgB,OAAAyQ,OAAAmlB,EAAA,YAAA,KACAt0B,OAAA+R,cAAA,QACA1I,GAAA,QAAA,WAAAd,EAAA4O,WAAAzZ,KAAA8wB,OAAAC,KAAAlwB,YAAAgL,KAAA7L,OACAkB,KAAA,KAAAO,KAAA,QAAA,kCACAo1B,EAAAx0B,OAAA,KACAZ,KAAA,QAAA,4EAAAzB,KAAAgB,OAAAyQ,OAAAklB,EAAA,YAAA,KACAr0B,OAAA+R,cAAA,QACA1I,GAAA,QAAA,WAAAd,EAAAyO,SAAAtZ,KAAA8wB,OAAAC,KAAAlwB,YAAAgL,KAAA7L,OACAkB,KAAA,KAAAO,KAAA,QAAA,iCACAo1B,EAAAx0B,OAAA,KACAZ,KAAA,QAAA,6EACAa,OAAA+R,cAAA,QACA1I,GAAA,QAAA,WAIA,MAHAspB,SAAA,uCAAA3mB,EAAA,mCACAzD,EAAAC,OAAAgsB,gBAAAx1B,GAEAtB,KAAA8wB,OAAAC,KAAAlwB,YACAgL,KAAA7L,OACAkB,KAAA,KAAAO,KAAA,QAAA,iBACAoK,KAAA7L,OACAA,MACA6L,KAAA7L,OAEAA,KAAA8wB,OAAAxlB,OAEAtL,SA6BAJ,EAAAswB,UAAAI,WAAA7gB,IAAA,kBAAA,SAAAzO,GACA,gBAAAA,GAAAyT,cAAAzT,EAAAyT,YAAA,mBACA,gBAAAzT,GAAA0T,eAAA1T,EAAA0T,aAAA,wCAGA9U,EAAAswB,UAAAS,UAAAljB,MAAAzN,KAAA0N,UAIA,IAAAqpB,GAAA/1B,EAAAg2B,mBAAA,QAAA,eAAA,QAAA,SACA,cAAA,aAAA,UAAA,uBAEAC,EAAAj3B,KAAA4wB,aAAAxa,YAAApV,EAAAk2B,YACAC,EAAAF,EAAAj2B,OAGAo2B,IACAL,GAAAv2B,QAAA,SAAA8N,GACA,GAAA+oB,GAAAF,EAAA7oB,EACA+oB,KACAD,EAAA9oB,GAAA9E,KAAAkF,MAAAlF,KAAAC,UAAA4tB,OASAr3B,KAAAs3B,eAAA,SAGA,IAAApX,GAAAlgB,IACAA,MAAA8wB,OAAA,GAAAlxB,GAAAswB,UAAAS,UAAAK,OAAA9Q,GACAsR,SAAAxwB,EAAAyQ,OAAA2f,QAAApwB,EAAAyT,aAAA8c,SAAAvwB,EAAA0T,cACAyd,WAAA,WACAjS,EAAA4Q,OAAAC,KAAAlwB,aAEAb,KAAA8wB,OAAAC,KAAA4C,YAAA,WAEA,GAAA4D,GAAA5zB,KAAAK,MAAA,IAAAL,KAAA6zB,UAAA1oB,UAEAoR,GAAA4Q,OAAAC,KAAAwB,eAAArxB,KAAA,GACA,IAAAi1B,GAAAjW,EAAA4Q,OAAAC,KAAAwB,eAAAlwB,OAAA,SAEAo1B,EAAAvX,EAAAlf,OAEA02B,EAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAxB,GAAAF,EAAA9zB,OAAA,KACAg0B,GAAAh0B,OAAA,MACAA,OAAA,SACAZ,MAAA4M,KAAA,QAAAC,KAAA,gBAAAipB,EAAAntB,MAAAytB,IACAtoB,SAAA,UAAAsoB,IAAA3X,EAAAoX,gBACA3rB,GAAA,QAAA,WACA3J,OAAAC,KAAA21B,GAAAp3B,QAAA,SAAAs3B,GACAb,EAAAj2B,OAAA82B,GAAAF,EAAAE,KAEA5X,EAAAoX,eAAAO,EACA3X,EAAA0Q,aAAA3Q,QACA,IAAArO,GAAAsO,EAAA0Q,aAAAhf,MACAA,IAAAgmB,EAAAhmB,QAEAA,EAAAqO,WAGAoW,EAAAh0B,OAAA,MAAA6G,KAAAyuB,IAGAI,EAAAN,EAAAO,6BAAA,eAKA,OAJAN,GAAAK,EAAAX,EAAA,WACAK,EAAAQ,QAAAz3B,QAAA,SAAAgsB,EAAAvjB,GACAyuB,EAAAlL,EAAAmL,aAAAnL,EAAAlG,QAAArd,KAEAiX,IAGAlgB,KAAA8L,OAAA,WAEA,MADA9L,MAAA8wB,OAAAxlB,OACAtL,QC3+CAJ,EAAAs4B,OAAA,SAAAptB,GACA,KAAAA,YAAAlL,GAAAqX,OACA,KAAA,2DAiCA,OA9BAjX,MAAA8K,OAAAA,EAEA9K,KAAAsB,GAAAtB,KAAA8K,OAAAqN,YAAA,UAEAnY,KAAA8K,OAAA9J,OAAA4Q,OAAAhS,EAAAmO,QAAAS,MAAAxO,KAAA8K,OAAA9J,OAAA4Q,WAAAhS,EAAAs4B,OAAAhhB,eAEAlX,KAAAgB,OAAAhB,KAAA8K,OAAA9J,OAAA4Q,OAGA5R,KAAAc,SAAA,KAEAd,KAAAm4B,gBAAA,KAEAn4B,KAAAo4B,YAMAp4B,KAAAq4B,eAAA,KAQAr4B,KAAA4V,QAAA,EAGA5V,KAAAigB,UAQArgB,EAAAs4B,OAAAhhB,eACA3G,YAAA,WACAoF,QAAA5Q,EAAA,EAAAoH,EAAA,GACAE,MAAA,GACAC,OAAA,GACAU,QAAA,EACAsrB,WAAA,GACA1iB,QAAA,GAMAhW,EAAAs4B,OAAAvqB,UAAAsS,OAAA,WAGAjgB,KAAAc,WACAd,KAAAc,SAAAd,KAAA8K,OAAA1I,IAAAkW,MAAAjW,OAAA,KACAZ,KAAA,KAAAzB,KAAA8K,OAAAqN,YAAA,WAAA1W,KAAA,QAAA,cAIAzB,KAAAm4B,kBACAn4B,KAAAm4B,gBAAAn4B,KAAAc,SAAAuB,OAAA,QACAZ,KAAA,QAAA,KAAAA,KAAA,SAAA,KAAAA,KAAA,QAAA,yBAIAzB,KAAAq4B,iBACAr4B,KAAAq4B,eAAAr4B,KAAAc,SAAAuB,OAAA,MAIArC,KAAAo4B,SAAA53B,QAAA,SAAAwO,GACAA,EAAAtC,WAEA1M,KAAAo4B,WAGA,IAAAprB,IAAAhN,KAAAgB,OAAAgM,SAAA,EACAjI,EAAAiI,EACAb,EAAAa,EACAurB,EAAA,CACAv4B,MAAA8K,OAAAyO,0BAAA3S,QAAAsf,UAAA1lB,QAAA,SAAAc,GACAyO,MAAAC,QAAAhQ,KAAA8K,OAAAsL,YAAA9U,GAAAN,OAAA4Q,SACA5R,KAAA8K,OAAAsL,YAAA9U,GAAAN,OAAA4Q,OAAApR,QAAA,SAAAwO,GACA,GAAAlO,GAAAd,KAAAq4B,eAAAh2B,OAAA,KACAZ,KAAA,YAAA,aAAAsD,EAAA,IAAAoH,EAAA,KACAmsB,GAAAtpB,EAAAspB,aAAAt4B,KAAAgB,OAAAs3B,YAAA,GACAE,EAAA,EACAC,EAAAH,EAAA,EAAAtrB,EAAA,CAGA,IAFAurB,EAAA50B,KAAAG,IAAAy0B,EAAAD,EAAAtrB,GAEA,SAAAgC,EAAA6C,MAAA,CAEA,GAAAnP,IAAAsM,EAAAtM,QAAA,GACAg2B,EAAAJ,EAAA,EAAAtrB,EAAA,CACAlM,GAAAuB,OAAA,QAAAZ,KAAA,QAAAuN,EAAAgD,OAAA,IACAvQ,KAAA,IAAA,MAAAi3B,EAAA,IAAAh2B,EAAA,IAAAg2B,GACAp2B,MAAA0M,EAAA1M,WACAk2B,EAAA91B,EAAAsK,MACA,IAAA,SAAAgC,EAAA6C,MAAA,CAEA,GAAAxF,IAAA2C,EAAA3C,OAAA,GACAC,GAAA0C,EAAA1C,QAAAD,CACAvL,GAAAuB,OAAA,QAAAZ,KAAA,QAAAuN,EAAAgD,OAAA,IACAvQ,KAAA,QAAA4K,GAAA5K,KAAA,SAAA6K,GACA7K,KAAA,OAAAuN,EAAAyC,WACAnP,MAAA0M,EAAA1M,WACAk2B,EAAAnsB,EAAAW,EACAurB,EAAA50B,KAAAG,IAAAy0B,EAAAjsB,EAAAU,OACA,IAAAtN,EAAA0C,IAAAu2B,YAAAhyB,QAAAqI,EAAA6C,UAAA,EAAA,CAEA,GAAAC,IAAA9C,EAAA8C,MAAA,GACA8mB,EAAAj1B,KAAAwrB,KAAAxrB,KAAA4d,KAAAzP,EAAAnO,KAAA6d,IACA1gB,GAAAuB,OAAA,QAAAZ,KAAA,QAAAuN,EAAAgD,OAAA,IACAvQ,KAAA,IAAA/B,EAAA0C,IAAA6f,SAAAnQ,KAAAA,GAAAzD,KAAAW,EAAA6C,QACApQ,KAAA,YAAA,aAAAm3B,EAAA,KAAAA,EAAA5rB,EAAA,GAAA,KACAvL,KAAA,OAAAuN,EAAAyC,WACAnP,MAAA0M,EAAA1M,WACAk2B,EAAA,EAAAI,EAAA5rB,EACAyrB,EAAA90B,KAAAG,IAAA,EAAA80B,EAAA5rB,EAAA,EAAAyrB,GACAF,EAAA50B,KAAAG,IAAAy0B,EAAA,EAAAK,EAAA5rB,GAGAlM,EAAAuB,OAAA,QAAAZ,KAAA,cAAA,QAAAA,KAAA,QAAA,YACAA,KAAA,IAAA+2B,GAAA/2B,KAAA,IAAAg3B,GAAAn2B,OAAAiR,YAAA+kB,IAAApvB,KAAA8F,EAAA+C,MAEA,IAAA8mB,GAAA/3B,EAAAO,OAAA6L,uBACA,IAAA,aAAAlN,KAAAgB,OAAAuP,YACApE,GAAA0sB,EAAAvsB,OAAAU,EACAurB,EAAA,MACA,CAGA,GAAAO,GAAA94B,KAAAgB,OAAA2U,OAAA5Q,EAAAA,EAAA8zB,EAAAxsB,KACAtH,GAAAiI,GAAA8rB,EAAA94B,KAAA8K,OAAA9J,OAAAqL,QACAF,GAAAosB,EACAxzB,EAAAiI,EACAlM,EAAAW,KAAA,YAAA,aAAAsD,EAAA,IAAAoH,EAAA,MAEApH,GAAA8zB,EAAAxsB,MAAA,EAAAW,EAGAhN,KAAAo4B,SAAA1xB,KAAA5F,IACA+K,KAAA7L,QAEA6L,KAAA7L,MAGA,IAAA64B,GAAA74B,KAAAq4B,eAAAh3B,OAAA6L,uBAYA,OAXAlN,MAAAgB,OAAAqL,MAAAwsB,EAAAxsB,MAAA,EAAArM,KAAAgB,OAAAgM,QACAhN,KAAAgB,OAAAsL,OAAAusB,EAAAvsB,OAAA,EAAAtM,KAAAgB,OAAAgM,QACAhN,KAAAm4B,gBACA12B,KAAA,QAAAzB,KAAAgB,OAAAqL,OACA5K,KAAA,SAAAzB,KAAAgB,OAAAsL,QAIAtM,KAAAc,SAAAwB,OAAAkuB,WAAAxwB,KAAAgB,OAAA4U,OAAA,SAAA,YAGA5V,KAAAwF,YAQA5F,EAAAs4B,OAAAvqB,UAAAnI,SAAA,WACA,IAAAxF,KAAAc,SAAA,MAAAd,KACA,IAAA64B,GAAA74B,KAAAc,SAAAO,OAAA6L,uBACAzJ,QAAAzD,KAAAgB,OAAAwV,mBACAxW,KAAAgB,OAAA2U,OAAAxJ,EAAAnM,KAAA8K,OAAA9J,OAAAsL,OAAAusB,EAAAvsB,QAAAtM,KAAAgB,OAAAwV,iBAEA/S,OAAAzD,KAAAgB,OAAA+3B,kBACA/4B,KAAAgB,OAAA2U,OAAA5Q,EAAA/E,KAAA8K,OAAA9J,OAAAqL,MAAAwsB,EAAAxsB,OAAArM,KAAAgB,OAAA+3B,gBAEA/4B,KAAAc,SAAAW,KAAA,YAAA,aAAAzB,KAAAgB,OAAA2U,OAAA5Q,EAAA,IAAA/E,KAAAgB,OAAA2U,OAAAxJ,EAAA,MAOAvM,EAAAs4B,OAAAvqB,UAAA/B,KAAA,WACA5L,KAAAgB,OAAA4U,QAAA,EACA5V,KAAAigB,UAOArgB,EAAAs4B,OAAAvqB,UAAArC,KAAA,WACAtL,KAAAgB,OAAA4U,QAAA,EACA5V,KAAAigB,UC3MArgB,EAAAqK,KAAArK,EAAAqK,SAOArK,EAAAo5B,YAAA,WAEAh5B,KAAA8tB,YAIAluB,EAAAo5B,YAAArrB,UAAAsrB,UAAA,SAAAC,EAAAn0B,GAEA,MADAuE,SAAA4kB,KAAA,2DACAluB,KAAAyP,IAAAypB,EAAAn0B,IAUAnF,EAAAo5B,YAAArrB,UAAA8B,IAAA,SAAAypB,EAAAn0B,GACA,MAAA/E,MAAAwP,IAAA0pB,EAAAn0B,IAIAnF,EAAAo5B,YAAArrB,UAAA6B,IAAA,SAAA0pB,EAAAn0B,GACA,GAAAgL,MAAAC,QAAAjL,GAAA,CAEA,GAAAo0B,GAAAv5B,EAAAiuB,iBAAAjgB,OAAAH,MAAA,KAAA1I,EAEAo0B,GAAAC,UAAAF,EACAl5B,KAAA8tB,QAAAoL,GAAAC,MAGA,QAAAp0B,GACAA,EAAAq0B,UAAAF,EACAl5B,KAAA8tB,QAAAoL,GAAAn0B,SAEA/E,MAAA8tB,QAAAoL,EAGA,OAAAl5B,OAIAJ,EAAAo5B,YAAArrB,UAAA0rB,UAAA,SAAAH,GAEA,MADA5vB,SAAA4kB,KAAA,2DACAluB,KAAAoO,IAAA8qB,IASAt5B,EAAAo5B,YAAArrB,UAAAS,IAAA,SAAA8qB,GACA,MAAAl5B,MAAA8tB,QAAAoL,IAIAt5B,EAAAo5B,YAAArrB,UAAA2rB,aAAA,SAAAJ,GAEA,MADA5vB,SAAA4kB,KAAA,iEACAluB,KAAA0M,OAAAwsB,IAQAt5B,EAAAo5B,YAAArrB,UAAAjB,OAAA,SAAAwsB,GACA,MAAAl5B,MAAAwP,IAAA0pB,EAAA,OASAt5B,EAAAo5B,YAAArrB,UAAA4rB,SAAA,SAAAx0B,GACA,gBAAAA,KACAA,EAAAyE,KAAAkF,MAAA3J;AAEA,GAAAy0B,GAAAx5B,IAIA,OAHAgC,QAAAC,KAAA8C,GAAAvE,QAAA,SAAA04B,GACAM,EAAAhqB,IAAA0pB,EAAAn0B,EAAAm0B,MAEAM,GAQA55B,EAAAo5B,YAAArrB,UAAA1L,KAAA,WACA,MAAAD,QAAAC,KAAAjC,KAAA8tB,UAQAluB,EAAAo5B,YAAArrB,UAAA8rB,OAAA,WACA,MAAAz5B,MAAA8tB,SAgBAluB,EAAAqK,KAAAC,MAAA,SAAA4G,GAEA,GAAA4oB,GAAA,iCAAA90B,KAAAkM,EAEA9Q,MAAA25B,UAAA7oB,EAEA9Q,KAAA4O,UAAA8qB,EAAA,IAAA,KAEA15B,KAAAsO,KAAAorB,EAAA,IAAA,KAEA15B,KAAA6X,mBAEA,gBAAA6hB,GAAA,IAAAA,EAAA,GAAAh3B,OAAA,IACA1C,KAAA6X,gBAAA6hB,EAAA,GAAAzK,UAAA,GAAA5uB,MAAA,KACAL,KAAA6X,gBAAArX,QAAA,SAAA8V,EAAA5V,GACAV,KAAA6X,gBAAAnX,GAAAd,EAAA8uB,wBAAAtgB,IAAAkI,IACAzK,KAAA7L,QAGAA,KAAA45B,qBAAA,SAAAp1B,GAIA,MAHAxE,MAAA6X,gBAAArX,QAAA,SAAA8V,GACA9R,EAAA8R,EAAA9R,KAEAA,GAMAxE,KAAA6H,QAAA,SAAApH,GACA,GAAA,mBAAAA,GAAAT,KAAA25B,WAAA,CACA,GAAAn1B,GAAA,IACA,oBAAA/D,GAAAT,KAAA4O,UAAA,IAAA5O,KAAAsO,MAAA9J,EAAA/D,EAAAT,KAAA4O,UAAA,IAAA5O,KAAAsO,MACA,mBAAA7N,GAAAT,KAAAsO,QAAA9J,EAAA/D,EAAAT,KAAAsO,OACA7N,EAAAT,KAAA25B,WAAA35B,KAAA45B,qBAAAp1B,GAEA,MAAA/D,GAAAT,KAAA25B,aAeA/5B,EAAAqK,KAAA4vB,UAAA,SAAA/L,GAEA,QAAAgM,GAAArpB,GAGA,GAAAspB,MAEA7qB,EAAA,gCAaA,OAZAuB,GAAAjQ,QAAA,SAAAw5B,GACA,GAAAN,GAAAxqB,EAAAtK,KAAAo1B,GACAd,EAAAQ,EAAA,IAAA,OACA5oB,EAAA4oB,EAAA,GACAO,EAAAr6B,EAAA8uB,wBAAAtgB,IAAAsrB,EAAA,GACA,oBAAAK,GAAAb,KACAa,EAAAb,IAAAgB,YAAAzpB,UAAAwpB,WAEAF,EAAAb,GAAAgB,SAAAxzB,KAAAszB,GACAD,EAAAb,GAAAzoB,OAAA/J,KAAAoK,GACAipB,EAAAb,GAAAe,MAAAvzB,KAAAuzB,KAEAF,EASA/5B,KAAAwf,QAAA,SAAArd,EAAAsO,GAaA,IAAA,GAZAspB,GAAAD,EAAArpB,GAEA0pB,EAAAn4B,OAAAC,KAAA83B,GAAA1vB,IAAA,SAAAnI,GACA,IAAA4rB,EAAA1f,IAAAlM,GACA,KAAA,4BAAAA,EAAA,YAEA,OAAA4rB,GAAA1f,IAAAlM,GAAAsd,QAAArd,EAAA43B,EAAA73B,GAAAuO,OACAspB,EAAA73B,GAAAg4B,SAAAH,EAAA73B,GAAA+3B,SAIA71B,EAAAzE,EAAAy6B,MAAApyB,UAAAf,QAAAozB,cACA35B,EAAA,EAAAA,EAAAy5B,EAAAz3B,OAAAhC,IAEA0D,EAAAA,EAAAyF,KAAAswB,EAAAz5B,GAEA,OAAA0D,KAUAxE,EAAAqK,KAAAqwB,OAAA,WAKAt6B,KAAAu6B,aAAA,EAMAv6B,KAAAw6B,iBAAA,GASA56B,EAAAqK,KAAAqwB,OAAA3sB,UAAA8sB,UAAA,SAAAC,GAUA,GATA,gBAAAA,IAEA16B,KAAAgH,IAAA0zB,EAEA16B,KAAAquB,YAEAruB,KAAAgH,IAAA0zB,EAAA1zB,IACAhH,KAAAquB,OAAAqM,EAAArM,aAEAruB,KAAAgH,IACA,KAAA,4CAaApH,EAAAqK,KAAAqwB,OAAA3sB,UAAAgtB,YAAA,SAAAx4B,EAAAy4B,EAAAnqB,GACA,MAAAzQ,MAAA66B,QAAA76B,KAAA66B,OAAA14B,EAAAy4B,EAAAnqB,IAMA7Q,EAAAqK,KAAAqwB,OAAA3sB,UAAAktB,OAAA,SAAA14B,EAAAy4B,EAAAnqB,GAAA,MAAAzQ,MAAAgH,KASApH,EAAAqK,KAAAqwB,OAAA3sB,UAAAmtB,aAAA,SAAA34B,EAAAy4B,EAAAnqB,GACA,GAAAzJ,GAAAhH,KAAA66B,OAAA14B,EAAAy4B,EAAAnqB,EACA,OAAA7Q,GAAAkH,kBAAA,MAAAE,IAOApH,EAAAqK,KAAAqwB,OAAA3sB,UAAAotB,WAAA,SAAA54B,EAAAy4B,EAAAnqB,GACA,GAAAuqB,GACAC,EAAAj7B,KAAA26B,YAAAx4B,EAAAy4B,EAAAnqB,EAYA,OAXAzQ,MAAAu6B,aAAA,mBAAAU,IAAAA,IAAAj7B,KAAAk7B,WACAF,EAAAr7B,EAAAy6B,KAAAp6B,KAAAm7B,kBAEAH,EAAAh7B,KAAA86B,aAAA34B,EAAAy4B,EAAAnqB,GACAzQ,KAAAu6B,cACAS,EAAAA,EAAAnxB,KAAA,SAAA9E,GAEA,MADA/E,MAAAk7B,WAAAD,EACAj7B,KAAAm7B,gBAAAp2B,GACA8G,KAAA7L,SAGAg7B,GAgBAp7B,EAAAqK,KAAAqwB,OAAA3sB,UAAA6R,QAAA,SAAArd,EAAAsO,EAAAypB,EAAAD,GACA,GAAAj6B,KAAAo7B,WAAA,CACA,GAAAC,GAAAr7B,KAAAo7B,WAAAj5B,EAAAsO,EAAAypB,EAAAD,EACAj6B,MAAAq7B,MACAl5B,EAAAk5B,EAAAl5B,OAAAA,EACAsO,EAAA4qB,EAAA5qB,QAAAA,EACAypB,EAAAmB,EAAAnB,UAAAA,EACAD,EAAAoB,EAAApB,OAAAA,GAIA,GAAA/Z,GAAAlgB,IACA,OAAA,UAAA46B,GACA,MAAA1a,GAAAsa,iBAAAI,GAAAA,EAAA3zB,OAAA2zB,EAAA3zB,KAAAvE,OAGA/C,EAAAy6B,KAAAQ,GAGA1a,EAAA6a,WAAA54B,EAAAy4B,EAAAnqB,GAAA5G,KAAA,SAAAyxB,GACA,MAAApb,GAAAqb,cAAAD,EAAAV,EAAAnqB,EAAAypB,EAAAD,OAiBAr6B,EAAAqK,KAAAqwB,OAAA3sB,UAAA6tB,kBAAA,SAAA3yB,GACA,GAAAkH,MAAAC,QAAAnH,GAEA,MAAAA,EAKA,IAAA5G,GAAAD,OAAAC,KAAA4G,GACA4yB,EAAA5yB,EAAA5G,EAAA,IAAAS,OACAg5B,EAAAz5B,EAAA+qB,MAAA,SAAA9qB,GACA,GAAAsqB,GAAA3jB,EAAA3G,EACA,OAAAsqB,GAAA9pB,SAAA+4B,GAEA,KAAAC,EACA,KAAA17B,MAAAwN,YAAAwgB,YAAA,qEAMA,KAAA,GAFA2N,MACAlrB,EAAAzO,OAAAC,KAAA4G,GACAnI,EAAA,EAAAA,EAAA+6B,EAAA/6B,IAAA,CAEA,IAAA,GADAye,MACAyc,EAAA,EAAAA,EAAAnrB,EAAA/N,OAAAk5B,IACAzc,EAAA1O,EAAAmrB,IAAA/yB,EAAA4H,EAAAmrB,IAAAl7B,EAEAi7B,GAAAj1B,KAAAyY,GAEA,MAAAwc,IAIA/7B,EAAAqK,KAAAqwB,OAAA3sB,UAAAkuB,YAAA,SAAAF,GAEA,MADAryB,SAAA4kB,KAAA,sEACAluB,KAAA87B,aAAAH,IAWA/7B,EAAAqK,KAAAqwB,OAAA3sB,UAAAmuB,aAAA,SAAAH,EAAAf,GAEA,MAAAe,IAiBA/7B,EAAAqK,KAAAqwB,OAAA3sB,UAAAouB,cAAA,SAAAlzB,EAAA4H,EAAAypB,EAAAD,GAIA,IAAAlqB,MAAAC,QAAAnH,GACA,MAAAA,EAIA,KAAA,GADAmzB,MACAnuB,EAAA,EAAAA,EAAA4C,EAAA/N,OAAAmL,IACAmuB,EAAAnuB,GAAA,CAGA,IAAA8tB,GAAA9yB,EAAAwB,IAAA,SAAAmiB,GAEA,IAAA,GADAyP,MACAL,EAAA,EAAAA,EAAAnrB,EAAA/N,OAAAk5B,IAAA,CACA,GAAAp3B,GAAAgoB,EAAA/b,EAAAmrB,GACA,oBAAAp3B,KACAw3B,EAAAJ,GAAA,GAEA3B,GAAAA,EAAA2B,KACAp3B,EAAAy1B,EAAA2B,GAAAp3B,IAEAy3B,EAAA/B,EAAA0B,IAAAp3B,EAEA,MAAAy3B,IAKA,OAHAD,GAAAx7B,QAAA,SAAA07B,EAAAx7B,GACA,IAAAw7B,EAAA,KAAA,SAAAzrB,EAAA/P,GAAA,8BAAAw5B,EAAAx5B,KAEAi7B,GAcA/7B,EAAAqK,KAAAqwB,OAAA3sB,UAAAwuB,iBAAA,SAAAtzB,EAAA+xB,EAAAnqB,EAAAypB,GACA,MAAArxB,IAmBAjJ,EAAAqK,KAAAqwB,OAAA3sB,UAAA4tB,cAAA,SAAAD,EAAAV,EAAAnqB,EAAAypB,EAAAD,GACA,GAAAb,GAAAp5B,KAAAo5B,WAAAp5B,KAAAwN,YAAAwgB,WAKA,IAJA4M,EAAAP,WACAO,EAAAP,cAGAiB,EAMA,MADAhyB,SAAAC,MAAA,gDAAA6vB,EAAA,+BACAz5B,EAAAy6B,KAAAQ,EAGA,IAAAwB,GAAA,gBAAAd,GAAA9xB,KAAAkF,MAAA4sB,GAAAA,EAEApb,EAAAlgB,IAEA,OAAAL,GAAAy6B,KAAAla,EAAAsb,kBAAAY,EAAAvzB,MAAAuzB,IACAvyB,KAAA,SAAAwyB,GAEA,MAAA18B,GAAAy6B,KAAAla,EAAA4b,aAAAO,EAAAzB,MACA/wB,KAAA,SAAAhB,GACA,MAAAlJ,GAAAy6B,KAAAla,EAAA6b,cAAAlzB,EAAA4H,EAAAypB,EAAAD,MACApwB,KAAA,SAAAyyB,GAIA,MADA1B,GAAAP,SAAAjB,GAAAkD,EACA38B,EAAAy6B,KAAAla,EAAAic,iBAAAG,EAAA1B,EAAAnqB,EAAAypB,MACArwB,KAAA,SAAA0yB,GACA,OAAAv0B,OAAA4yB,EAAA5yB,WAAAqyB,SAAAO,EAAAP,SAAApzB,KAAAs1B,MAKA38B,EAAAqK,KAAAqwB,OAAA3sB,UAAA6uB,qBAAA,SAAA3zB,EAAA4H,EAAAypB,EAAAD,GACA3wB,QAAA4kB,KAAA,wFACA,IAAAuO,GAAAz8B,KAAAw7B,kBAAA3yB,EACA,OAAA7I,MAAA+7B,cAAAU,EAAAhsB,EAAAypB,EAAAD,IAIAr6B,EAAAqK,KAAAqwB,OAAA3sB,UAAA+uB,sBAAA,SAAA7zB,EAAA4H,EAAAypB,EAAAD,GAEA,MADA3wB,SAAA4kB,KAAA,iFACAluB,KAAA+7B,cAAAlzB,EAAA4H,EAAAypB,EAAAD,IAIAr6B,EAAAqK,KAAAqwB,OAAA3sB,UAAAgvB,UAAA,SAAA9zB,EAAA4H,EAAAypB,EAAAD,GACA3wB,QAAA4kB,KAAA,6EACA,IAAAuO,GAAAz8B,KAAAw7B,kBAAA3yB,EACA,OAAA7I,MAAA+7B,cAAAU,EAAAhsB,EAAAypB,EAAAD,IAWAr6B,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA+c,EAAAC,EAAAz2B,GAoBA,MAnBAA,GACA2J,MAAAC,QAAA5J,GACAA,EAAAxG,EAAAiuB,iBAAAjgB,OAAAH,MAAA,KAAArH,GACA,gBAAAA,GACAA,EAAAxG,EAAAiuB,iBAAAzf,IAAAhI,GAAAuH,UACA,kBAAAvH,KACAA,EAAAA,EAAAuH,WAGAvH,EAAA,GAAAxG,GAAAqK,KAAAqwB,OAEAsC,EAAAA,GAAA,aACAA,EAAAjvB,UAAAvH,EACAw2B,EAAAjvB,UAAAH,YAAAovB,EACAC,IAEAD,EAAA5O,YAAA6O,EACAj9B,EAAAiuB,iBAAApe,IAAAmtB,IAEAA,GAYAh9B,EAAAqK,KAAAqwB,OAAA3sB,UAAA8rB,OAAA,WACA,OAAAz3B,OAAA86B,eAAA98B,MAAAwN,YAAAwgB,aACAhnB,IAAAhH,KAAAgH,IAAAqnB,OAAAruB,KAAAquB,UASAzuB,EAAAqK,KAAA8yB,kBAAAn9B,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA16B,KAAAy6B,UAAAC,IACA,iBAEA96B,EAAAqK,KAAA8yB,kBAAApvB,UAAAytB,WAAA,SAAAj5B,EAAAsO,EAAAypB,EAAAD,GACA,GAAAhoB,GAAAjS,KAAAquB,OAAApc,UAAA,IAQA,QAPAA,EAAA,YAAAzR,QAAA,SAAAuE,GACA0L,EAAA9J,QAAA5B,MAAA,IACA0L,EAAAusB,QAAAj4B,GACAm1B,EAAA8C,QAAAj4B,GACAk1B,EAAA+C,QAAA,UAGAvsB,OAAAA,EAAAypB,SAAAA,EAAAD,MAAAA,IAGAr6B,EAAAqK,KAAA8yB,kBAAApvB,UAAAktB,OAAA,SAAA14B,EAAAy4B,EAAAnqB,GACA,GAAAwsB,GAAA96B,EAAA86B,UAAArC,EAAA5yB,OAAAi1B,UAAAj9B,KAAAquB,OAAA4O,UAAA,CACA,OAAAj9B,MAAAgH,IAAA,+BAAAi2B,EACA,wBAAA96B,EAAAkD,IAAA,qBACAlD,EAAAmD,MACA,oBAAAnD,EAAAoD,KAWA3F,EAAAqK,KAAAizB,SAAAt9B,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA16B,KAAAy6B,UAAAC,GACA16B,KAAAw6B,iBAAA,GACA,QAEA56B,EAAAqK,KAAAizB,SAAAvvB,UAAAytB,WAAA,SAAAj5B,EAAAsO,GACA,GAAAA,EAAA/N,OAAA,IACA,IAAA+N,EAAA/N,QAAA+N,EAAA9J,QAAA,eAAA,GACA,KAAA,2CAAA8J,EAAAnG,KAAA,OAKA1K,EAAAqK,KAAAizB,SAAAvvB,UAAAwvB,gBAAA,SAAAvC,GAIA,GAAAwC,GAAA,SAAAC,GAAA,MAAA,YAEA,IAAA,GADAC,GAAA5vB,UACAhN,EAAA,EAAAA,EAAA48B,EAAA56B,OAAAhC,IAAA,CACA,GAAAqI,GAAAu0B,EAAA58B,GACAsI,EAAAq0B,EAAArhB,OAAA,SAAAjX,GAAA,MAAAA,GAAAG,MAAA6D,IACA,IAAAC,EAAAtG,OACA,MAAAsG,GAAA,GAGA,MAAA,QAEAu0B,GACAj8B,GAAAtB,KAAAquB,OAAApc,SACAzM,SAAAxF,KAAAquB,OAAAmP,eACAC,OAAAz9B,KAAAquB,OAAAqP,aACAC,QAAA,KAEA,IAAA/C,GAAAA,EAAA3zB,MAAA2zB,EAAA3zB,KAAAvE,OAAA,EAAA,CACA,GAAAk7B,GAAA57B,OAAAC,KAAA24B,EAAA3zB,KAAA,IACA42B,EAAAT,EAAAQ,EACAL,GAAAj8B,GAAAi8B,EAAAj8B,IAAAu8B,EAAA,gBAAAA,EAAA,UACAN,EAAA/3B,SAAA+3B,EAAA/3B,UAAAq4B,EAAA,gBAAA,YACAN,EAAAE,OAAAF,EAAAE,QAAAI,EAAA,cAAA,mBACAN,EAAAI,QAAAC,EAEA,MAAAL,IAGA39B,EAAAqK,KAAAizB,SAAAvvB,UAAAmwB,oBAAA,SAAArtB,EAAAypB,GAEA,IAAA,GADAlsB,MACAtN,EAAA,EAAAA,EAAA+P,EAAA/N,OAAAhC,IACA,aAAA+P,EAAA/P,IACAsN,EAAA+vB,WAAAttB,EAAA/P,GACAsN,EAAAgwB,YAAA9D,GAAAA,EAAAx5B,KAEAsN,EAAAiwB,KAAAxtB,EAAA/P,GACAsN,EAAAkwB,MAAAhE,GAAAA,EAAAx5B,GAGA,OAAAsN,IAGApO,EAAAqK,KAAAizB,SAAAvvB,UAAA6tB,kBAAA,SAAA3yB,GAAA,MAAAA,IAEAjJ,EAAAqK,KAAAizB,SAAAvvB,UAAAktB,OAAA,SAAA14B,EAAAy4B,EAAAnqB,GACA,GAAA0tB,GAAA,SAAAp5B,EAAAq5B,EAAAtT,GACAsT,EAAAA,GAAA,SACAtT,EAAAA,GAAA,CAEA,KAAA,GADAuT,GAAAt5B,EAAA,GAAAq5B,GAAAE,EAAA,EACA59B,EAAA,EAAAA,EAAAqE,EAAArC,OAAAhC,IACAqE,EAAArE,GAAA09B,GAAAtT,EAAAuT,IACAA,EAAAt5B,EAAArE,GAAA09B,GAAAtT,EACAwT,EAAA59B,EAGA,OAAA49B,IAGAC,EAAAp8B,EAAAq8B,aAAA5D,EAAA5yB,OAAAw2B,aAAA,EACAC,EAAAz+B,KAAA89B,oBAAArtB,GACAiuB,EAAAD,EAAAR,IAIA,IAHA,UAAAS,IACAA,EAAAv8B,EAAA0pB,UAAA+O,EAAA5yB,OAAA6jB,UAAA,QAEA,SAAA6S,EAAA,CACA,IAAA9D,EAAA3zB,KACA,KAAA,+CAEA,IAAAhF,GAAAjC,KAAAm9B,gBAAAvC,EACA,KAAA34B,EAAAw7B,SAAAx7B,EAAAX,GAAA,CACA,GAAAq9B,GAAA,EAGA,MAFA18B,GAAAX,KAAAq9B,IAAAA,EAAAj8B,OAAA,KAAA,IAAA,MACAT,EAAAw7B,SAAAkB,IAAAA,EAAAj8B,OAAA,KAAA,IAAA,UACA,iDAAAi8B,EAAA,gBAAA18B,EAAA07B,QAAA,IAEAe,EAAA9D,EAAA3zB,KAAAk3B,EAAAvD,EAAA3zB,KAAAhF,EAAAw7B,SAAAx7B,EAAAX,IAIA,MAFAs5B,GAAA5yB,SAAA4yB,EAAA5yB,WACA4yB,EAAA5yB,OAAA6jB,SAAA6S,EACA1+B,KAAAgH,IAAA,gCAAAu3B,EACA,wBAAAp8B,EAAAkD,IAAA,sBACAlD,EAAAmD,MACA,qBAAAnD,EAAAoD,IACA,qBAAAm5B,EAAA,4BAIA9+B,EAAAqK,KAAAizB,SAAAvvB,UAAAwuB,iBAAA,SAAAtzB,EAAA+xB,EAAAnqB,EAAAypB,GACA,GAAAj4B,GAAAjC,KAAAm9B,gBAAAvC,GACA6D,EAAAz+B,KAAA89B,oBAAArtB,EAAAypB,EACA,KAAAj4B,EAAAuD,SACA,KAAA,4CAAAvD,EAAA07B,OAEA,IAAAiB,GAAA,SAAAxyB,EAAA6I,EAAA4pB,EAAAC,GAEA,IADA,GAAAp+B,GAAA,EAAAk7B,EAAA,EACAl7B,EAAA0L,EAAA1J,QAAAk5B,EAAA3mB,EAAA8pB,UAAAr8B,QACA0J,EAAA1L,GAAAuB,EAAAuD,YAAAyP,EAAA8pB,UAAAnD,IACAxvB,EAAA1L,GAAAm+B,GAAA5pB,EAAA6pB,GAAAlD,GACAl7B,IACAk7B,KACAxvB,EAAA1L,GAAAuB,EAAAuD,UAAAyP,EAAA8pB,UAAAnD,GACAl7B,IAEAk7B,KAIAoD,EAAA,SAAAn2B,EAAAo2B,EAAAC,EAAAC,GACA,IAAA,GAAAz+B,GAAA,EAAAA,EAAAmI,EAAAnG,OAAAhC,IACAmI,EAAAnI,GAAAw+B,IAAAr2B,EAAAnI,GAAAw+B,KAAAD,EACAp2B,EAAAnI,GAAAy+B,GAAA,EAEAt2B,EAAAnI,GAAAy+B,GAAA,EAQA,OAJAP,GAAAhE,EAAA3zB,KAAA4B,EAAA41B,EAAAP,MAAA,WACAO,EAAAV,YAAAnD,EAAA5yB,OAAA6jB,UACAmT,EAAApE,EAAA3zB,KAAA2zB,EAAA5yB,OAAA6jB,SAAA5pB,EAAAX,GAAAm9B,EAAAT,aAEApD,EAAA3zB,MAUArH,EAAAqK,KAAAm1B,WAAAx/B,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA16B,KAAAy6B,UAAAC,IACA,UAEA96B,EAAAqK,KAAAm1B,WAAAzxB,UAAAktB,OAAA,SAAA14B,EAAAy4B,EAAAnqB,GACA,GAAAwd,GAAA9rB,EAAA8rB,QAAA2M,EAAA5yB,OAAAimB,QAAAjuB,KAAAquB,OAAAJ,QAAA,CACA,OAAAjuB,MAAAgH,IAAA,qBAAAinB,EACA,kBAAA9rB,EAAAkD,IAAA,kBACAlD,EAAAoD,IACA,eAAApD,EAAAmD,OAKA1F,EAAAqK,KAAAm1B,WAAAzxB,UAAA6tB,kBAAA,SAAA3yB,GAAA,MAAAA,IACAjJ,EAAAqK,KAAAm1B,WAAAzxB,UAAAouB,cAAA,SAAAlzB,EAAA4H,EAAAypB,EAAAD,GAAA,MAAApxB,IAQAjJ,EAAAqK,KAAAo1B,qBAAAz/B,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA16B,KAAAy6B,UAAAC,IACA,oBAEA96B,EAAAqK,KAAAo1B,qBAAA1xB,UAAAktB,OAAA,WACA,MAAA76B,MAAAgH,KAGApH,EAAAqK,KAAAo1B,qBAAA1xB,UAAA6tB,kBAAA,SAAA3yB,GAAA,MAAAA,IAEAjJ,EAAAqK,KAAAo1B,qBAAA1xB,UAAAgtB,YAAA,SAAAx4B,EAAAy4B,EAAAnqB,GACA,MAAAzQ,MAAAgH,IAAAwC,KAAAC,UAAAtH,IAGAvC,EAAAqK,KAAAo1B,qBAAA1xB,UAAAmtB,aAAA,SAAA34B,EAAAy4B,EAAAnqB,GACA,GAAA6uB,KACA1E,GAAA3zB,KAAAzG,QAAA,SAAAkT,GACA,GAAA2P,GAAA3P,EAAA2P,OACAA,GAAA1c,QAAA,OACA0c,EAAAA,EAAAkc,OAAA,EAAAlc,EAAA1c,QAAA,OAEA24B,EAAA54B,KAAA2c,IAEA,IAAArc,GAAAhH,KAAA66B,OAAA14B,EAAAy4B,EAAAnqB,GACAxJ,EAAA,WAAAqoB,mBAAA9lB,KAAAC,UAAA61B,IACAp4B,GACAs4B,eAAA,oCAEA,OAAA5/B,GAAAkH,kBAAA,OAAAE,EAAAC,EAAAC,IAGAtH,EAAAqK,KAAAo1B,qBAAA1xB,UAAAwuB,iBAAA,SAAAtzB,EAAA+xB,EAAAnqB,EAAAypB,GACA,IAAArxB,EACA,MAAA+xB,EAEA,IAAA6E,IAAA,KAAA,UAAA,UAAA,UAAA,QAAA,QAAA,SAAA,SAAA,SAAA,UAAA,QAAA,QAAA,QAAA,MAAA,QAqBA,OApBA7E,GAAA3zB,KAAAzG,QAAA,SAAAkT,EAAAhT,GACA,GAAA2iB,GAAA3P,EAAA2P,OACAA,GAAA1c,QAAA,OACA0c,EAAAA,EAAAkc,OAAA,EAAAlc,EAAA1c,QAAA,OAEA84B,EAAAj/B,QAAA,SAAAsQ,GAEA,GAAA,mBAAA8pB,GAAA3zB,KAAAvG,GAAAoQ,GACA,GAAAjI,EAAAwa,GAAA,CACA,GAAA7e,GAAAqE,EAAAwa,GAAAvS,EACA,iBAAAtM,IAAAA,EAAAsK,WAAAnI,QAAA,QAAA,IACAnC,EAAAiC,WAAAjC,EAAAP,QAAA,KAEA22B,EAAA3zB,KAAAvG,GAAAoQ,GAAAtM,MAGAo2B,GAAA3zB,KAAAvG,GAAAoQ,GAAA,SAIA8pB,EAAA3zB,MASArH,EAAAqK,KAAAy1B,wBAAA9/B,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA16B,KAAAy6B,UAAAC,IACA,YAEA96B,EAAAqK,KAAAy1B,wBAAA/xB,UAAAktB,OAAA,SAAA14B,EAAAy4B,EAAAnqB,GACA,GAAAwd,GAAA9rB,EAAAw9B,cAAA/E,EAAA5yB,OAAA23B,cAAA3/B,KAAAquB,OAAAJ,QAAA,EACA,OAAAjuB,MAAAgH,IAAA,iBAAAinB,EACA,uBAAA9rB,EAAAkD,IAAA,qBACAlD,EAAAoD,IACA,oBAAApD,EAAAmD,OASA1F,EAAAqK,KAAA21B,eAAAhgC,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA16B,KAAAy6B,UAAAC,IACA,cAEA96B,EAAAqK,KAAA21B,eAAAjyB,UAAAktB,OAAA,SAAA14B,EAAAy4B,EAAAnqB,GACA,GAAAwd,GAAA9rB,EAAA09B,gBAAAjF,EAAA5yB,OAAA63B,gBAAA7/B,KAAAquB,OAAAJ,QAAA,EACA,OAAAjuB,MAAAgH,IAAA,iBAAAinB,EACA,uBAAA9rB,EAAAkD,IAAA,kBACAlD,EAAAoD,IACA,eAAApD,EAAAmD,OAUA1F,EAAAqK,KAAA61B,aAAAlgC,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAAhX,GAEA7I,KAAA+/B,MAAAl3B,GACA,cAEAjJ,EAAAqK,KAAA61B,aAAAnyB,UAAAotB,WAAA,SAAA54B,EAAAy4B,EAAAnqB,GACA,MAAA9Q,GAAA20B,MAAA,WAAA,MAAAt0B,MAAA+/B,OAAAl0B,KAAA7L,QAGAJ,EAAAqK,KAAA61B,aAAAnyB,UAAA8rB,OAAA,WACA,OAAAz3B,OAAA86B,eAAA98B,MAAAwN,YAAAwgB,YAAAhuB,KAAA+/B,QAWAngC,EAAAqK,KAAA+1B,aAAApgC,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA16B,KAAAy6B,UAAAC,IACA,YACA96B,EAAAqK,KAAA+1B,aAAAryB,UAAAktB,OAAA,SAAA14B,EAAAy4B,EAAAnqB,GACA,GAAAwvB,GAAAjgC,KAAAquB,OAAA4R,KACA,KAAAA,IAAAlwB,MAAAC,QAAAiwB,KAAAA,EAAAv9B,OACA,MAAA,cAAA1C,KAAAwN,YAAAwgB,YAAA,6EAAA1jB,KAAA,IAEA,IAAAtD,IACAhH,KAAAgH,IACA,uBAAAsoB,mBAAAntB,EAAAwjB,SAAA,oBACAsa,EAAA51B,IAAA,SAAAmiB,GAAA,MAAA,SAAA8C,mBAAA9C,KAAAliB,KAAA,KAEA,OAAAtD,GAAAsD,KAAA,KAqBA1K,EAAAqK,KAAAi2B,gBAAAtgC,EAAAqK,KAAAqwB,OAAAza,OAAA,SAAA6a,GACA,IAAAA,IAAAA,EAAA5M,QACA,KAAA,yGAWA9tB,MAAAmgC,qBAAAzF,EAAA5M,OAGA,IAAAsS,GAAAp+B,OAAAC,KAAAy4B,EAAA5M,SACA5N,EAAAlgB,IACAA,MAAAqgC,iBAAA7/B,QAAA,SAAAqN,GACA,GAAAuyB,EAAAz5B,QAAAkH,MAAA,EACA,KAAA,qBAAAqS,EAAA1S,YAAAwgB,YAAA,8CAAAngB,IAGA7N,KAAAy6B,UAAAC,IACA,mBAGA96B,EAAAqK,KAAAi2B,gBAAAvyB,UAAA0yB,oBAEAzgC,EAAAqK,KAAAi2B,gBAAAvyB,UAAA8sB,UAAA,SAAAC,KAEA96B,EAAAqK,KAAAi2B,gBAAAvyB,UAAAotB,WAAA,SAAA54B,EAAAy4B,EAAAnqB,GAGA,GAAAyP,GAAAlgB,IAOA,OANAgC,QAAAC,KAAAjC,KAAAmgC,sBAAA3/B,QAAA,SAAA04B,GACA,GAAAoH,GAAApgB,EAAAigB,qBAAAjH,EACA,IAAA0B,EAAAP,WAAAO,EAAAP,SAAAiG,GACA,KAAApgB,GAAA1S,YAAAwgB,YAAA,qDAAAsS,IAGA3gC,EAAAy6B,KAAAQ,EAAA3zB,WAGArH,EAAAqK,KAAAi2B,gBAAAvyB,UAAA4tB,cAAA,SAAA1yB,EAAA+xB,EAAAnqB,EAAAypB,GAMA,MAAAv6B,GAAAy6B,KAAAp6B,KAAAm8B,iBAAAtzB,EAAA+xB,EAAAnqB,EAAAypB,IACArwB,KAAA,SAAA0yB,GACA,OAAAv0B,OAAA4yB,EAAA5yB,WAAAqyB,SAAAO,EAAAP,aAAApzB,KAAAs1B,MAIA38B,EAAAqK,KAAAi2B,gBAAAvyB,UAAAwuB,iBAAA,SAAAR,EAAAf,GAEA,KAAA,iDCt/BAh7B,EAAA8B,KAAA,SAAAJ,EAAAP,EAAAC,GAiRA,MA/QAhB,MAAA+W,aAAA,EAEA/W,KAAAyL,YAAAzL,KAGAA,KAAAsB,GAAAA,EAGAtB,KAAA2B,UAAA,KAKA3B,KAAAoC,IAAA,KAGApC,KAAA0W,UAMA1W,KAAAs1B,wBAKAt1B,KAAAugC,iCAAA,WACAvgC,KAAAs1B,qBAAA90B,QAAA,SAAAggC,EAAA7mB,GACA3Z,KAAA0W,OAAA8pB,GAAAx/B,OAAAo0B,QAAAzb,GACA9N,KAAA7L,QAOAA,KAAAmY,UAAA,WACA,MAAAnY,MAAAsB,IASAtB,KAAAygC,kBAEA,mBAAAz/B,GAQAhB,KAAAgB,OAAApB,EAAAmO,QAAAS,SAAA5O,EAAAmO,QAAAK,IAAA,OAAA,yBAEApO,KAAAgB,OAAAA,EAEApB,EAAAmO,QAAAS,MAAAxO,KAAAgB,OAAApB,EAAA8B,KAAAwV,eAMAlX,KAAAmX,aAAA3N,KAAAkF,MAAAlF,KAAAC,UAAAzJ,KAAAgB,SAUAhB,KAAAmC,MAAAnC,KAAAgB,OAAAmB,MAGAnC,KAAAuf,IAAA,GAAA3f,GAAAqK,KAAA4vB,UAAA94B,GASAf,KAAA0gC,gBAAA,KAOA1gC,KAAA2gC,aACAC,kBACAC,kBACAC,iBACAC,mBACAC,qBACAC,kBAoCAjhC,KAAA2L,GAAA,SAAAmP,EAAAomB,GACA,IAAAnxB,MAAAC,QAAAhQ,KAAA2gC,YAAA7lB,IACA,KAAA,iDAAAA,EAAAhM,UAEA,IAAA,kBAAAoyB,GACA,KAAA,6DAGA,OADAlhC,MAAA2gC,YAAA7lB,GAAApU,KAAAw6B,GACAA,GAQAlhC,KAAAmhC,IAAA,SAAArmB,EAAAomB,GACA,GAAAE,GAAAphC,KAAA2gC,YAAA7lB,EACA,KAAA/K,MAAAC,QAAAoxB,GACA,KAAA,+CAAAtmB,EAAAhM,UAEA,IAAAuyB,SAAAH,EAGAlhC,KAAA2gC,YAAA7lB,UACA,CACA,GAAAwmB,GAAAF,EAAAz6B,QAAAu6B,EACA,IAAAI,KAAA,EAGA,KAAA,gFAFAF,GAAA3jB,OAAA6jB,EAAA,GAKA,MAAAthC,OAQAA,KAAA0d,KAAA,SAAA5C,EAAAymB,GAGA,IAAAxxB,MAAAC,QAAAhQ,KAAA2gC,YAAA7lB,IACA,KAAA,kDAAAA,EAAAhM,UAEA,IAAA0yB,GAAAxhC,KAAAmY,YACA+H,EAAAlgB,IAeA,OAdAA,MAAA2gC,YAAA7lB,GAAAta,QAAA,SAAAihC,GACA,GAAAC,EAIAA,GAHAH,GAAAA,EAAAC,SAGAD,GAEAC,SAAAA,EAAA34B,KAAA04B,GAAA,MAKAE,EAAArgC,KAAA8e,EAAAwhB,KAEA1hC,MAQAA,KAAAiM,cAAA,WAKA,IAJA,GAAA01B,GAAA3hC,KAAAoC,IAAAf,OAAA6L,wBACA00B,EAAA/O,SAAAC,gBAAA+O,YAAAhP,SAAA5rB,KAAA46B,WACAC,EAAAjP,SAAAC,gBAAAL,WAAAI,SAAA5rB,KAAAwrB,UACA9wB,EAAA3B,KAAAoC,IAAAf,OACA,OAAAM,EAAA6I,YAEA,GADA7I,EAAAA,EAAA6I,WACA7I,IAAAkxB,UAAA,WAAAnzB,EAAAuB,OAAAU,GAAAW,MAAA,YAAA,CACAs/B,GAAA,EAAAjgC,EAAAuL,wBAAAd,KACA01B,GAAA,EAAAngC,EAAAuL,wBAAAhB,GACA,OAGA,OACAnH,EAAA68B,EAAAD,EAAAv1B,KACAD,EAAA21B,EAAAH,EAAAz1B,IACAG,MAAAs1B,EAAAt1B,MACAC,OAAAq1B,EAAAr1B,SAQAtM,KAAAgzB,mBAAA,WAGA,IAFA,GAAA5tB,IAAA8G,IAAA,EAAAE,KAAA,GACAzK,EAAA3B,KAAA2B,UAAAogC,cAAA,KACA,OAAApgC,GACAyD,EAAA8G,KAAAvK,EAAAqgC,UACA58B,EAAAgH,MAAAzK,EAAAsgC,WACAtgC,EAAAA,EAAAogC,cAAA,IAEA,OAAA38B,IAUApF,KAAA6V,eAOA7V,KAAAkiC,YAAA,SAAAvpB,GAEA,MADAA,GAAAA,GAAA,KACAA,GACA,mBAAA3Y,MAAA6V,YAAA8C,UAAA3Y,KAAA6V,YAAA8C,WAAAA,KAAA3Y,KAAAmiC,eAEAniC,KAAA6V,YAAA6C,UAAA1Y,KAAA6V,YAAAusB,SAAApiC,KAAAmiC,eAKAniC,KAAAqiC,mBAEAriC,MAUAJ,EAAA8B,KAAAwV,eACA/U,SACAkK,MAAA,EACAC,OAAA,EACAuI,UAAA,EACAC,WAAA,EACA2B,mBAAA,EACA6rB,aAAA,EACA5rB,UACAxI,WACAiG,eAEAsE,kBAAA,EACA5B,aAAA,GAQAjX,EAAA8B,KAAAiM,UAAA40B,gBAAA,SAAAxoB,GACA,GAAA,WAAAA,GAAA,UAAAA,EACA,KAAA,wEAEA,IAAAyoB,GAAA,CACA,KAAA,GAAAlhC,KAAAtB,MAAA0W,OAEA1W,KAAA0W,OAAApV,GAAAN,OAAA,gBAAA+Y,KACA/Z,KAAA0W,OAAApV,GAAAN,OAAA,gBAAA+Y,GAAA,EAAA/X,OAAAC,KAAAjC,KAAA0W,QAAAhU,QAEA8/B,GAAAxiC,KAAA0W,OAAApV,GAAAN,OAAA,gBAAA+Y,EAEA,OAAAyoB,IAOA5iC,EAAA8B,KAAAiM,UAAA80B,WAAA,WACA,GAAAC,GAAA1iC,KAAAoC,IAAAf,OAAA6L,uBAEA,OADAlN,MAAAuC,cAAAmgC,EAAAr2B,MAAAq2B,EAAAp2B,QACAtM,MAOAJ,EAAA8B,KAAAiM,UAAA00B,iBAAA,WAIA,GAAA5+B,MAAAzD,KAAAgB,OAAAqL,QAAArM,KAAAgB,OAAAqL,OAAA,EACA,KAAA,yDAEA,IAAA5I,MAAAzD,KAAAgB,OAAAsL,SAAAtM,KAAAgB,OAAAsL,QAAA,EACA,KAAA,yDAEA,IAAA7I,MAAAzD,KAAAgB,OAAAshC,eAAAtiC,KAAAgB,OAAAshC,cAAA,EACA,KAAA,gEAoBA,OAhBAtiC,MAAAgB,OAAAyV,oBACAzW,KAAA0gC,gBAAAhhC,EAAAuB,OAAAwd,QAAA9S,GAAA,aAAA3L,KAAAsB,GAAA,WACAtB,KAAAyiC,cACA52B,KAAA7L,OAGAN,EAAAuB,OAAAwd,QAAA9S,GAAA,WAAA3L,KAAAsB,GAAA,WACAtB,KAAAuC,iBACAsJ,KAAA7L,QAIAA,KAAAgB,OAAA0V,OAAAlW,QAAA,SAAAmiC,GACA3iC,KAAA4iC,SAAAD,IACA92B,KAAA7L,OAEAA,MAYAJ,EAAA8B,KAAAiM,UAAApL,cAAA,SAAA8J,EAAAC,GAEA,GAAAhL,GAGAuT,EAAApO,WAAAzG,KAAAgB,OAAA6T,YAAA,EACAC,EAAArO,WAAAzG,KAAAgB,OAAA8T,aAAA,CACA,KAAAxT,IAAAtB,MAAA0W,OACA7B,EAAAlR,KAAAG,IAAA+Q,EAAA7U,KAAA0W,OAAApV,GAAAN,OAAA6T,WACApO,WAAAzG,KAAA0W,OAAApV,GAAAN,OAAA8T,YAAA,GAAArO,WAAAzG,KAAA0W,OAAApV,GAAAN,OAAA2V,qBAAA,IACA7B,EAAAnR,KAAAG,IAAAgR,EAAA9U,KAAA0W,OAAApV,GAAAN,OAAA8T,WAAA9U,KAAA0W,OAAApV,GAAAN,OAAA2V,qBAYA,IATA3W,KAAAgB,OAAA6T,UAAAlR,KAAAG,IAAA+Q,EAAA,GACA7U,KAAAgB,OAAA8T,WAAAnR,KAAAG,IAAAgR,EAAA,GACApV,EAAAuB,OAAAjB,KAAAoC,IAAAf,OAAAmJ,YAAAlI,OACAugC,YAAA7iC,KAAAgB,OAAA6T,UAAA,KACAiuB,aAAA9iC,KAAAgB,OAAA8T,WAAA,QAKArR,MAAA4I,IAAAA,GAAA,IAAA5I,MAAA6I,IAAAA,GAAA,EAAA,CACAtM,KAAAgB,OAAAqL,MAAA1I,KAAAG,IAAAH,KAAA2C,OAAA+F,GAAArM,KAAAgB,OAAA6T,WACA7U,KAAAgB,OAAAsL,OAAA3I,KAAAG,IAAAH,KAAA2C,OAAAgG,GAAAtM,KAAAgB,OAAA8T,YACA9U,KAAAgB,OAAAshC,aAAAtiC,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAAsL,OAEAtM,KAAAgB,OAAAyV,oBACAzW,KAAAoC,MACApC,KAAAgB,OAAAqL,MAAA1I,KAAAG,IAAA9D,KAAAoC,IAAAf,OAAAmJ,WAAA0C,wBAAAb,MAAArM,KAAAgB,OAAA6T,YAEA7U,KAAAgB,OAAAsL,OAAAtM,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAAshC,aACAtiC,KAAAgB,OAAAsL,OAAAtM,KAAAgB,OAAA8T,aACA9U,KAAAgB,OAAAsL,OAAAtM,KAAAgB,OAAA8T,WACA9U,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAAsL,OAAAtM,KAAAgB,OAAAshC,cAIA,IAAAR,GAAA,CACA9hC,MAAAs1B,qBAAA90B,QAAA,SAAAmY,GACA,GAAAoqB,GAAA/iC,KAAAgB,OAAAqL,MACA22B,EAAAhjC,KAAA0W,OAAAiC,GAAA3X,OAAA2V,oBAAA3W,KAAAgB,OAAAsL,MACAtM,MAAA0W,OAAAiC,GAAApW,cAAAwgC,EAAAC,GACAhjC,KAAA0W,OAAAiC,GAAAsqB,UAAA,EAAAnB,GACA9hC,KAAA0W,OAAAiC,GAAA3X,OAAAkiC,oBAAAn+B,EAAA,EACA/E,KAAA0W,OAAAiC,GAAA3X,OAAAkiC,oBAAA/2B,EAAA21B,EAAA9hC,KAAAgB,OAAAsL,OACAw1B,GAAAkB,EACAhjC,KAAA0W,OAAAiC,GAAAzK,UAAApC,UACAD,KAAA7L,WAKA,IAAAgC,OAAAC,KAAAjC,KAAA0W,QAAAhU,OAAA,CACA1C,KAAAgB,OAAAqL,MAAA,EACArM,KAAAgB,OAAAsL,OAAA,CACA,KAAAhL,IAAAtB,MAAA0W,OACA1W,KAAAgB,OAAAqL,MAAA1I,KAAAG,IAAA9D,KAAA0W,OAAApV,GAAAN,OAAAqL,MAAArM,KAAAgB,OAAAqL,OACArM,KAAAgB,OAAAsL,QAAAtM,KAAA0W,OAAApV,GAAAN,OAAAsL,MAEAtM,MAAAgB,OAAAqL,MAAA1I,KAAAG,IAAA9D,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAA6T,WACA7U,KAAAgB,OAAAsL,OAAA3I,KAAAG,IAAA9D,KAAAgB,OAAAsL,OAAAtM,KAAAgB,OAAA8T,YAyBA,MArBA9U,MAAAgB,OAAAshC,aAAAtiC,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAAsL,OAGA,OAAAtM,KAAAoC,MACApC,KAAAgB,OAAAyV,kBACAzW,KAAAoC,IACAX,KAAA,UAAA,OAAAzB,KAAAgB,OAAAqL,MAAA,IAAArM,KAAAgB,OAAAsL,QACA7K,KAAA,sBAAA,iBAEAzB,KAAAoC,IAAAX,KAAA,QAAAzB,KAAAgB,OAAAqL,OAAA5K,KAAA,SAAAzB,KAAAgB,OAAAsL,SAKAtM,KAAA+W,cACA/W,KAAAyY,iBAAAjT,WACAxF,KAAAkO,UAAApC,SACA9L,KAAAkL,QAAAY,SACA9L,KAAA4M,OAAAd,UAGA9L,KAAA0d,KAAA,mBAQA9d,EAAA8B,KAAAiM,UAAAi1B,SAAA,SAAA5hC,GAGA,GAAA,gBAAAA,GACA,KAAA,oEAIA,IAAAgK,GAAA,GAAApL,GAAAqX,MAAAjW,EAAAhB,KAMA,IAHAA,KAAA0W,OAAA1L,EAAA1J,IAAA0J,EAGA,OAAAA,EAAAhK,OAAAo0B,UAAA3xB,MAAAuH,EAAAhK,OAAAo0B,UACAp1B,KAAAs1B,qBAAA5yB,OAAA,EAEAsI,EAAAhK,OAAAo0B,QAAA,IACApqB,EAAAhK,OAAAo0B,QAAAzxB,KAAAG,IAAA9D,KAAAs1B,qBAAA5yB,OAAAsI,EAAAhK,OAAAo0B,QAAA,IAEAp1B,KAAAs1B,qBAAA7X,OAAAzS,EAAAhK,OAAAo0B,QAAA,EAAApqB,EAAA1J,IACAtB,KAAAugC,uCACA,CACA,GAAA79B,GAAA1C,KAAAs1B,qBAAA5uB,KAAAsE,EAAA1J,GACAtB,MAAA0W,OAAA1L,EAAA1J,IAAAN,OAAAo0B,QAAA1yB,EAAA,EAKA,GAAAsU,GAAA,IAoBA,OAnBAhX,MAAAgB,OAAA0V,OAAAlW,QAAA,SAAAmiC,EAAAhpB,GACAgpB,EAAArhC,KAAA0J,EAAA1J,KAAA0V,EAAA2C,KAEA,OAAA3C,IACAA,EAAAhX,KAAAgB,OAAA0V,OAAAhQ,KAAA1G,KAAA0W,OAAA1L,EAAA1J,IAAAN,QAAA,GAEAhB,KAAA0W,OAAA1L,EAAA1J,IAAA0V,WAAAA,EAGAhX,KAAA+W,cACA/W,KAAAwC,iBAEAxC,KAAA0W,OAAA1L,EAAA1J,IAAAmB,aACAzC,KAAA0W,OAAA1L,EAAA1J,IAAAge,QAGAtf,KAAAuC,cAAAvC,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAAsL,SAGAtM,KAAA0W,OAAA1L,EAAA1J,KAcA1B,EAAA8B,KAAAiM,UAAAw1B,eAAA,SAAAC,EAAAC,GACAA,EAAAA,GAAA,MAGA,IAAAC,EAEAA,GADAF,GACAA,GAEAphC,OAAAC,KAAAjC,KAAA0W,OAEA,IAAAwJ,GAAAlgB,IAYA,OAXAsjC,GAAA9iC,QAAA,SAAAggC,GACAtgB,EAAAxJ,OAAA8pB,GAAAjnB,0BAAA/Y,QAAA,SAAA+iC,GACA,GAAAC,GAAAtjB,EAAAxJ,OAAA8pB,GAAApqB,YAAAmtB,EACAC,GAAA3oB,2BAEAqF,GAAAlf,OAAAmB,MAAAq+B,EAAA,IAAA+C,GACA,UAAAF,GACAG,EAAAnsB,sBAIArX,MAQAJ,EAAA8B,KAAAiM,UAAAunB,YAAA,SAAA5zB,GACA,IAAAtB,KAAA0W,OAAApV,GACA,KAAA,yCAAAA,CA6CA,OAzCAtB,MAAAyY,iBAAA7M,OAGA5L,KAAAmjC,eAAA7hC,GAGAtB,KAAA0W,OAAApV,GAAAsL,OAAAhB,OACA5L,KAAA0W,OAAApV,GAAA4M,UAAAuiB,SAAA,GACAzwB,KAAA0W,OAAApV,GAAA4J,QAAAU,OAGA5L,KAAA0W,OAAApV,GAAAc,IAAAT,WACA3B,KAAA0W,OAAApV,GAAAc,IAAAT,UAAA+K,SAIA1M,KAAAgB,OAAA0V,OAAA+G,OAAAzd,KAAA0W,OAAApV,GAAA0V,WAAA,SACAhX,MAAA0W,OAAApV,SACAtB,MAAAgB,OAAAmB,MAAAb,GAGAtB,KAAAgB,OAAA0V,OAAAlW,QAAA,SAAAmiC,EAAAhpB,GACA3Z,KAAA0W,OAAAisB,EAAArhC,IAAA0V,WAAA2C,GACA9N,KAAA7L,OAGAA,KAAAs1B,qBAAA7X,OAAAzd,KAAAs1B,qBAAA3uB,QAAArF,GAAA,GACAtB,KAAAugC,mCAGAvgC,KAAA+W,cAEA/W,KAAAgB,OAAA8T,WAAA9U,KAAAmX,aAAArC,WACA9U,KAAAgB,OAAA6T,UAAA7U,KAAAmX,aAAAtC,UAEA7U,KAAAwC,iBAGAxC,KAAAuC,cAAAvC,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAAsL,SAGAtM,MAaAJ,EAAA8B,KAAAiM,UAAAnL,eAAA,WAEA,GAAAlB,GAKAmiC,GAAAr3B,KAAA,EAAA6I,MAAA,EAKA,KAAA3T,IAAAtB,MAAA0W,OACA,OAAA1W,KAAA0W,OAAApV,GAAAN,OAAA2V,sBACA3W,KAAA0W,OAAApV,GAAAN,OAAA2V,oBAAA3W,KAAA0W,OAAApV,GAAAN,OAAAsL,OAAAtM,KAAAgB,OAAAsL,QAEA,OAAAtM,KAAA0W,OAAApV,GAAAN,OAAA+T,qBACA/U,KAAA0W,OAAApV,GAAAN,OAAA+T,mBAAA,GAEA/U,KAAA0W,OAAApV,GAAAN,OAAA6U,YAAAM,WACAstB,EAAAr3B,KAAAzI,KAAAG,IAAA2/B,EAAAr3B,KAAApM,KAAA0W,OAAApV,GAAAN,OAAAgU,OAAA5I,MACAq3B,EAAAxuB,MAAAtR,KAAAG,IAAA2/B,EAAAxuB,MAAAjV,KAAA0W,OAAApV,GAAAN,OAAAgU,OAAAC,OAKA,IAAAyuB,GAAA1jC,KAAAuiC,gBAAA,SACA,KAAAmB,EACA,MAAA1jC,KAEA,IAAA2jC,GAAA,EAAAD,CACA,KAAApiC,IAAAtB,MAAA0W,OACA1W,KAAA0W,OAAApV,GAAAN,OAAA2V,qBAAAgtB,CAKA,IAAA7B,GAAA,CACA9hC,MAAAs1B,qBAAA90B,QAAA,SAAAmY,GAIA,GAHA3Y,KAAA0W,OAAAiC,GAAAsqB,UAAA,EAAAnB,GACA9hC,KAAA0W,OAAAiC,GAAA3X,OAAAkiC,oBAAAn+B,EAAA,EACA+8B,GAAA9hC,KAAA0W,OAAAiC,GAAA3X,OAAAsL,OACAtM,KAAA0W,OAAAiC,GAAA3X,OAAA6U,YAAAM,SAAA,CACA,GAAA0U,GAAAlnB,KAAAG,IAAA2/B,EAAAr3B,KAAApM,KAAA0W,OAAAiC,GAAA3X,OAAAgU,OAAA5I,KAAA,GACAzI,KAAAG,IAAA2/B,EAAAxuB,MAAAjV,KAAA0W,OAAAiC,GAAA3X,OAAAgU,OAAAC,MAAA,EACAjV,MAAA0W,OAAAiC,GAAA3X,OAAAqL,OAAAwe,EACA7qB,KAAA0W,OAAAiC,GAAA3X,OAAAgU,OAAA5I,KAAAq3B,EAAAr3B,KACApM,KAAA0W,OAAAiC,GAAA3X,OAAAgU,OAAAC,MAAAwuB,EAAAxuB,MACAjV,KAAA0W,OAAAiC,GAAA3X,OAAAqe,SAAA1J,OAAA5Q,EAAA0+B,EAAAr3B,OAEAP,KAAA7L,MACA,IAAA4jC,GAAA9B,CAcA,OAbA9hC,MAAAs1B,qBAAA90B,QAAA,SAAAmY,GACA3Y,KAAA0W,OAAAiC,GAAA3X,OAAAkiC,oBAAA/2B,EAAAnM,KAAA0W,OAAAiC,GAAA3X,OAAA2U,OAAAxJ,EAAAy3B,GACA/3B,KAAA7L,OAGAA,KAAAuC,gBAGAvC,KAAAs1B,qBAAA90B,QAAA,SAAAmY,GACA3Y,KAAA0W,OAAAiC,GAAApW,cAAAvC,KAAAgB,OAAAqL,MAAArM,KAAA0W,OAAAiC,GAAA3X,OAAA+T,mBACA/U,KAAAgB,OAAAsL,OAAAtM,KAAA0W,OAAAiC,GAAA3X,OAAA2V,sBACA9K,KAAA7L,OAEAA,MAUAJ,EAAA8B,KAAAiM,UAAAlL,WAAA,WAQA,GALAzC,KAAAgB,OAAAyV,mBACA/W,EAAAuB,OAAAjB,KAAA2B,WAAA8I,QAAA,2BAAA,GAIAzK,KAAAgB,OAAA6V,YAAA,CACA,GAAAgtB,GAAA7jC,KAAAoC,IAAAC,OAAA,KACAZ,KAAA,QAAA,kBAAAA,KAAA,KAAAzB,KAAAsB,GAAA,gBACAwiC,EAAAD,EAAAxhC,OAAA,QACAZ,KAAA,QAAA,2BAAAA,KAAA,KAAA,GACAsiC,EAAAF,EAAAxhC,OAAA,QACAZ,KAAA,QAAA,6BAAAA,KAAA,KAAA,EACAzB,MAAA6W,aACAzU,IAAAyhC,EACAG,SAAAF,EACAG,WAAAF,GAKA/jC,KAAAkL,QAAAtL,EAAAqL,gBAAA7J,KAAApB,MACAA,KAAA4M,OAAAhN,EAAA+M,eAAAvL,KAAApB,MAGAA,KAAAyY,kBACA3N,OAAA9K,KACAmwB,aAAA,KACAhlB,SAAA,EACAuN,UAAA,EACAwrB,aACAC,gBAAA,KACA74B,KAAA,WAEA,IAAAtL,KAAAmL,UAAAnL,KAAA8K,OAAAI,QAAAC,QAAA,CACAnL,KAAAmL,SAAA,EAEAnL,KAAA8K,OAAAwqB,qBAAA90B,QAAA,SAAAmY,EAAAyrB,GACA,GAAAtjC,GAAApB,EAAAuB,OAAAjB,KAAA8K,OAAA1I,IAAAf,OAAAmJ,YAAAkB,OAAA,MAAA,0BACAjK,KAAA,QAAA,qBACAA,KAAA,QAAA,eACAX,GAAAuB,OAAA,OACA,IAAAgiC,GAAA3kC,EAAA2e,SAAAimB,MACAD,GAAA14B,GAAA,YAAA,WAAA3L,KAAA0Y,UAAA,GAAA7M,KAAA7L,OACAqkC,EAAA14B,GAAA,UAAA,WAAA3L,KAAA0Y,UAAA,GAAA7M,KAAA7L,OACAqkC,EAAA14B,GAAA,OAAA,WAEA,GAAA44B,GAAAvkC,KAAA8K,OAAA4L,OAAA1W,KAAA8K,OAAAwqB,qBAAA8O,IACAI,EAAAD,EAAAvjC,OAAAsL,MACAi4B,GAAAhiC,cAAAgiC,EAAAvjC,OAAAqL,MAAAk4B,EAAAvjC,OAAAsL,OAAA5M,EAAAob,MAAA0Z,GACA,IAAAiQ,GAAAF,EAAAvjC,OAAAsL,OAAAk4B,EACAE,EAAA1kC,KAAA8K,OAAA9J,OAAAsL,OAAAm4B,CAIAzkC,MAAA8K,OAAAwqB,qBAAA90B,QAAA,SAAAmkC,EAAAC,GACA,GAAAC,GAAA7kC,KAAA8K,OAAA4L,OAAA1W,KAAA8K,OAAAwqB,qBAAAsP,GACAC,GAAA7jC,OAAA2V,oBAAAkuB,EAAA7jC,OAAAsL,OAAAo4B,EACAE,EAAAR,IACAS,EAAA5B,UAAA4B,EAAA7jC,OAAA2U,OAAA5Q,EAAA8/B,EAAA7jC,OAAA2U,OAAAxJ,EAAAs4B,GACAI,EAAA32B,UAAA1I,aAEAqG,KAAA7L,OAEAA,KAAA8K,OAAAtI,iBACAxC,KAAAwF,YACAqG,KAAA7L,OACAc,EAAAM,KAAAijC,GACArkC,KAAA8K,OAAA2N,iBAAAyrB,UAAAx9B,KAAA5F,IACA+K,KAAA7L,MAEA,IAAAmkC,GAAAzkC,EAAAuB,OAAAjB,KAAA8K,OAAA1I,IAAAf,OAAAmJ,YAAAkB,OAAA,MAAA,0BACAjK,KAAA,QAAA,4BACAA,KAAA,QAAA,cACA0iC,GAAA9hC,OAAA,QAAAZ,KAAA,QAAA,kCACA0iC,EAAA9hC,OAAA,QAAAZ,KAAA,QAAA,iCACA,IAAAqjC,GAAAplC,EAAA2e,SAAAimB,MACAQ,GAAAn5B,GAAA,YAAA,WAAA3L,KAAA0Y,UAAA,GAAA7M,KAAA7L,OACA8kC,EAAAn5B,GAAA,UAAA,WAAA3L,KAAA0Y,UAAA,GAAA7M,KAAA7L,OACA8kC,EAAAn5B,GAAA,OAAA,WACA3L,KAAAuC,cAAAvC,KAAAgB,OAAAqL,MAAA3M,EAAAob,MAAAiqB,GAAA/kC,KAAAgB,OAAAsL,OAAA5M,EAAAob,MAAA0Z,KACA3oB,KAAA7L,KAAA8K,SACAq5B,EAAA/iC,KAAA0jC,GACA9kC,KAAA8K,OAAA2N,iBAAA0rB,gBAAAA,EAEA,MAAAnkC,MAAAwF,YAEAA,SAAA,WACA,IAAAxF,KAAAmL,QAAA,MAAAnL,KAEA,IAAAglC,GAAAhlC,KAAA8K,OAAAmB,eACAjM,MAAAkkC,UAAA1jC,QAAA,SAAAM,EAAAsjC,GACA,GAAAa,GAAAjlC,KAAA8K,OAAA4L,OAAA1W,KAAA8K,OAAAwqB,qBAAA8O,IAAAn4B,gBACAG,EAAA44B,EAAAjgC,EACAmH,EAAA+4B,EAAA94B,EAAAnM,KAAA8K,OAAA4L,OAAA1W,KAAA8K,OAAAwqB,qBAAA8O,IAAApjC,OAAAsL,OAAA,GACAD,EAAArM,KAAA8K,OAAA9J,OAAAqL,MAAA,CACAvL,GAAAwB,OACA4J,IAAAA,EAAA,KACAE,KAAAA,EAAA,KACAC,MAAAA,EAAA,OAEAvL,EAAAG,OAAA,QAAAqB,OACA+J,MAAAA,EAAA,QAEAR,KAAA7L,MAEA,IAAAklC,GAAA,GACAC,EAAA,EAKA,OAJAnlC,MAAAmkC,gBAAA7hC,OACA4J,IAAA84B,EAAA74B,EAAAnM,KAAA8K,OAAA9J,OAAAsL,OAAA44B,EAAAC,EAAA,KACA/4B,KAAA44B,EAAAjgC,EAAA/E,KAAA8K,OAAA9J,OAAAqL,MAAA64B,EAAAC,EAAA,OAEAnlC,MAEA4L,KAAA,WACA,MAAA5L,MAAAmL,SACAnL,KAAAmL,SAAA,EAEAnL,KAAAkkC,UAAA1jC,QAAA,SAAAM,GAAAA,EAAA4L,WACA1M,KAAAkkC,aAEAlkC,KAAAmkC,gBAAAz3B,SACA1M,KAAAmkC,gBAAA,KACAnkC,MARAA,OAaAA,KAAAgB,OAAAyX,mBACA/Y,EAAAuB,OAAAjB,KAAAoC,IAAAf,OAAAmJ,YAAAmB,GAAA,aAAA3L,KAAAsB,GAAA,oBAAA,WACAyK,aAAA/L,KAAAyY,iBAAA0X,cACAnwB,KAAAyY,iBAAAnN,QACAO,KAAA7L,OACAN,EAAAuB,OAAAjB,KAAAoC,IAAAf,OAAAmJ,YAAAmB,GAAA,YAAA3L,KAAAsB,GAAA,oBAAA,WACAtB,KAAAyY,iBAAA0X,aAAApoB,WAAA,WACA/H,KAAAyY,iBAAA7M,QACAC,KAAA7L,MAAA,MACA6L,KAAA7L,QAIAA,KAAAkO,UAAA,GAAAtO,GAAAswB,UAAAlwB,MAAAsL,MAGA,KAAA,GAAAhK,KAAAtB,MAAA0W,OACA1W,KAAA0W,OAAApV,GAAAmB,YAIA,IAAAmM,GAAA,IAAA5O,KAAAsB,EACA,IAAAtB,KAAAgB,OAAA6V,YAAA,CACA,GAAAuuB,GAAA,WACAplC,KAAA6W,YAAAmtB,SAAAviC,KAAA,KAAA,GACAzB,KAAA6W,YAAAotB,WAAAxiC,KAAA,KAAA,IACAoK,KAAA7L,MACAqlC,EAAA,WACA,GAAAC,GAAA5lC,EAAAgoB,MAAA1nB,KAAAoC,IAAAf,OACArB,MAAA6W,YAAAmtB,SAAAviC,KAAA,IAAA6jC,EAAA,IACAtlC,KAAA6W,YAAAotB,WAAAxiC,KAAA,IAAA6jC,EAAA,KACAz5B,KAAA7L,KACAA,MAAAoC,IACAuJ,GAAA,WAAAiD,EAAA,eAAAw2B,GACAz5B,GAAA,aAAAiD,EAAA,eAAAw2B,GACAz5B,GAAA,YAAAiD,EAAA,eAAAy2B,GAEA,GAAAE,GAAA,WACAvlC,KAAAwlC,YACA35B,KAAA7L,MACAylC,EAAA,WACA,GAAAzlC,KAAA6V,YAAA6C,SAAA,CACA,GAAA4sB,GAAA5lC,EAAAgoB,MAAA1nB,KAAAoC,IAAAf,OACA3B,GAAAob,OAAApb,EAAAob,MAAA4qB,iBACA1lC,KAAA6V,YAAA6C,SAAAitB,UAAAL,EAAA,GAAAtlC,KAAA6V,YAAA6C,SAAAktB,QACA5lC,KAAA6V,YAAA6C,SAAAmtB,UAAAP,EAAA,GAAAtlC,KAAA6V,YAAA6C,SAAAotB,QACA9lC,KAAA0W,OAAA1W,KAAA6V,YAAA8C,UAAAsH,SACAjgB,KAAA6V,YAAAkwB,iBAAAvlC,QAAA,SAAAmY,GACA3Y,KAAA0W,OAAAiC,GAAAsH,UACApU,KAAA7L,SAEA6L,KAAA7L,KACAA,MAAAoC,IACAuJ,GAAA,UAAAiD,EAAA22B,GACA55B,GAAA,WAAAiD,EAAA22B,GACA55B,GAAA,YAAAiD,EAAA62B,GACA95B,GAAA,YAAAiD,EAAA62B,GAIA/lC,EAAAuB,OAAA,QAAAO,SACA9B,EAAAuB,OAAA,QACA0K,GAAA,UAAAiD,EAAA22B,GACA55B,GAAA,WAAAiD,EAAA22B,GAGAvlC,KAAA+W,aAAA,CAIA,IAAAivB,GAAAhmC,KAAAoC,IAAAf,OAAA6L,wBACAb,EAAA25B,EAAA35B,MAAA25B,EAAA35B,MAAArM,KAAAgB,OAAAqL,MACAC,EAAA05B,EAAA15B,OAAA05B,EAAA15B,OAAAtM,KAAAgB,OAAAsL,MAGA,OAFAtM,MAAAuC,cAAA8J,EAAAC,GAEAtM,MAQAJ,EAAA8B,KAAAiM,UAAAhL,QAAA,WACA,MAAA3C,MAAA4rB,cAoCAhsB,EAAA8B,KAAAiM,UAAAs4B,gBAAA,SAAAx1B,EAAAy1B,EAAAC,GACAA,EAAAA,KAGA,IAAAC,GAAAD,EAAAE,SAAA,SAAAC,GACAh9B,QAAA5F,IAAA,yDAAA4iC,IAEApmB,EAAAlgB,KAEAumC,EAAA,WACA,IACArmB,EAAAX,IAAAC,QAAAU,EAAA/d,MAAAsO,GACA5G,KAAA,SAAA4V,GACAymB,EAAAC,EAAA9L,SAAA5a,EAAA4a,SAAA5a,EAAAxY,QACAu/B,MAAAJ,GACA,MAAA78B,GAEA68B,EAAA78B,IAIA,OADAvJ,MAAA2L,GAAA,gBAAA46B,GACAA,GAQA3mC,EAAA8B,KAAAiM,UAAAie,WAAA,SAAA6a,GAEA,GADAA,EAAAA,MACA,gBAAAA,GACA,KAAA,sDAAAA,GAAA,QAIA,IAAAp+B,GAAAmB,KAAAkF,MAAAlF,KAAAC,UAAAzJ,KAAAmC,OAGA,KAAA,GAAAoN,KAAAk3B,GACAp+B,EAAAkH,GAAAk3B,EAAAl3B,EAIAlH,GAAAzI,EAAAwI,cAAAC,EAAArI,KAAAgB,OAGA,KAAAuO,IAAAlH,GACArI,KAAAmC,MAAAoN,GAAAlH,EAAAkH,EAIAvP,MAAA0d,KAAA,kBACA1d,KAAAygC,kBACAzgC,KAAAmiC,cAAA,CACA,KAAA,GAAA7gC,KAAAtB,MAAA0W,OACA1W,KAAAygC,eAAA/5B,KAAA1G,KAAA0W,OAAApV,GAAAge,QAGA,OAAA3f,GAAA+mC,IAAA1mC,KAAAygC,gBACA+F,MAAA,SAAAj9B,GACAD,QAAAC,MAAAA,GACAvJ,KAAAkL,QAAAy7B,KAAAp9B,GACAvJ,KAAAmiC,cAAA,GACAt2B,KAAA7L,OACA6J,KAAA,WAGA7J,KAAAkO,UAAApC,SAGA9L,KAAAs1B,qBAAA90B,QAAA,SAAAmY,GACA,GAAA3N,GAAAhL,KAAA0W,OAAAiC,EACA3N,GAAAkD,UAAApC,SAEAd,EAAAuO,0BAAA/Y,QAAA,SAAA+V,GACA,GAAA1L,GAAA7K,KAAAoW,YAAAG,GACAa,EAAAuB,EAAA,IAAApC,CACA,KAAA,GAAAhH,KAAAvP,MAAAmC,MAAAiV,GACApX,KAAAmC,MAAAiV,GAAApN,eAAAuF,IACAQ,MAAAC,QAAAhQ,KAAAmC,MAAAiV,GAAA7H,KACAvP,KAAAmC,MAAAiV,GAAA7H,GAAA/O,QAAA,SAAAqY,GACA,IACA7Y,KAAAkd,iBAAA3N,EAAAvP,KAAA+Y,eAAAF,IAAA,GACA,MAAAmG,GACA1V,QAAAC,MAAA,0BAAA6N,EAAA,KAAA7H,KAEA1D,KAAAhB,KAGAgB,KAAAb,KACAa,KAAA7L,OAGAA,KAAA0d,KAAA,kBACA1d,KAAA0d,KAAA,iBACA1d,KAAA0d,KAAA,gBAAA+oB,GAEAzmC,KAAAmiC,cAAA,GAEAt2B,KAAA7L,QAUAJ,EAAA8B,KAAAiM,UAAAi5B,UAAA,SAAA57B,EAAAjE,GAEAiE,EAAAA,GAAA,KACAjE,EAAAA,GAAA,IAEA,IAAAiK,GAAA,IACA,QAAAjK,GACA,IAAA,aACA,IAAA,SACAiK,EAAA,GACA,MACA,KAAA,UACAA,EAAA,IACA,MACA,KAAA,UACAA,EAAA,KAIA,KAAAhG,YAAApL,GAAAqX,OAAAjG,GAAAhR,KAAAkiC,eAAA,MAAAliC,MAAAwlC,UAEA,IAAAF,GAAA5lC,EAAAgoB,MAAA1nB,KAAAoC,IAAAf,OAgBA,OAfArB,MAAA6V,aACA8C,SAAA3N,EAAA1J,GACAykC,iBAAA/6B,EAAA67B,kBAAA71B,GACA0H,UACA3R,OAAAA,EACA6+B,QAAAN,EAAA,GACAQ,QAAAR,EAAA,GACAK,UAAA,EACAE,UAAA,EACA70B,KAAAA,IAIAhR,KAAAoC,IAAAE,MAAA,SAAA,cAEAtC,MASAJ,EAAA8B,KAAAiM,UAAA63B,SAAA,WAEA,IAAAxlC,KAAA6V,YAAA6C,SAAA,MAAA1Y,KAEA,IAAA,gBAAAA,MAAA0W,OAAA1W,KAAA6V,YAAA8C,UAEA,MADA3Y,MAAA6V,eACA7V,IAEA,IAAAgL,GAAAhL,KAAA0W,OAAA1W,KAAA6V,YAAA8C,UAKAmuB,EAAA,SAAA91B,EAAA+1B,EAAAvxB,GACAxK,EAAAuO,0BAAA/Y,QAAA,SAAAc,GACA0J,EAAAoL,YAAA9U,GAAAN,OAAAgQ,EAAA,SAAAA,OAAA+1B,IACA/7B,EAAAoL,YAAA9U,GAAAN,OAAAgQ,EAAA,SAAAhN,MAAAwR,EAAA,GACAxK,EAAAoL,YAAA9U,GAAAN,OAAAgQ,EAAA,SAAAC,QAAAuE,EAAA,SACAxK,GAAAoL,YAAA9U,GAAAN,OAAAgQ,EAAA,SAAA8B,mBACA9H,GAAAoL,YAAA9U,GAAAN,OAAAgQ,EAAA,SAAAkB,mBACAlH,GAAAoL,YAAA9U,GAAAN,OAAAgQ,EAAA,SAAAmB,iBACAnH,GAAAoL,YAAA9U,GAAAN,OAAAgQ,EAAA,SAAAxK,SAKA,QAAAxG,KAAA6V,YAAA6C,SAAA3R,QACA,IAAA,aACA,IAAA,SACA,IAAA/G,KAAA6V,YAAA6C,SAAAitB,YACAmB,EAAA,IAAA,EAAA97B,EAAAge,UACAhpB,KAAA4rB,YAAAtmB,MAAA0F,EAAAge,SAAA,GAAAzjB,IAAAyF,EAAAge,SAAA,KAEA,MACA,KAAA,UACA,IAAA,UACA,GAAA,IAAAhpB,KAAA6V,YAAA6C,SAAAmtB,UAAA,CAEA,GAAAmB,GAAAnhC,SAAA7F,KAAA6V,YAAA6C,SAAA3R,OAAA,GACA+/B,GAAA,IAAAE,EAAAh8B,EAAA,IAAAg8B,EAAA,aAQA,MAHAhnC,MAAA6V,eACA7V,KAAAoC,IAAAE,MAAA,SAAA,MAEAtC,MCroCAJ,EAAAqX,MAAA,SAAAjW,EAAA8J,GAEA,GAAA,gBAAA9J,GACA,KAAA,wCASA,IALAhB,KAAA8K,OAAAA,GAAA,KAEA9K,KAAAyL,YAAAX,EAGA,gBAAA9J,GAAAM,IAAAN,EAAAM,GAAAoB,QAaA,GAAA1C,KAAA8K,QACA,mBAAA9K,MAAA8K,OAAA4L,OAAA1V,EAAAM,IACA,KAAA,gCAAAN,EAAAM,GAAA,2CAdA,IAAAtB,KAAA8K,OAEA,CACA,GAAAxJ,GAAA,KACA2lC,EAAA,WACA3lC,EAAA,IAAAqC,KAAAK,MAAAL,KAAA6zB,SAAA7zB,KAAAU,IAAA,GAAA,IACA,MAAA/C,GAAA,mBAAAtB,MAAA8K,OAAA4L,OAAApV,KACAA,EAAA2lC,MAEAp7B,KAAA7L,KACAgB,GAAAM,GAAAA,MATAN,GAAAM,GAAA,IAAAqC,KAAAK,MAAAL,KAAA6zB,SAAA7zB,KAAAU,IAAA,GAAA,GAkOA,OAjNArE,MAAAsB,GAAAN,EAAAM,GAGAtB,KAAA+W,aAAA,EAKA/W,KAAAgX,WAAA,KAEAhX,KAAAoC,OAMApC,KAAAgB,OAAApB,EAAAmO,QAAAS,MAAAxN,MAAApB,EAAAqX,MAAAC,eAGAlX,KAAA8K,QAEA9K,KAAAmC,MAAAnC,KAAA8K,OAAA3I,MAGAnC,KAAAoX,SAAApX,KAAAsB,GACAtB,KAAAmC,MAAAnC,KAAAoX,UAAApX,KAAAmC,MAAAnC,KAAAoX,gBAEApX,KAAAmC,MAAA,KACAnC,KAAAoX,SAAA,MAIApX,KAAAoW,eAEApW,KAAAuZ,6BAGAvZ,KAAAknC,yCAAA,WACAlnC,KAAAuZ,0BAAA/Y,QAAA,SAAA+iC,EAAA5pB,GACA3Z,KAAAoW,YAAAmtB,GAAAviC,OAAA0P,QAAAiJ,GACA9N,KAAA7L,QACA6L,KAAA7L,MAOAA,KAAAmnC,iBAGAnnC,KAAA+gB,QAAA,KAEA/gB,KAAAonC,SAAA,KAEApnC,KAAAqnC,SAAA,KAGArnC,KAAAgpB,SAAA,KAEAhpB,KAAAsnC,UAAA,KAEAtnC,KAAAunC,UAAA,KAGAvnC,KAAAwnC,WAEAxnC,KAAAynC;AAEAznC,KAAA0nC,YAOA1nC,KAAA2nC,aAAA,KAGA3nC,KAAAmY,UAAA,WACA,MAAAnY,MAAA8K,OAAAxJ,GAAA,IAAAtB,KAAAsB,IAQAtB,KAAA2gC,aACAC,kBACAC,kBACAC,iBACAC,mBACAC,sBA0BAhhC,KAAA2L,GAAA,SAAAmP,EAAAomB,GAEA,IAAAnxB,MAAAC,QAAAhQ,KAAA2gC,YAAA7lB,IACA,KAAA,iDAAAA,EAAAhM,UAEA,IAAA,kBAAAoyB,GACA,KAAA,6DAGA,OADAlhC,MAAA2gC,YAAA7lB,GAAApU,KAAAw6B,GACAA,GAQAlhC,KAAAmhC,IAAA,SAAArmB,EAAAomB,GACA,GAAAE,GAAAphC,KAAA2gC,YAAA7lB,EACA,KAAA/K,MAAAC,QAAAoxB,GACA,KAAA,+CAAAtmB,EAAAhM,UAEA,IAAAuyB,SAAAH,EAGAlhC,KAAA2gC,YAAA7lB,UACA,CACA,GAAAwmB,GAAAF,EAAAz6B,QAAAu6B,EACA,IAAAI,KAAA,EAGA,KAAA,gFAFAF,GAAA3jB,OAAA6jB,EAAA,GAKA,MAAAthC,OAaAA,KAAA0d,KAAA,SAAA5C,EAAAymB,EAAAqG,GAKA,GAJAA,EAAAA,IAAA,GAIA73B,MAAAC,QAAAhQ,KAAA2gC,YAAA7lB,IACA,KAAA,kDAAAA,EAAAhM,UAEA,kBAAAyyB,IAAA,IAAA7zB,UAAAhL,SAEAklC,EAAArG,EACAA,EAAA,KAEA,IAAAC,GAAAxhC,KAAAmY,YACA+H,EAAAlgB,KACA0hC,GAAAF,SAAAA,EAAA34B,KAAA04B,GAAA,KASA,OARAvhC,MAAA2gC,YAAA7lB,GAAAta,QAAA,SAAAihC,GAGAA,EAAArgC,KAAA8e,EAAAwhB,KAEAkG,GAAA5nC,KAAA8K,QACA9K,KAAA8K,OAAA4S,KAAA5C,EAAA4mB,GAEA1hC,MAQAA,KAAAiM,cAAA,WACA,GAAA47B,GAAA7nC,KAAA8K,OAAAmB,eACA,QACAlH,EAAA8iC,EAAA9iC,EAAA/E,KAAAgB,OAAA2U,OAAA5Q,EACAoH,EAAA07B,EAAA17B,EAAAnM,KAAAgB,OAAA2U,OAAAxJ,IAKAnM,KAAAqiC,mBAEAriC,KASAJ,GAAAqX,MAAAC,eACA5C,OAAApL,KAAA,GAAA5G,SAAAyC,EAAA,GAAAoH,EAAA,IACAipB,QAAA,KACA/oB,MAAA,EACAC,OAAA,EACAqJ,QAAA5Q,EAAA,EAAAoH,EAAA,MACA0I,UAAA,EACAC,WAAA,EACAC,mBAAA,KACA4B,oBAAA,KACAusB,qBAAAn+B,EAAA,EAAAoH,EAAA,MACA6I,QAAA9I,IAAA,EAAA+I,MAAA,EAAAC,OAAA,EAAA9I,KAAA,GACA07B,iBAAA,mBACA55B,WACAiG,eAEAkL,UACA/S,OAAA,EACAD,MAAA,EACAsJ,QAAA5Q,EAAA,EAAAoH,EAAA,IAEAkJ,MACAtQ,KACA0Q,MACAC,OAEA9D,OAAA,KACAiE,aACAC,wBAAA,EACAC,uBAAA,EACAC,wBAAA,EACAC,wBAAA,EACAC,gBAAA,EACAC,UAAA,EACA4xB,WAAA,EACAC,WAAA,GAEA5xB,eAQAxW,GAAAqX,MAAAtJ,UAAA00B,iBAAA,WAUA,GANA,IAAAriC,KAAAgB,OAAAqL,OAAA,OAAArM,KAAAgB,OAAA+T,qBACA/U,KAAAgB,OAAA+T,mBAAA,GAKA,IAAA/U,KAAAgB,OAAAsL,QAAA,OAAAtM,KAAAgB,OAAA2V,oBAAA,CACA,GAAAsxB,GAAAjmC,OAAAC,KAAAjC,KAAA8K,OAAA4L,QAAAhU,MACAulC,GAAA,EACAjoC,KAAAgB,OAAA2V,oBAAA,EAAAsxB,EAEAjoC,KAAAgB,OAAA2V,oBAAA,EAgCA,MA3BA3W,MAAAuC,gBACAvC,KAAAijC,YACAjjC,KAAAkoC,YAIAloC,KAAAkpB,SAAA,EAAAlpB,KAAAgB,OAAAqe,SAAAhT,OACArM,KAAAmoC,UAAAnoC,KAAAgB,OAAAqe,SAAA/S,OAAA,GACAtM,KAAAooC,UAAApoC,KAAAgB,OAAAqe,SAAA/S,OAAA,IAGA,IAAA,KAAA,MAAA9L,QAAA,SAAAwQ,GACAhP,OAAAC,KAAAjC,KAAAgB,OAAAqU,KAAArE,IAAAtO,QAAA1C,KAAAgB,OAAAqU,KAAArE,GAAAiP,UAAA,GAIAjgB,KAAAgB,OAAAqU,KAAArE,GAAAiP,QAAA,EACAjgB,KAAAgB,OAAAqU,KAAArE,GAAAe,MAAA/R,KAAAgB,OAAAqU,KAAArE,GAAAe,OAAA,KACA/R,KAAAgB,OAAAqU,KAAArE,GAAAq3B,eAAAroC,KAAAgB,OAAAqU,KAAArE,GAAAq3B,gBAAA,MAJAroC,KAAAgB,OAAAqU,KAAArE,GAAAiP,QAAA,GAMApU,KAAA7L,OAGAA,KAAAgB,OAAAoV,YAAA5V,QAAA,SAAA8nC,GACAtoC,KAAAuoC,aAAAD,IACAz8B,KAAA7L,OAEAA,MAcAJ,EAAAqX,MAAAtJ,UAAApL,cAAA,SAAA8J,EAAAC,GA0BA,MAzBA,mBAAAD,IAAA,mBAAAC,IACA7I,MAAA4I,IAAAA,GAAA,IAAA5I,MAAA6I,IAAAA,GAAA,IACAtM,KAAAgB,OAAAqL,MAAA1I,KAAAG,IAAAH,KAAA2C,OAAA+F,GAAArM,KAAAgB,OAAA6T,WACA7U,KAAAgB,OAAAsL,OAAA3I,KAAAG,IAAAH,KAAA2C,OAAAgG,GAAAtM,KAAAgB,OAAA8T,cAGA,OAAA9U,KAAAgB,OAAA+T,qBACA/U,KAAAgB,OAAAqL,MAAA1I,KAAAG,IAAA9D,KAAAgB,OAAA+T,mBAAA/U,KAAA8K,OAAA9J,OAAAqL,MAAArM,KAAAgB,OAAA6T,YAEA,OAAA7U,KAAAgB,OAAA2V,sBACA3W,KAAAgB,OAAAsL,OAAA3I,KAAAG,IAAA9D,KAAAgB,OAAA2V,oBAAA3W,KAAA8K,OAAA9J,OAAAsL,OAAAtM,KAAAgB,OAAA8T,cAGA9U,KAAAgB,OAAAqe,SAAAhT,MAAA1I,KAAAG,IAAA9D,KAAAgB,OAAAqL,OAAArM,KAAAgB,OAAAgU,OAAA5I,KAAApM,KAAAgB,OAAAgU,OAAAC,OAAA,GACAjV,KAAAgB,OAAAqe,SAAA/S,OAAA3I,KAAAG,IAAA9D,KAAAgB,OAAAsL,QAAAtM,KAAAgB,OAAAgU,OAAA9I,IAAAlM,KAAAgB,OAAAgU,OAAAE,QAAA,GACAlV,KAAAoC,IAAAiX,UACArZ,KAAAoC,IAAAiX,SAAA5X,KAAA,QAAAzB,KAAAgB,OAAAqL,OAAA5K,KAAA,SAAAzB,KAAAgB,OAAAsL,QAEAtM,KAAA+W,cACA/W,KAAAigB,SACAjgB,KAAAkL,QAAAY,SACA9L,KAAA4M,OAAAd,SACA9L,KAAAkO,UAAApC,SACA9L,KAAA4R,QAAA5R,KAAA4R,OAAApM,YAEAxF,MAWAJ,EAAAqX,MAAAtJ,UAAAs1B,UAAA,SAAAl+B,EAAAoH,GAIA,OAHA1I,MAAAsB,IAAAA,GAAA,IAAA/E,KAAAgB,OAAA2U,OAAA5Q,EAAApB,KAAAG,IAAAH,KAAA2C,OAAAvB,GAAA,KACAtB,MAAA0I,IAAAA,GAAA,IAAAnM,KAAAgB,OAAA2U,OAAAxJ,EAAAxI,KAAAG,IAAAH,KAAA2C,OAAA6F,GAAA,IACAnM,KAAA+W,aAAA/W,KAAAigB,SACAjgB,MAYAJ,EAAAqX,MAAAtJ,UAAAu6B,UAAA,SAAAh8B,EAAA+I,EAAAC,EAAA9I,GACA,GAAAkB,EAwBA,QAvBA7J,MAAAyI,IAAAA,GAAA,IAAAlM,KAAAgB,OAAAgU,OAAA9I,IAAAvI,KAAAG,IAAAH,KAAA2C,OAAA4F,GAAA,KACAzI,MAAAwR,IAAAA,GAAA,IAAAjV,KAAAgB,OAAAgU,OAAAC,MAAAtR,KAAAG,IAAAH,KAAA2C,OAAA2O,GAAA,KACAxR,MAAAyR,IAAAA,GAAA,IAAAlV,KAAAgB,OAAAgU,OAAAE,OAAAvR,KAAAG,IAAAH,KAAA2C,OAAA4O,GAAA,KACAzR,MAAA2I,IAAAA,GAAA,IAAApM,KAAAgB,OAAAgU,OAAA5I,KAAAzI,KAAAG,IAAAH,KAAA2C,OAAA8F,GAAA,IACApM,KAAAgB,OAAAgU,OAAA9I,IAAAlM,KAAAgB,OAAAgU,OAAAE,OAAAlV,KAAAgB,OAAAsL,SACAgB,EAAA3J,KAAAK,OAAAhE,KAAAgB,OAAAgU,OAAA9I,IAAAlM,KAAAgB,OAAAgU,OAAAE,OAAAlV,KAAAgB,OAAAsL,QAAA,GACAtM,KAAAgB,OAAAgU,OAAA9I,KAAAoB,EACAtN,KAAAgB,OAAAgU,OAAAE,QAAA5H,GAEAtN,KAAAgB,OAAAgU,OAAA5I,KAAApM,KAAAgB,OAAAgU,OAAAC,MAAAjV,KAAAgB,OAAAqL,QACAiB,EAAA3J,KAAAK,OAAAhE,KAAAgB,OAAAgU,OAAA5I,KAAApM,KAAAgB,OAAAgU,OAAAC,MAAAjV,KAAAgB,OAAAqL,OAAA,GACArM,KAAAgB,OAAAgU,OAAA5I,MAAAkB,EACAtN,KAAAgB,OAAAgU,OAAAC,OAAA3H,IAEA,MAAA,QAAA,SAAA,QAAA9M,QAAA,SAAAwI,GACAhJ,KAAAgB,OAAAgU,OAAAhM,GAAArF,KAAAG,IAAA9D,KAAAgB,OAAAgU,OAAAhM,GAAA,IACA6C,KAAA7L,OACAA,KAAAgB,OAAAqe,SAAAhT,MAAA1I,KAAAG,IAAA9D,KAAAgB,OAAAqL,OAAArM,KAAAgB,OAAAgU,OAAA5I,KAAApM,KAAAgB,OAAAgU,OAAAC,OAAA,GACAjV,KAAAgB,OAAAqe,SAAA/S,OAAA3I,KAAAG,IAAA9D,KAAAgB,OAAAsL,QAAAtM,KAAAgB,OAAAgU,OAAA9I,IAAAlM,KAAAgB,OAAAgU,OAAAE,QAAA,GACAlV,KAAAgB,OAAAqe,SAAA1J,OAAA5Q,EAAA/E,KAAAgB,OAAAgU,OAAA5I,KACApM,KAAAgB,OAAAqe,SAAA1J,OAAAxJ,EAAAnM,KAAAgB,OAAAgU,OAAA9I,IAEAlM,KAAA+W,aAAA/W,KAAAigB,SACAjgB,MAgBAJ,EAAAqX,MAAAtJ,UAAA4jB,SAAA,SAAAjd,GACA,GAAA,gBAAAtU,MAAAgB,OAAAsT,MAAA,CACA,GAAApL,GAAAlJ,KAAAgB,OAAAsT,KACAtU,MAAAgB,OAAAsT,OAAApL,KAAAA,EAAAnE,EAAA,EAAAoH,EAAA,EAAA7J,UAgBA,MAdA,gBAAAgS,GACAtU,KAAAgB,OAAAsT,MAAApL,KAAAoL,EACA,gBAAAA,IAAA,OAAAA,IACAtU,KAAAgB,OAAAsT,MAAA1U,EAAAmO,QAAAS,MAAA8F,EAAAtU,KAAAgB,OAAAsT,QAEAtU,KAAAgB,OAAAsT,MAAApL,KAAAxG,OACA1C,KAAAsU,MAAA7S,KAAA,UAAA,MACAA,KAAA,IAAAgF,WAAAzG,KAAAgB,OAAAsT,MAAAvP,IACAtD,KAAA,IAAAgF,WAAAzG,KAAAgB,OAAAsT,MAAAnI,IACA7J,MAAAtC,KAAAgB,OAAAsT,MAAAhS,OACA4G,KAAAlJ,KAAAgB,OAAAsT,MAAApL,MAEAlJ,KAAAsU,MAAA7S,KAAA,UAAA,QAEAzB,MASAJ,EAAAqX,MAAAtJ,UAAAlL,WAAA,WAIAzC,KAAAoC,IAAAT,UAAA3B,KAAA8K,OAAA1I,IAAAC,OAAA,KACAZ,KAAA,KAAAzB,KAAAmY,YAAA,oBACA1W,KAAA,YAAA,cAAAzB,KAAAgB,OAAA2U,OAAA5Q,GAAA,GAAA,KAAA/E,KAAAgB,OAAA2U,OAAAxJ,GAAA,GAAA,IAGA,IAAAq8B,GAAAxoC,KAAAoC,IAAAT,UAAAU,OAAA,YACAZ,KAAA,KAAAzB,KAAAmY,YAAA,QAuEA,IAtEAnY,KAAAoC,IAAAiX,SAAAmvB,EAAAnmC,OAAA,QACAZ,KAAA,QAAAzB,KAAAgB,OAAAqL,OAAA5K,KAAA,SAAAzB,KAAAgB,OAAAsL,QAGAtM,KAAAoC,IAAAkW,MAAAtY,KAAAoC,IAAAT,UAAAU,OAAA,KACAZ,KAAA,KAAAzB,KAAAmY,YAAA,UACA1W,KAAA,YAAA,QAAAzB,KAAAmY,YAAA,UAIAnY,KAAAkL,QAAAtL,EAAAqL,gBAAA7J,KAAApB,MAEAA,KAAA4M,OAAAhN,EAAA+M,eAAAvL,KAAApB,MAMAA,KAAAkO,UAAA,GAAAtO,GAAAswB,UAAAlwB,MAGAA,KAAAmV,aAAAnV,KAAAoC,IAAAkW,MAAAjW,OAAA,QACAZ,KAAA,QAAA,uBACAkK,GAAA,QAAA,WACA,qBAAA3L,KAAAgB,OAAA8mC,kBAAA9nC,KAAAyoC,mBACA58B,KAAA7L,OAIAA,KAAAsU,MAAAtU,KAAAoC,IAAAkW,MAAAjW,OAAA,QAAAZ,KAAA,QAAA,kBACA,mBAAAzB,MAAAgB,OAAAsT,OAAAtU,KAAAuxB,WAGAvxB,KAAAoC,IAAAyO,OAAA7Q,KAAAoC,IAAAkW,MAAAjW,OAAA,KACAZ,KAAA,KAAAzB,KAAAmY,YAAA,WAAA1W,KAAA,QAAA,gBACAzB,KAAAgB,OAAAqU,KAAAtQ,EAAAkb,SACAjgB,KAAAoC,IAAAsmC,aAAA1oC,KAAAoC,IAAAyO,OAAAxO,OAAA,QACAZ,KAAA,QAAA,yBACAA,KAAA,cAAA,WAEAzB,KAAAoC,IAAAumC,QAAA3oC,KAAAoC,IAAAkW,MAAAjW,OAAA,KACAZ,KAAA,KAAAzB,KAAAmY,YAAA,YAAA1W,KAAA,QAAA,sBACAzB,KAAAgB,OAAAqU,KAAAI,GAAAwK,SACAjgB,KAAAoC,IAAAwmC,cAAA5oC,KAAAoC,IAAAumC,QAAAtmC,OAAA,QACAZ,KAAA,QAAA,0BACAA,KAAA,cAAA,WAEAzB,KAAAoC,IAAAymC,QAAA7oC,KAAAoC,IAAAkW,MAAAjW,OAAA,KACAZ,KAAA,KAAAzB,KAAAmY,YAAA,YAAA1W,KAAA,QAAA,sBACAzB,KAAAgB,OAAAqU,KAAAK,GAAAuK,SACAjgB,KAAAoC,IAAA0mC,cAAA9oC,KAAAoC,IAAAymC,QAAAxmC,OAAA,QACAZ,KAAA,QAAA,0BACAA,KAAA,cAAA,WAIAzB,KAAAuZ,0BAAA/Y,QAAA,SAAAc,GACAtB,KAAAoW,YAAA9U,GAAAmB,cACAoJ,KAAA7L,OAMAA,KAAA4R,OAAA,KACA5R,KAAAgB,OAAA4Q,SACA5R,KAAA4R,OAAA,GAAAhS,GAAAs4B,OAAAl4B,OAIAA,KAAAgB,OAAA6U,YAAAC,uBAAA,CACA,GAAAlH,GAAA,IAAA5O,KAAA8K,OAAAxJ,GAAA,IAAAtB,KAAAsB,GAAA,oBACAynC,EAAA,WACA/oC,KAAA8K,OAAA87B,UAAA5mC,KAAA,eACA6L,KAAA7L,KACAA,MAAAoC,IAAAT,UAAAV,OAAA,wBACA0K,GAAA,YAAAiD,EAAA,cAAAm6B,GACAp9B,GAAA,aAAAiD,EAAA,cAAAm6B,GAGA,MAAA/oC,OAOAJ,EAAAqX,MAAAtJ,UAAA6L,iBAAA,WACA,GAAAyS,KACAjsB,MAAAuZ,0BAAA/Y,QAAA,SAAAc,GACA2qB,EAAAvlB,KAAA1G,KAAAoW,YAAA9U,GAAAN,OAAA0P,UACA7E,KAAA7L,OACAA,KAAAoC,IAAAkW,MAAAxV,UAAA,6BAAA+F,KAAAojB,GAAAA,KAAAvsB,EAAAspC,WACAhpC,KAAAknC,4CAQAtnC,EAAAqX,MAAAtJ,UAAAk5B,kBAAA,SAAA71B,GACAA,EAAAA,GAAA,IACA,IAAA+0B,KACA,QAAA,IAAA,KAAA,MAAAp/B,QAAAqK,MAAA,EAAA+0B,EACA/lC,KAAAgB,OAAA6U,YAAA7E,EAAA,YACAhR,KAAA8K,OAAAwqB,qBAAA90B,QAAA,SAAAmY,GACAA,IAAA3Y,KAAAsB,IAAAtB,KAAA8K,OAAA4L,OAAAiC,GAAA3X,OAAA6U,YAAA7E,EAAA,YACA+0B,EAAAr/B,KAAAiS,IAEA9M,KAAA7L,OACA+lC,GANAA,GAaAnmC,EAAAqX,MAAAtJ,UAAA2L,OAAA,WAOA,MANAtZ,MAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,QAAA,KACAp1B,KAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,SAAAp1B,KAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,QAAA,GACAp1B,KAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,QAAA,GAAAp1B,KAAAsB,GACAtB,KAAA8K,OAAAy1B,mCACAvgC,KAAA8K,OAAAtI,kBAEAxC,MAOAJ,EAAAqX,MAAAtJ,UAAA8L,SAAA,WAOA,MANAzZ,MAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,QAAA,KACAp1B,KAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,SAAAp1B,KAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,QAAA,GACAp1B,KAAA8K,OAAAwqB,qBAAAt1B,KAAAgB,OAAAo0B,QAAA,GAAAp1B,KAAAsB,GACAtB,KAAA8K,OAAAy1B,mCACAvgC,KAAA8K,OAAAtI,kBAEAxC,MAUAJ,EAAAqX,MAAAtJ,UAAA46B,aAAA,SAAAvnC,GAGA,GAAA,gBAAAA,IAAA,gBAAAA,GAAAM,KAAAN,EAAAM,GAAAoB,OACA,KAAA,8EAEA,IAAA,mBAAA1C,MAAAoW,YAAApV,EAAAM,IACA,KAAA,qCAAAN,EAAAM,GAAA,wDAEA,IAAA,gBAAAN,GAAAqN,KACA,KAAA,sFAIA,iBAAArN,GAAA+P,QAAA,mBAAA/P,GAAA+P,OAAAC,OAAA,EAAA,GAAArK,QAAA3F,EAAA+P,OAAAC,SAAA,IACAhQ,EAAA+P,OAAAC,KAAA,EAIA,IAAAnG,GAAAjL,EAAA8f,WAAAtR,IAAApN,EAAAqN,KAAArN,EAAAhB,KAMA,IAHAA,KAAAoW,YAAAvL,EAAAvJ,IAAAuJ,EAGA,OAAAA,EAAA7J,OAAA0P,UAAAjN,MAAAoH,EAAA7J,OAAA0P,UACA1Q,KAAAuZ,0BAAA7W,OAAA,EAEAmI,EAAA7J,OAAA0P,QAAA,IACA7F,EAAA7J,OAAA0P,QAAA/M,KAAAG,IAAA9D,KAAAuZ,0BAAA7W,OAAAmI,EAAA7J,OAAA0P,QAAA,IAEA1Q,KAAAuZ,0BAAAkE,OAAA5S,EAAA7J,OAAA0P,QAAA,EAAA7F,EAAAvJ,IACAtB,KAAAuZ,0BAAA/Y,QAAA,SAAA+iC,EAAA5pB,GACA3Z,KAAAoW,YAAAmtB,GAAAviC,OAAA0P,QAAAiJ,GACA9N,KAAA7L,WACA,CACA,GAAA0C,GAAA1C,KAAAuZ,0BAAA7S,KAAAmE,EAAAvJ,GACAtB,MAAAoW,YAAAvL,EAAAvJ,IAAAN,OAAA0P,QAAAhO,EAAA,EAKA,GAAAsU,GAAA,IASA,OARAhX,MAAAgB,OAAAoV,YAAA5V,QAAA,SAAA8nC,EAAA3uB,GACA2uB,EAAAhnC,KAAAuJ,EAAAvJ,KAAA0V,EAAA2C,KAEA,OAAA3C,IACAA,EAAAhX,KAAAgB,OAAAoV,YAAA1P,KAAA1G,KAAAoW,YAAAvL,EAAAvJ,IAAAN,QAAA,GAEAhB,KAAAoW,YAAAvL,EAAAvJ,IAAA0V,WAAAA,EAEAhX,KAAAoW,YAAAvL,EAAAvJ,KAQA1B,EAAAqX,MAAAtJ,UAAAmpB,gBAAA,SAAAx1B,GACA,IAAAtB,KAAAoW,YAAA9U,GACA,KAAA,8CAAAA,CAyBA,OArBAtB,MAAAoW,YAAA9U,GAAAuZ,qBAGA7a,KAAAoW,YAAA9U,GAAAc,IAAAT,WACA3B,KAAAoW,YAAA9U,GAAAc,IAAAT,UAAA+K,SAIA1M,KAAAgB,OAAAoV,YAAAqH,OAAAzd,KAAAoW,YAAA9U,GAAA0V,WAAA,SACAhX,MAAAmC,MAAAnC,KAAAoW,YAAA9U,GAAA8V,gBACApX,MAAAoW,YAAA9U,GAGAtB,KAAAuZ,0BAAAkE,OAAAzd,KAAAuZ,0BAAA5S,QAAArF,GAAA,GAGAtB,KAAAknC,2CACAlnC,KAAAgB,OAAAoV,YAAA5V,QAAA,SAAA8nC,EAAA3uB,GACA3Z,KAAAoW,YAAAkyB,EAAAhnC,IAAA0V,WAAA2C,GACA9N,KAAA7L,OAEAA,MAOAJ,EAAAqX,MAAAtJ,UAAA86B,gBAAA,WAIA,MAHAzoC,MAAAuZ,0BAAA/Y,QAAA,SAAAc,GACAtB,KAAAoW,YAAA9U,GAAA8b,oBAAA,YAAA,IACAvR,KAAA7L,OACAA,MAQAJ,EAAAqX,MAAAtJ,UAAA2R,MAAA,WACAtf,KAAA0d,KAAA,kBACA1d,KAAAmnC,iBAGAnnC,KAAAkL,QAAAU,MAEA,KAAA,GAAAtK,KAAAtB,MAAAoW,YACA,IACApW,KAAAmnC,cAAAzgC,KAAA1G,KAAAoW,YAAA9U,GAAAge,SACA,MAAA/V,GACAD,QAAA4kB,KAAA3kB,GACAvJ,KAAAkL,QAAAI,KAAA/B,GAIA,MAAA5J,GAAA+mC,IAAA1mC,KAAAmnC,eACAt9B,KAAA,WACA7J,KAAA+W,aAAA,EACA/W,KAAAigB,SACAjgB,KAAA0d,KAAA,kBAAA,GACA1d,KAAA0d,KAAA,kBACA7R,KAAA7L,OACAwmC,MAAA,SAAAj9B,GACAD,QAAA4kB,KAAA3kB,GACAvJ,KAAAkL,QAAAI,KAAA/B,IACAsC,KAAA7L,QAOAJ,EAAAqX,MAAAtJ,UAAAs7B,gBAAA,YAGA,IAAA,KAAA,MAAAzoC,QAAA,SAAAwQ,GACAhR,KAAAgR,EAAA,WAAA,MACAnF,KAAA7L,MAGA,KAAA,GAAAsB,KAAAtB,MAAAoW,YAAA,CAEA,GAAAvL,GAAA7K,KAAAoW,YAAA9U,EAQA,IALAuJ,EAAA7J,OAAA6P,SAAAhG,EAAA7J,OAAA6P,OAAAkY,YACA/oB,KAAAgpB,SAAAtpB,EAAA8V,QAAAxV,KAAAgpB,cAAAsE,OAAAziB,EAAAiP,cAAA,QAIAjP,EAAA7J,OAAA+P,SAAAlG,EAAA7J,OAAA+P,OAAAgY,UAAA,CACA,GAAAhY,GAAA,IAAAlG,EAAA7J,OAAA+P,OAAAC,IACAhR,MAAA+Q,EAAA,WAAArR,EAAA8V,QAAAxV,KAAA+Q,EAAA,gBAAAuc,OAAAziB,EAAAiP,cAAA,QAUA,MAJA9Z,MAAAgB,OAAAqU,KAAAtQ,GAAA,UAAA/E,KAAAgB,OAAAqU,KAAAtQ,EAAAyQ,SACAxV,KAAAgpB,UAAAhpB,KAAAmC,MAAAmD,MAAAtF,KAAAmC,MAAAoD,MAGAvF,MAoBAJ,EAAAqX,MAAAtJ,UAAAu7B,cAAA,SAAAl4B,GAGA,GAAAhR,KAAAgB,OAAAqU,KAAArE,GAAAxK,MAAA,CACA,GAAAxF,GAAAhB,KAAAgB,OAAAqU,KAAArE,GAEAm4B,EAAAnoC,EAAAwF,KACA,IAAAuJ,MAAAC,QAAAm5B,GAEA,MAAAA,EAGA,IAAA,gBAAAA,GAAA,CAIA,GAAAjpB,GAAAlgB,KAGAua,GAAA/U,SAAA2jC,EAAA3jC,UAEA4jC,EAAAppC,KAAAuZ,0BAAA+B,OAAA,SAAA+tB,EAAA9yB,GACA,GAAA+yB,GAAAppB,EAAA9J,YAAAG,EACA,OAAA8yB,GAAA/b,OAAAgc,EAAAhvB,SAAAtJ,EAAAuJ,QAGA,OAAA6uB,GAAA/+B,IAAA,SAAAmiB,GAEA,GAAA+c,KAEA,OADAA,GAAA3pC,EAAAmO,QAAAS,MAAA+6B,EAAAJ,GACAvpC,EAAAmO,QAAAS,MAAA+6B,EAAA/c,MAMA,MAAAxsB,MAAAgR,EAAA,WACApR,EAAA6F,YAAAzF,KAAAgR,EAAA,WAAA,YAUApR,EAAAqX,MAAAtJ,UAAAsS,OAAA,WAGAjgB,KAAAoC,IAAAT,UAAAF,KAAA,YAAA,aAAAzB,KAAAgB,OAAA2U,OAAA5Q,EAAA,IAAA/E,KAAAgB,OAAA2U,OAAAxJ,EAAA,KAGAnM,KAAAoC,IAAAiX,SAAA5X,KAAA,QAAAzB,KAAAgB,OAAAqL,OAAA5K,KAAA,SAAAzB,KAAAgB,OAAAsL,QAGAtM,KAAAmV,aACA1T,KAAA,IAAAzB,KAAAgB,OAAAgU,OAAA5I,MAAA3K,KAAA,IAAAzB,KAAAgB,OAAAgU,OAAA9I,KACAzK,KAAA,QAAAzB,KAAAgB,OAAAqL,OAAArM,KAAAgB,OAAAgU,OAAA5I,KAAApM,KAAAgB,OAAAgU,OAAAC,QACAxT,KAAA,SAAAzB,KAAAgB,OAAAsL,QAAAtM,KAAAgB,OAAAgU,OAAA9I,IAAAlM,KAAAgB,OAAAgU,OAAAE,SACAlV,KAAAgB,OAAAmU,cACAnV,KAAAmV,aAAA7S,OAAAsO,eAAA,EAAAD,OAAA3Q,KAAAgB,OAAAmU,eAIAnV,KAAAuxB,WAGAvxB,KAAAipC,iBAIA,IAAAO,GAAA,SAAAp/B,EAAAq/B,GACA,GAAAC,GAAA/lC,KAAAU,KAAA,GAAAolC,GACAE,EAAAhmC,KAAAU,KAAA,IAAAolC,GACAG,EAAAjmC,KAAAU,IAAA,IAAAolC,GACAI,EAAAlmC,KAAAU,IAAA,GAAAolC,EAMA,OALAr/B,KAAA0/B,EAAAA,IAAA1/B,EAAAy/B,GACAz/B,MAAA0/B,EAAAA,KAAA1/B,EAAAs/B,GACA,IAAAt/B,IAAAA,EAAAw/B,GACAx/B,EAAA,IAAAA,EAAAzG,KAAAG,IAAAH,KAAAE,IAAAuG,EAAAy/B,GAAAD,IACAx/B,EAAA,IAAAA,EAAAzG,KAAAG,IAAAH,KAAAE,IAAAuG,EAAAu/B,GAAAD,IACAt/B,GAIA2/B,IACA,IAAA/pC,KAAAgpB,SAAA,CACA,GAAAghB,IAAA1kC,MAAA,EAAAC,IAAAvF,KAAAgB,OAAAqe,SAAAhT,MACArM,MAAAgB,OAAAqU,KAAAtQ,EAAAW,QACAskC,EAAA1kC,MAAAtF,KAAAgB,OAAAqU,KAAAtQ,EAAAW,MAAAJ,OAAA0kC,EAAA1kC,MACA0kC,EAAAzkC,IAAAvF,KAAAgB,OAAAqU,KAAAtQ,EAAAW,MAAAH,KAAAykC,EAAAzkC,KAEAwkC,EAAAhlC,GAAAilC,EAAA1kC,MAAA0kC,EAAAzkC,KACAwkC,EAAAE,WAAAD,EAAA1kC,MAAA0kC,EAAAzkC,KAEA,GAAAvF,KAAAsnC,UAAA,CACA,GAAA4C,IAAA5kC,MAAAtF,KAAAgB,OAAAqe,SAAA/S,OAAA/G,IAAA,EACAvF,MAAAgB,OAAAqU,KAAAI,GAAA/P,QACAwkC,EAAA5kC,MAAAtF,KAAAgB,OAAAqU,KAAAI,GAAA/P,MAAAJ,OAAA4kC,EAAA5kC,MACA4kC,EAAA3kC,IAAAvF,KAAAgB,OAAAqU,KAAAI,GAAA/P,MAAAH,KAAA2kC,EAAA3kC,KAEAwkC,EAAAt0B,IAAAy0B,EAAA5kC,MAAA4kC,EAAA3kC,KACAwkC,EAAAI,YAAAD,EAAA5kC,MAAA4kC,EAAA3kC,KAEA,GAAAvF,KAAAunC,UAAA,CACA,GAAA6C,IAAA9kC,MAAAtF,KAAAgB,OAAAqe,SAAA/S,OAAA/G,IAAA,EACAvF,MAAAgB,OAAAqU,KAAAK,GAAAhQ,QACA0kC,EAAA9kC,MAAAtF,KAAAgB,OAAAqU,KAAAK,GAAAhQ,MAAAJ,OAAA8kC,EAAA9kC,MACA8kC,EAAA7kC,IAAAvF,KAAAgB,OAAAqU,KAAAK,GAAAhQ,MAAAH,KAAA6kC,EAAA7kC,KAEAwkC,EAAAr0B,IAAA00B,EAAA9kC,MAAA8kC,EAAA7kC,KACAwkC,EAAAM,YAAAD,EAAA9kC,MAAA8kC,EAAA7kC,KAIA,GAAAvF,KAAA8K,OAAA+K,YAAA8C,WAAA3Y,KAAA8K,OAAA+K,YAAA8C,WAAA3Y,KAAAsB,IAAAtB,KAAA8K,OAAA+K,YAAAkwB,iBAAAp/B,QAAA3G,KAAAsB,OAAA,GAAA,CACA,GAAAgpC,GAAAC,EAAA,IACA,IAAAvqC,KAAA8K,OAAA+K,YAAAusB,SAAA,kBAAApiC,MAAA+gB,QAAA,CACA,GAAAypB,GAAA7mC,KAAAuC,IAAAlG,KAAAgpB,SAAA,GAAAhpB,KAAAgpB,SAAA,IACAyhB,EAAA9mC,KAAA2C,MAAAtG,KAAA+gB,QAAA8C,OAAAkmB,EAAAE,UAAA,KAAAtmC,KAAA2C,MAAAtG,KAAA+gB,QAAA8C,OAAAkmB,EAAAE,UAAA,KACAxU,EAAAz1B,KAAA8K,OAAA+K,YAAAusB,QAAAjV,MACAud,EAAA/mC,KAAAK,MAAAymC,GAAA,EAAAhV,GACAA,GAAA,IAAAhyB,MAAAzD,KAAA8K,OAAA9J,OAAA2H,kBACA8sB,EAAA,GAAA9xB,KAAAE,IAAA6mC,EAAA1qC,KAAA8K,OAAA9J,OAAA2H,kBAAA8hC,GACAhV,EAAA,IAAAhyB,MAAAzD,KAAA8K,OAAA9J,OAAA0H,oBACA+sB,EAAA,GAAA9xB,KAAAG,IAAA4mC,EAAA1qC,KAAA8K,OAAA9J,OAAA0H,kBAAA+hC,GAEA,IAAAE,GAAAhnC,KAAAK,MAAAwmC,EAAA/U,EACA6U,GAAAtqC,KAAA8K,OAAA+K,YAAAusB,QAAAj9B,OAAAnF,KAAAgB,OAAAgU,OAAA5I,KAAApM,KAAAgB,OAAA2U,OAAA5Q,CACA,IAAA6lC,GAAAN,EAAAtqC,KAAAgB,OAAAqe,SAAAhT,MACAw+B,EAAAlnC,KAAAG,IAAAH,KAAAK,MAAAhE,KAAA+gB,QAAA8C,OAAAkmB,EAAAE,UAAA,KAAAU,EAAAF,GAAAG,GAAA,EACAb,GAAAE,WAAAjqC,KAAA+gB,QAAA8pB,GAAA7qC,KAAA+gB,QAAA8pB,EAAAF,QACA,IAAA3qC,KAAA8K,OAAA+K,YAAA6C,SACA,OAAA1Y,KAAA8K,OAAA+K,YAAA6C,SAAA3R,QACA,IAAA,aACAgjC,EAAAE,UAAA,IAAAjqC,KAAA8K,OAAA+K,YAAA6C,SAAAitB,UACAoE,EAAAE,UAAA,GAAAjqC,KAAAgB,OAAAqe,SAAAhT,MAAArM,KAAA8K,OAAA+K,YAAA6C,SAAAitB,SACA,MACA,KAAA,SACAjmC,EAAAob,OAAApb,EAAAob,MAAAsD,UACA2rB,EAAAE,UAAA,IAAAjqC,KAAA8K,OAAA+K,YAAA6C,SAAAitB,UACAoE,EAAAE,UAAA,GAAAjqC,KAAAgB,OAAAqe,SAAAhT,MAAArM,KAAA8K,OAAA+K,YAAA6C,SAAAitB,YAEA2E,EAAAtqC,KAAA8K,OAAA+K,YAAA6C,SAAAktB,QAAA5lC,KAAAgB,OAAAgU,OAAA5I,KAAApM,KAAAgB,OAAA2U,OAAA5Q,EACAwlC,EAAAf,EAAAc,GAAAA,EAAAtqC,KAAA8K,OAAA+K,YAAA6C,SAAAitB,WAAA,GACAoE,EAAAE,UAAA,GAAA,EACAF,EAAAE,UAAA,GAAAtmC,KAAAG,IAAA9D,KAAAgB,OAAAqe,SAAAhT,OAAA,EAAAk+B,GAAA,GAEA,MACA,KAAA,UACA,IAAA,UACA,GAAAO,GAAA,IAAA9qC,KAAA8K,OAAA+K,YAAA6C,SAAA3R,OAAA,GAAA,UACArH,GAAAob,OAAApb,EAAAob,MAAAsD,UACA2rB,EAAAe,GAAA,GAAA9qC,KAAAgB,OAAAqe,SAAA/S,OAAAtM,KAAA8K,OAAA+K,YAAA6C,SAAAmtB,UACAkE,EAAAe,GAAA,IAAA9qC,KAAA8K,OAAA+K,YAAA6C,SAAAmtB,YAEAyE,EAAAtqC,KAAAgB,OAAAqe,SAAA/S,QAAAtM,KAAA8K,OAAA+K,YAAA6C,SAAAotB,QAAA9lC,KAAAgB,OAAAgU,OAAA9I,IAAAlM,KAAAgB,OAAA2U,OAAAxJ,GACAo+B,EAAAf,EAAAc,GAAAA,EAAAtqC,KAAA8K,OAAA+K,YAAA6C,SAAAmtB,WAAA,GACAkE,EAAAe,GAAA,GAAA9qC,KAAAgB,OAAAqe,SAAA/S,OACAy9B,EAAAe,GAAA,GAAA9qC,KAAAgB,OAAAqe,SAAA/S,OAAAtM,KAAAgB,OAAAqe,SAAA/S,QAAA,EAAAi+B,KA8BA,IAvBA,IAAA,KAAA,MAAA/pC,QAAA,SAAAwQ,GACAhR,KAAAgR,EAAA,aAGAhR,KAAAgR,EAAA,UAAAtR,EAAAytB,MAAA4d,SACAC,OAAAhrC,KAAAgR,EAAA,YACAtL,MAAAqkC,EAAA/4B,EAAA,aAGAhR,KAAAgR,EAAA,YACAhR,KAAAgR,EAAA,UAAA6S,OAAAkmB,EAAA/4B,GAAA,IACAhR,KAAAgR,EAAA,UAAA6S,OAAAkmB,EAAA/4B,GAAA,KAIAhR,KAAAgR,EAAA,UAAAtR,EAAAytB,MAAA4d,SACAC,OAAAhrC,KAAAgR,EAAA,YAAAtL,MAAAqkC,EAAA/4B,IAGAhR,KAAAirC,WAAAj6B,KACAnF,KAAA7L,OAGAA,KAAAgB,OAAA6U,YAAAK,eAAA,CACA,GAAAg1B,GAAA,WAGA,IAAAxrC,EAAAob,MAAAsD,SAIA,YAHApe,KAAA8K,OAAAo3B,YAAAliC,KAAAsB,KACAtB,KAAA4M,OAAAtB,KAAA,kDAAAM,KAAA,KAKA,IADAlM,EAAAob,MAAA4qB,iBACA1lC,KAAA8K,OAAAo3B,YAAAliC,KAAAsB,IAAA,CACA,GAAAgkC,GAAA5lC,EAAAgoB,MAAA1nB,KAAAoC,IAAAT,UAAAN,QACAwpB,EAAAlnB,KAAAG,KAAA,EAAAH,KAAAE,IAAA,EAAAnE,EAAAob,MAAAqwB,aAAAzrC,EAAAob,MAAAswB,SAAA1rC,EAAAob,MAAAuwB,QACA,KAAAxgB,IACA7qB,KAAA8K,OAAA+K,aACA8C,SAAA3Y,KAAAsB,GACAykC,iBAAA/lC,KAAA6mC,kBAAA,KACAzE,SACAjV,MAAAtC,EAAA,EAAA,GAAA,IACA1lB,OAAAmgC,EAAA,KAGAtlC,KAAAigB,SACAjgB,KAAA8K,OAAA+K,YAAAkwB,iBAAAvlC,QAAA,SAAAmY,GACA3Y,KAAA8K,OAAA4L,OAAAiC,GAAAsH,UACApU,KAAA7L,OACA,OAAAA,KAAA2nC,cAAA57B,aAAA/L,KAAA2nC,cACA3nC,KAAA2nC,aAAA5/B,WAAA,WACA/H,KAAA8K,OAAA+K,eACA7V,KAAA8K,OAAA8gB,YAAAtmB,MAAAtF,KAAAgpB,SAAA,GAAAzjB,IAAAvF,KAAAgpB,SAAA,MACAnd,KAAA7L,MAAA,QACA6L,KAAA7L,KACAA,MAAAsrC,cAAA5rC,EAAA2e,SAAAktB,OACAvrC,KAAAoC,IAAAT,UAAAP,KAAApB,KAAAsrC,eACA3/B,GAAA,aAAAu/B,GACAv/B,GAAA,kBAAAu/B,GACAv/B,GAAA,sBAAAu/B,GAQA,MAJAlrC,MAAAuZ,0BAAA/Y,QAAA,SAAA+V,GACAvW,KAAAoW,YAAAG,GAAA6I,OAAAa,UACApU,KAAA7L,OAEAA,MASAJ,EAAAqX,MAAAtJ,UAAAs9B,WAAA,SAAAj6B,GAEA,IAAA,IAAA,KAAA,MAAArK,QAAAqK,MAAA,EACA,KAAA,mDAAAA,CAGA,IAAAw6B,GAAAxrC,KAAAgB,OAAAqU,KAAArE,GAAAiP,QACA,kBAAAjgB,MAAAgR,EAAA,YACAvN,MAAAzD,KAAAgR,EAAA,UAAA,GAQA,IAJAhR,KAAAgR,EAAA,UACAhR,KAAAoC,IAAAT,UAAAV,OAAA,gBAAA+P,GAAA1O,MAAA,UAAAkpC,EAAA,KAAA,SAGAA,EAAA,MAAAxrC,KAGA,IAAAyrC,IACA1mC,GACAS,SAAA,aAAAxF,KAAAgB,OAAAgU,OAAA5I,KAAA,KAAApM,KAAAgB,OAAAsL,OAAAtM,KAAAgB,OAAAgU,OAAAE,QAAA,IACA3E,YAAA,SACAioB,QAAAx4B,KAAAgB,OAAAqe,SAAAhT,MAAA,EACAosB,QAAAz4B,KAAAgB,OAAAqU,KAAArE,GAAAsE,cAAA,EACAo2B,aAAA,MAEAj2B,IACAjQ,SAAA,aAAAxF,KAAAgB,OAAAgU,OAAA5I,KAAA,IAAApM,KAAAgB,OAAAgU,OAAA9I,IAAA,IACAqE,YAAA,OACAioB,SAAA,GAAAx4B,KAAAgB,OAAAqU,KAAArE,GAAAsE,cAAA,GACAmjB,QAAAz4B,KAAAgB,OAAAqe,SAAA/S,OAAA,EACAo/B,cAAA,IAEAh2B,IACAlQ,SAAA,cAAAxF,KAAAgB,OAAAqL,MAAArM,KAAAgB,OAAAgU,OAAAC,OAAA,IAAAjV,KAAAgB,OAAAgU,OAAA9I,IAAA,IACAqE,YAAA,QACAioB,QAAAx4B,KAAAgB,OAAAqU,KAAArE,GAAAsE,cAAA,EACAmjB,QAAAz4B,KAAAgB,OAAAqe,SAAA/S,OAAA,EACAo/B,cAAA,IAKA1rC,MAAAgR,EAAA,UAAAhR,KAAAkpC,cAAAl4B,EAGA,IAAA26B,GAAA,SAAAnlC,GACA,IAAA,GAAA9F,GAAA,EAAAA,EAAA8F,EAAA9D,OAAAhC,IACA,GAAA+C,MAAA+C,EAAA9F,IACA,OAAA,CAGA,QAAA,GACAV,KAAAgR,EAAA,UAMA,IAHAhR,KAAAgR,EAAA,SAAAtR,EAAA0C,IAAA4O,OAAAmc,MAAAntB,KAAAgR,EAAA,WAAA46B,OAAAH,EAAAz6B,GAAAT,aAAAs7B,YAAA,GAGAF,EACA3rC,KAAAgR,EAAA,SAAA86B,WAAA9rC,KAAAgR,EAAA,WACA,WAAAhR,KAAAgB,OAAAqU,KAAArE,GAAAuE,aACAvV,KAAAgR,EAAA,SAAA+6B,WAAA,SAAAtrC,GAAA,MAAAb,GAAAoD,oBAAAvC,EAAA,SAEA,CACA,GAAA+F,GAAAxG,KAAAgR,EAAA,UAAA3G,IAAA,SAAA+Z,GACA,MAAAA,GAAApT,EAAAuuB,OAAA,EAAA,KAEAv/B,MAAAgR,EAAA,SAAA86B,WAAAtlC,GACAulC,WAAA,SAAA3nB,EAAA1jB,GAAA,MAAAV,MAAAgR,EAAA,UAAAtQ,GAAAwI,MAAA2C,KAAA7L,OASA,GALAA,KAAAoC,IAAA4O,EAAA,SACAvP,KAAA,YAAAgqC,EAAAz6B,GAAAxL,UACApE,KAAApB,KAAAgR,EAAA,WAGA26B,EAAA,CACA,GAAAK,GAAAtsC,EAAAoD,UAAA,KAAA9C,KAAAmY,YAAAzT,QAAA,IAAA,OAAA,MAAAsM,EAAA,gBACAhG,EAAAhL,IACAgsC,GAAAjpC,KAAA,SAAAtC,EAAAC,GACA,GAAAI,GAAApB,EAAAuB,OAAAjB,MAAAiB,OAAA,OACA+J,GAAAgG,EAAA,UAAAtQ,GAAA4B,OACAxB,EAAAwB,MAAA0I,EAAAgG,EAAA,UAAAtQ,GAAA4B,OAEA0I,EAAAgG,EAAA,UAAAtQ,GAAA4V,WACAxV,EAAAW,KAAA,YAAAuJ,EAAAgG,EAAA,UAAAtQ,GAAA4V,aAMA,GAAAvE,GAAA/R,KAAAgB,OAAAqU,KAAArE,GAAAe,OAAA,IAqCA,OApCA,QAAAA,IACA/R,KAAAoC,IAAA4O,EAAA,eACAvP,KAAA,IAAAgqC,EAAAz6B,GAAAwnB,SAAA/2B,KAAA,IAAAgqC,EAAAz6B,GAAAynB,SACAvvB,KAAAtJ,EAAAgJ,YAAA5I,KAAAmC,MAAA4P,IACA,OAAA05B,EAAAz6B,GAAA06B,cACA1rC,KAAAoC,IAAA4O,EAAA,eACAvP,KAAA,YAAA,UAAAgqC,EAAAz6B,GAAA06B,aAAA,IAAAD,EAAAz6B,GAAAwnB,QAAA,IAAAiT,EAAAz6B,GAAAynB,QAAA,OAKA,IAAA,KAAA,MAAAj4B,QAAA,SAAAwQ,GACA,GAAAhR,KAAAgB,OAAA6U,YAAA,QAAA7E,EAAA,mBAAA,CACA,GAAApC,GAAA,IAAA5O,KAAA8K,OAAAxJ,GAAA,IAAAtB,KAAAsB,GAAA,oBACA2qC,EAAA,WACA,kBAAAvsC,GAAAuB,OAAAjB,MAAAqB,OAAA6qC,OAAAxsC,EAAAuB,OAAAjB,MAAAqB,OAAA6qC,OACA,IAAAC,GAAA,MAAAn7B,EAAA,YAAA,WACAtR,GAAAob,OAAApb,EAAAob,MAAAsD,WAAA+tB,EAAA,QACAzsC,EAAAuB,OAAAjB,MACAsC,OAAAkR,cAAA,OAAA24B,OAAAA,IACAxgC,GAAA,UAAAiD,EAAAq9B,GACAtgC,GAAA,QAAAiD,EAAAq9B,GAEAjsC,MAAAoC,IAAAT,UAAAmB,UAAA,eAAAkO,EAAA,eACAvP,KAAA,WAAA,GACAkK,GAAA,YAAAiD,EAAAq9B,GACAtgC,GAAA,WAAAiD,EAAA,WACAlP,EAAAuB,OAAAjB,MAAAsC,OAAAkR,cAAA,WACA9T,EAAAuB,OAAAjB,MAAA2L,GAAA,UAAAiD,EAAA,MAAAjD,GAAA,QAAAiD,EAAA,QAEAjD,GAAA,YAAAiD,EAAA,WACA5O,KAAA8K,OAAA87B,UAAA5mC,KAAAgR,EAAA,UACAnF,KAAA7L,SAEA6L,KAAA7L,OAEAA,MAUAJ,EAAAqX,MAAAtJ,UAAAuZ,kBAAA,SAAAD,GACAA,GAAAA,GAAA,KACA,OAAAA,GACAjnB,KAAAuZ,0BAAA/Y,QAAA,SAAAc,GACA,GAAA8qC,GAAApsC,KAAAoW,YAAA9U,GAAA8W,yBACAg0B,IACAnlB,EAAA,OAAAA,GAAAmlB,EACAzoC,KAAAG,IAAAmjB,GAAAmlB,KAEAvgC,KAAA7L,QAEAinB,IACAA,IAAAjnB,KAAAgB,OAAAgU,OAAA9I,MAAAlM,KAAAgB,OAAAgU,OAAAE,OACAlV,KAAAuC,cAAAvC,KAAAgB,OAAAqL,MAAA4a,GACAjnB,KAAA8K,OAAAvI,gBACAvC,KAAA8K,OAAAwqB,qBAAA90B,QAAA,SAAAc,GACAtB,KAAA8K,OAAA4L,OAAApV,GAAAN,OAAA2V,oBAAA,MACA9K,KAAA7L,OACAA,KAAA8K,OAAAtI,mBAWA5C,EAAAqX,MAAAtJ,UAAAwP,0BAAA,SAAAvV,EAAAyV,EAAAhK,EAAAZ,GACAzS,KAAAuZ,0BAAA/Y,QAAA,SAAAc,GACAtB,KAAAoW,YAAA9U,GAAA6b,0BAAAvV,EAAAyV,EAAAhK,EAAAZ,IACA5G,KAAA7L,QAOAJ,EAAAqX,MAAAtJ,UAAAyP,oBAAA,SAAAxV,EAAAyV,GACArd,KAAAuZ,0BAAA/Y,QAAA,SAAAc,GACAtB,KAAAoW,YAAA9U,GAAA8b,oBAAAxV,EAAAyV,IACAxR,KAAA7L,QAGAJ,EAAAkX,UAAAiB,SAAAE,MAAAzX,QAAA,SAAAuc,EAAApD,GACA,GAAAqD,GAAApd,EAAAkX,UAAAiB,SAAAC,WAAA2B,GACAsD,EAAA,KAAAF,CAEAnd,GAAAqX,MAAAtJ,UAAAoP,EAAA,qBAAA,SAAA1J,EAAAZ,GAEA,MADAA,GAAA,mBAAAA,MAAAA,EACAzS,KAAAmd,0BAAAH,GAAA,EAAA3J,EAAAZ,IAEA7S,EAAAqX,MAAAtJ,UAAAsP,EAAA,qBAAA,SAAA5J,EAAAZ,GAEA,MADAA,GAAA,mBAAAA,MAAAA,EACAzS,KAAAmd,0BAAAH,GAAA,EAAA3J,EAAAZ,IAGA7S,EAAAqX,MAAAtJ,UAAAoP,EAAA,eAAA,WAEA,MADA/c,MAAAod,oBAAAJ,GAAA,GACAhd,MAEAJ,EAAAqX,MAAAtJ,UAAAsP,EAAA,eAAA,WAEA,MADAjd,MAAAod,oBAAAJ,GAAA,GACAhd,QAeAJ,EAAAqX,MAAAtJ,UAAA0+B,eAAA,SAAAC,GAWA,MAVA,mBAAAA,KAAAA,GAAA,GACAA,GACAtsC,KAAA4M,OAAAtB,KAAA,cAAA6B,UAEAnN,KAAA2L,GAAA,iBAAA,WACA3L,KAAA4M,OAAAtB,KAAA,cAAA6B,WACAtB,KAAA7L,OACAA,KAAA2L,GAAA,gBAAA,WACA3L,KAAA4M,OAAAhB,QACAC,KAAA7L,OACAA,MAzCAJ,MAAAA,GAAA0J,QAAAC,MAAA,2BACAgjC,GAAA,MAAA3sC","file":"locuszoom.app.min.js","sourcesContent":[null,"/**\n * @namespace\n */\nvar LocusZoom = {\n    version: \"0.8.0\"\n};\n\n/**\n * Populate a single element with a LocusZoom plot.\n * selector can be a string for a DOM Query or a d3 selector.\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot} The newly created plot instance\n */\nLocusZoom.populate = function(selector, datasource, layout) {\n    if (typeof selector == \"undefined\"){\n        throw (\"LocusZoom.populate selector not defined\");\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html(\"\");\n    var plot;\n    d3.select(selector).call(function(){\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof this.node().id == \"undefined\"){\n            var iterator = 0;\n            while (!d3.select(\"#lz-\" + iterator).empty()){ iterator++; }\n            this.attr(\"id\", \"#lz-\" + iterator);\n        }\n        // Create the plot\n        plot = new LocusZoom.Plot(this.node().id, datasource, layout);\n        plot.container = this.node();\n        // Detect data-region and fill in state values if present\n        if (typeof this.node().dataset !== \"undefined\" && typeof this.node().dataset.region !== \"undefined\"){\n            var parsed_state = LocusZoom.parsePositionQuery(this.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key){\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select(\"div#\" + plot.id)\n            .append(\"svg\")\n            .attr(\"version\", \"1.1\")\n            .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n            .attr(\"id\", plot.id + \"_svg\").attr(\"class\", \"lz-locuszoom\")\n            .style(plot.layout.style);\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (typeof datasource == \"object\" && Object.keys(datasource).length){\n            plot.refresh();\n        }\n    });\n    return plot;\n};\n\n/**\n * Populate arbitrarily many elements each with a LocusZoom plot\n *   using a common datasource and layout\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot[]}\n */\nLocusZoom.populateAll = function(selector, datasource, layout) {\n    var plots = [];\n    d3.selectAll(selector).each(function(d,i) {\n        plots[i] = LocusZoom.populate(this, datasource, layout);\n    });\n    return plots;\n};\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {String} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nLocusZoom.positionIntToString = function(pos, exp, suffix){\n    var exp_symbols = { 0: \"\", 3: \"K\", 6: \"M\", 9: \"G\" };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null){\n        var log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    var places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    var min_exp = Math.min(Math.max(exp, 0), 2);\n    var places = Math.min(Math.max(places_exp, min_exp), 12);\n    var ret = \"\" + (pos / Math.pow(10, exp)).toFixed(places);\n    if (suffix && typeof exp_symbols[exp] !== \"undefined\"){\n        ret += \" \" + exp_symbols[exp] + \"b\";\n    }\n    return ret;\n};\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nLocusZoom.positionStringToInt = function(p) {\n    var val = p.toUpperCase();\n    val = val.replace(/,/g, \"\");\n    var suffixre = /([KMG])[B]*$/;\n    var suffix = suffixre.exec(val);\n    var mult = 1;\n    if (suffix) {\n        if (suffix[1]===\"M\") {\n            mult = 1e6;\n        } else if (suffix[1]===\"G\") {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre,\"\");\n    }\n    val = Number(val) * mult;\n    return val;\n};\n\n/**\n * Parse region queries into their constituent parts\n * TODO: handle genes (or send off to API)\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nLocusZoom.parsePositionQuery = function(x) {\n    var chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    var chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    var match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === \"+\") {\n            var center = LocusZoom.positionStringToInt(match[2]);\n            var offset = LocusZoom.positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: LocusZoom.positionStringToInt(match[2]),\n                end: LocusZoom.positionStringToInt(match[4])\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: LocusZoom.positionStringToInt(match[2])\n        };\n    }\n    return null;\n};\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nLocusZoom.prettyTicks = function(range, clip_range, target_tick_count){\n    if (typeof target_tick_count == \"undefined\" || isNaN(parseInt(target_tick_count))){\n        target_tick_count = 5;\n    }\n    target_tick_count = parseInt(target_tick_count);\n    \n    var min_n = target_tick_count / 3;\n    var shrink_sml = 0.75;\n    var high_u_bias = 1.5;\n    var u5_bias = 0.5 + 1.5 * high_u_bias;\n    \n    var d = Math.abs(range[0] - range[1]);\n    var c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2){\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n    \n    var base = Math.pow(10, Math.floor(Math.log(c)/Math.LN10));\n    var base_toFixed = 0;\n    if (base < 1 && base !== 0){\n        base_toFixed = Math.abs(Math.round(Math.log(base)/Math.LN10));\n    }\n    \n    var unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ){\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ){\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ){\n                unit = 10 * base;\n            }\n        }\n    }\n    \n    var ticks = [];\n    var i = parseFloat( (Math.floor(range[0]/unit)*unit).toFixed(base_toFixed) );\n    while (i < range[1]){\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0){\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n    \n    if (typeof clip_range == \"undefined\" || [\"low\", \"high\", \"both\", \"neither\"].indexOf(clip_range) === -1){\n        clip_range = \"neither\";\n    }\n    if (clip_range === \"low\" || clip_range === \"both\"){\n        if (ticks[0] < range[0]){ ticks = ticks.slice(1); }\n    }\n    if (clip_range === \"high\" || clip_range === \"both\"){\n        if (ticks[ticks.length-1] > range[1]){ ticks.pop(); }\n    }\n    \n    return ticks;\n};\n\n/**\n * Make an AJAX request and return a promise.\n * From http://www.html5rocks.com/en/tutorials/cors/\n *   and with promises from https://gist.github.com/kriskowal/593076\n *\n * @param {String} method The HTTP verb\n * @param {String} url\n * @param {String} body The request body to send to the server\n * @param {Object} headers Object of custom request headers\n * @param {Number} [timeout] If provided, wait this long (in ms) before timing out\n * @returns {Promise}\n */\nLocusZoom.createCORSPromise = function (method, url, body, headers, timeout) {\n    var response = Q.defer();\n    var xhr = new XMLHttpRequest();\n    if (\"withCredentials\" in xhr) {\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n    }\n    if (xhr) {\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0 ) {\n                    response.resolve(xhr.response);\n                } else {\n                    response.reject(\"HTTP \" + xhr.status + \" for \" + url);\n                }\n            }\n        };\n        timeout && setTimeout(response.reject, timeout);\n        body = typeof body !== \"undefined\" ? body : \"\";\n        if (typeof headers !== \"undefined\"){\n            for (var header in headers){\n                xhr.setRequestHeader(header, headers[header]);\n            }\n        }\n        // Send the request\n        xhr.send(body);\n    } \n    return response.promise;\n};\n\n/**\n * Validate a (presumed complete) plot state object against internal rules for consistency, and ensure the plot fits\n *   within any constraints imposed by the layout.\n * @param {Object} new_state\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nLocusZoom.validateState = function(new_state, layout){\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    var validated_region = false;\n    if (typeof new_state.chr != \"undefined\" && typeof new_state.start != \"undefined\" && typeof new_state.end != \"undefined\"){\n        // Determine a numeric scale and midpoint for the attempted region,\n        var attempted_midpoint = null; var attempted_scale;\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)){\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)){\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0){\n                var temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0){\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n};\n\n//\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values! Will ignore non-scalars.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if {{field_name}} }} Conditional text {{/if}} will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n * @returns {string}\n */\nLocusZoom.parseFields = function (data, html) {\n    if (typeof data != \"object\"){\n        throw (\"LocusZoom.parseFields invalid arguments: data is not an object\");\n    }\n    if (typeof html != \"string\"){\n        throw (\"LocusZoom.parseFields invalid arguments: html is not a string\");\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    var tokens = [];\n    var regex = /\\{\\{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))\\}\\}/;\n    while (html.length > 0){\n        var m = regex.exec(html);\n        if (!m) { tokens.push({text: html}); html = \"\"; }\n        else if (m.index !== 0) { tokens.push({text: html.slice(0, m.index)}); html = html.slice(m.index); }\n        else if (m[1] === \"#if \") { tokens.push({condition: m[2]}); html = html.slice(m[0].length); }\n        else if (m[2]) { tokens.push({variable: m[2]}); html = html.slice(m[0].length); }\n        else if (m[3] === \"/if\") { tokens.push({close: \"if\"}); html = html.slice(m[0].length); }\n        else {\n            console.error(\"Error tokenizing tooltip when remaining template is \" + JSON.stringify(html) +\n                          \" and previous tokens are \" + JSON.stringify(tokens) +\n                          \" and current regex match is \" + JSON.stringify([m[1], m[2], m[3]]));\n            html=html.slice(m[0].length);\n        }\n    }\n    var astify = function() {\n        var token = tokens.shift();\n        if (typeof token.text !== \"undefined\" || token.variable) {\n            return token;\n        } else if (token.condition) {\n            token.then = [];\n            while(tokens.length > 0) {\n                if (tokens[0].close === \"if\") { tokens.shift(); break; }\n                token.then.push(astify());\n            }\n            return token;\n        } else {\n            console.error(\"Error making tooltip AST due to unknown token \" + JSON.stringify(token));\n            return { text: \"\" };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    var ast = [];\n    while (tokens.length > 0) ast.push(astify());\n\n    var resolve = function(variable) {\n        if (!resolve.cache.hasOwnProperty(variable)) {\n            resolve.cache[variable] = (new LocusZoom.Data.Field(variable)).resolve(data);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    var render_node = function(node) {\n        if (typeof node.text !== \"undefined\") {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                var value = resolve(node.variable);\n                if ([\"string\",\"number\",\"boolean\"].indexOf(typeof value) !== -1) { return value; }\n                if (value === null) { return \"\"; }\n            } catch (error) { console.error(\"Error while processing variable \" + JSON.stringify(node.variable)); }\n            return \"{{\" + node.variable + \"}}\";\n        } else if (node.condition) {\n            try {\n                var condition = resolve(node.condition);\n                if (condition || condition === 0) {\n                    return node.then.map(render_node).join(\"\");\n                }\n            } catch (error) { console.error(\"Error while processing condition \" + JSON.stringify(node.variable)); }\n            return \"\";\n        } else { console.error(\"Error rendering tooltip due to unknown AST node \" + JSON.stringify(node)); }\n    };\n    return ast.map(render_node).join(\"\");\n};\n\n/**\n * Shortcut method for getting the data bound to a tool tip.\n * @param {Element} node\n * @returns {*} The first element of data bound to the tooltip\n */\nLocusZoom.getToolTipData = function(node){\n    if (typeof node != \"object\" || typeof node.parentNode == \"undefined\"){\n        throw(\"Invalid node object\");\n    }\n    // If this node is a locuszoom tool tip then return its data\n    var selector = d3.select(node);\n    if (selector.classed(\"lz-data_layer-tooltip\") && typeof selector.data()[0] != \"undefined\"){\n        return selector.data()[0];\n    } else {\n        return LocusZoom.getToolTipData(node.parentNode);\n    }\n};\n\n/**\n * Shortcut method for getting a reference to the data layer that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.getToolTipDataLayer = function(node){\n    var data = LocusZoom.getToolTipData(node);\n    if (data.getDataLayer){ return data.getDataLayer(); }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the panel that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.getToolTipPanel = function(node){\n    var data_layer = LocusZoom.getToolTipDataLayer(node);\n    if (data_layer){ return data_layer.parent; }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the plot that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.getToolTipPlot = function(node){\n    var panel = LocusZoom.getToolTipPanel(node);\n    if (panel){ return panel.parent; }\n    return null;\n};\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nLocusZoom.generateCurtain = function(){\n    var curtain = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: function(content, css){\n            if (!this.curtain.showing){\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-curtain\").attr(\"id\", this.id + \".curtain\");\n                this.curtain.content_selector = this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-content\");\n                this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-dismiss\").html(\"Dismiss\")\n                    .on(\"click\", function(){\n                        this.curtain.hide();\n                    }.bind(this));\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        }.bind(this),\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: function(content, css){\n            if (!this.curtain.showing){ return this.curtain; }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == \"object\"){\n                this.curtain.selector.style(css);\n            }\n            // Update size and position\n            var page_origin = this.getPageOrigin();\n            this.curtain.selector.style({\n                top: page_origin.y + \"px\",\n                left: page_origin.x + \"px\",\n                width: this.layout.width + \"px\",\n                height: this.layout.height + \"px\"\n            });\n            this.curtain.content_selector.style({\n                \"max-width\": (this.layout.width - 40) + \"px\",\n                \"max-height\": (this.layout.height - 40) + \"px\"\n            });\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        }.bind(this),\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.curtain.showing){ return this.curtain; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        }.bind(this)\n    };\n    return curtain;\n};\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nLocusZoom.generateLoader = function(){\n    var loader = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: function(content){\n            // Generate loader\n            if (!this.loader.showing){\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-loader\").attr(\"id\", this.id + \".loader\");\n                this.loader.content_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-content\");\n                this.loader.progress_selector = this.loader.selector\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress-container\")\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress\");\n                /* TODO: figure out how to make this cancel button work\n                this.loader.cancel_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-cancel\").html(\"Cancel\")\n                    .on(\"click\", function(){\n                        this.loader.hide();\n                    }.bind(this));\n                */\n                this.loader.showing = true;\n                if (typeof content == \"undefined\"){ content = \"Loading...\"; }\n            }\n            return this.loader.update(content);\n        }.bind(this),\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: function(content, percent){\n            if (!this.loader.showing){ return this.loader; }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            var padding = 6; // is there a better place to store/define this?\n            var page_origin = this.getPageOrigin();\n            var loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector.style({\n                top: (page_origin.y + this.layout.height - loader_boundrect.height - padding) + \"px\",\n                left: (page_origin.x + padding) + \"px\"\n            });\n            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n            // Apply percent if provided\n            if (typeof percent == \"number\"){\n                this.loader.progress_selector.style({\n                    width: (Math.min(Math.max(percent, 1), 100)) + \"%\"\n                });\n            }\n            return this.loader;\n        }.bind(this),\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: function(){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", true);\n            return this.loader;\n        }.bind(this),\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: function(percent){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", false);\n            return this.loader.update(null, percent);\n        }.bind(this),\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.loader.showing){ return this.loader; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        }.bind(this)\n    };\n    return loader;\n};\n\n/**\n * Create a new subclass following classical inheritance patterns. Some registry singletons use this internally to\n *   enable code reuse and customization of known LZ core functionality.\n *\n * @param {Function} parent A parent class constructor that will be extended by the child class\n * @param {Object} extra An object of additional properties and methods to add/override behavior for the child class.\n *   The special \"constructor\" property can be used to specify a custom constructor, or it will call parent by default.\n *   Implementer must manage super calls when overriding the constructor.\n * @returns {Function} The constructor for the new child class\n */\nLocusZoom.subclass = function(parent, extra) {\n    if (typeof parent !== \"function\" ) {\n        throw \"Parent must be a callable constructor\";\n    }\n\n    extra = extra || {};\n    var Sub = extra.hasOwnProperty(\"constructor\") ? extra.constructor : function() {\n        parent.apply(this, arguments);\n    };\n\n    Sub.prototype = Object.create(parent.prototype);\n    Object.keys(extra).forEach(function(k) {\n        Sub.prototype[k] = extra[k];\n    });\n    return Sub;\n};\n\n\n/**\n * LocusZoom optional extensions will live under this namespace.\n *\n * Extension code is not part of the core LocusZoom app.js bundle.\n * @namespace\n * @public\n */\nLocusZoom.ext = {};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * Manage known layouts for all parts of the LocusZoom plot\n *\n * This registry allows for layouts to be reused and customized many times on a page, using a common base pattern.\n *   It handles the work of ensuring that each new instance of the layout has no shared state with other copies.\n *\n * @class\n */\nLocusZoom.Layouts = (function() {\n    var obj = {};\n    var layouts = {\n        \"plot\": {},\n        \"panel\": {},\n        \"data_layer\": {},\n        \"dashboard\": {},\n        \"tooltip\": {}\n    };\n\n    /**\n     * Generate a layout configuration object\n     * @param {('plot'|'panel'|'data_layer'|'dashboard'|'tooltip')} type The type of layout to retrieve\n     * @param {string} name Identifier of the predefined layout within the specified type\n     * @param {object} [modifications] Custom properties that override default settings for this layout\n     * @returns {object} A JSON-serializable object representation\n     */\n    obj.get = function(type, name, modifications) {\n        if (typeof type != \"string\" || typeof name != \"string\") {\n            throw(\"invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)\");\n        } else if (layouts[type][name]) {\n            // Get the base layout\n            var layout = LocusZoom.Layouts.merge(modifications || {}, layouts[type][name]);\n            // If \"unnamespaced\" is true then strike that from the layout and return the layout without namespacing\n            if (layout.unnamespaced){\n                delete layout.unnamespaced;\n                return JSON.parse(JSON.stringify(layout));\n            }\n            // Determine the default namespace for namespaced values\n            var default_namespace = \"\";\n            if (typeof layout.namespace == \"string\"){\n                default_namespace = layout.namespace;\n            } else if (typeof layout.namespace == \"object\" && Object.keys(layout.namespace).length){\n                if (typeof layout.namespace.default != \"undefined\"){\n                    default_namespace = layout.namespace.default;\n                } else {\n                    default_namespace = layout.namespace[Object.keys(layout.namespace)[0]].toString();\n                }\n            }\n            default_namespace += default_namespace.length ? \":\" : \"\";\n            // Apply namespaces to layout, recursively\n            var applyNamespaces = function(element, namespace){\n                if (namespace){\n                    if (typeof namespace == \"string\"){\n                        namespace = { default: namespace }; \n                    }\n                } else {\n                    namespace = { default: \"\" };\n                }\n                if (typeof element == \"string\"){\n                    var re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n                    var match, base, key, resolved_namespace;\n                    var replace = [];\n                    while ((match = re.exec(element)) !== null){\n                        base = match[0];\n                        key  = match[1].length ? match[1].replace(/(\\[|\\])/g,\"\") : null;\n                        resolved_namespace = default_namespace;\n                        if (namespace != null && typeof namespace == \"object\" && typeof namespace[key] != \"undefined\"){\n                            resolved_namespace = namespace[key] + (namespace[key].length ? \":\" : \"\");\n                        }\n                        replace.push({ base: base, namespace: resolved_namespace });\n                    }\n                    for (var r in replace){\n                        element = element.replace(replace[r].base, replace[r].namespace);\n                    }\n                } else if (typeof element == \"object\" && element != null){\n                    if (typeof element.namespace != \"undefined\"){\n                        var merge_namespace = (typeof element.namespace == \"string\") ? { default: element.namespace } : element.namespace;\n                        namespace = LocusZoom.Layouts.merge(namespace, merge_namespace);\n                    }\n                    var namespaced_element, namespaced_property;\n                    for (var property in element) {\n                        if (property === \"namespace\"){ continue; }\n                        namespaced_element = applyNamespaces(element[property], namespace);\n                        namespaced_property = applyNamespaces(property, namespace);\n                        if (property !== namespaced_property){\n                            delete element[property];\n                        }\n                        element[namespaced_property] = namespaced_element;\n                    }\n                }\n                return element;\n            };\n            layout = applyNamespaces(layout, layout.namespace);\n            // Return the layout as valid JSON only\n            return JSON.parse(JSON.stringify(layout));\n        } else {\n            throw(\"layout type [\" + type + \"] name [\" + name + \"] not found\");\n        }\n    };\n\n    /** @private */\n    obj.set = function(type, name, layout) {\n        if (typeof type != \"string\" || typeof name != \"string\" || typeof layout != \"object\"){\n            throw (\"unable to set new layout; bad arguments passed to set()\");\n        }\n        if (!layouts[type]){\n            layouts[type] = {};\n        }\n        if (layout){\n            return (layouts[type][name] = JSON.parse(JSON.stringify(layout)));\n        } else {\n            delete layouts[type][name];\n            return null;\n        }\n    };\n\n    /**\n     * Register a new layout definition by name.\n     *\n     * @param {string} type The type of layout to add. Usually, this will be one of the predefined LocusZoom types,\n     *   but if you pass a different name, this method will automatically create the new `type` bucket\n     * @param {string} name The identifier of the newly added layout\n     * @param {object} [layout] A JSON-serializable object containing configuration properties for this layout\n     * @returns The JSON representation of the newly created layout\n     */\n    obj.add = function(type, name, layout) {\n        return obj.set(type, name, layout);\n    };\n\n    /**\n     * List all registered layouts\n     * @param [type] Optionally narrow the list to only layouts of a specific type; else return all known layouts\n     * @returns {*}\n     */\n    obj.list = function(type) {\n        if (!layouts[type]){\n            var list = {};\n            Object.keys(layouts).forEach(function(type){\n                list[type] =  Object.keys(layouts[type]);\n            });\n            return list;\n        } else {\n            return Object.keys(layouts[type]);\n        }\n    };\n\n    /**\n     * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n     *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n     *\n     * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n     *\n     * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n     * @param {object} default_layout An object containing default settings.\n     * @returns The custom layout is modified in place and also returned from this method.\n     */\n    obj.merge = function (custom_layout, default_layout) {\n        if (typeof custom_layout !== \"object\" || typeof default_layout !== \"object\"){\n            throw(\"LocusZoom.Layouts.merge only accepts two layout objects; \" + (typeof custom_layout) + \", \" + (typeof default_layout) + \" given\");\n        }\n        for (var property in default_layout) {\n            if (!default_layout.hasOwnProperty(property)){ continue; }\n            // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n            // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n            // Also separate arrays from objects as a discrete type.\n            var custom_type  = custom_layout[property] === null ? \"undefined\" : typeof custom_layout[property];\n            var default_type = typeof default_layout[property];\n            if (custom_type === \"object\" && Array.isArray(custom_layout[property])){ custom_type = \"array\"; }\n            if (default_type === \"object\" && Array.isArray(default_layout[property])){ default_type = \"array\"; }\n            // Unsupported property types: throw an exception\n            if (custom_type === \"function\" || default_type === \"function\"){\n                throw(\"LocusZoom.Layouts.merge encountered an unsupported property type\");\n            }\n            // Undefined custom value: pull the default value\n            if (custom_type === \"undefined\"){\n                custom_layout[property] = JSON.parse(JSON.stringify(default_layout[property]));\n                continue;\n            }\n            // Both values are objects: merge recursively\n            if (custom_type === \"object\" && default_type === \"object\"){\n                custom_layout[property] = LocusZoom.Layouts.merge(custom_layout[property], default_layout[property]);\n                continue;\n            }\n        }\n        return custom_layout;\n    };\n\n    return obj;\n})();\n\n\n/**\n * Tooltip Layouts\n * @namespace LocusZoom.Layouts.tooltips\n */\n\n// TODO: Improve documentation of predefined types within layout namespaces\nLocusZoom.Layouts.add(\"tooltip\", \"standard_association\", {\n    namespace: { \"assoc\": \"assoc\" },\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<strong>{{{{namespace[assoc]}}variant}}</strong><br>\"\n        + \"P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation}}</strong><br>\"\n        + \"Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele}}</strong><br>\"\n        + \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipDataLayer(this).makeLDReference(LocusZoom.getToolTipData(this));\\\">Make LD Reference</a><br>\"\n});\n\nvar covariates_model_association = LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true });\ncovariates_model_association.html += \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\\\">Condition on Variant</a><br>\";\nLocusZoom.Layouts.add(\"tooltip\", \"covariates_model_association\", covariates_model_association);\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_genes\", {\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<h4><strong><i>{{gene_name}}</i></strong></h4>\"\n        + \"<div style=\\\"float: left;\\\">Gene ID: <strong>{{gene_id}}</strong></div>\"\n        + \"<div style=\\\"float: right;\\\">Transcript ID: <strong>{{transcript_id}}</strong></div>\"\n        + \"<div style=\\\"clear: both;\\\"></div>\"\n        + \"<table>\"\n        + \"<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>\"\n        + \"<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{n_syn}}</td><td>z = {{syn_z}}</td></tr>\"\n        + \"<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{n_mis}}</td><td>z = {{mis_z}}</td></tr>\"\n        + \"<tr><td>LoF</td><td>{{exp_lof}}</td><td>{{n_lof}}</td><td>pLI = {{pLI}}</td></tr>\"\n        + \"</table>\"\n        + \"<a href=\\\"http://exac.broadinstitute.org/gene/{{gene_id}}\\\" target=\\\"_new\\\">More data on ExAC</a>\"\n});\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    closable: false,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"{{{{namespace[intervals]}}state_name}}<br>{{{{namespace[intervals]}}start}}-{{{{namespace[intervals]}}end}}\"\n});\n\n/**\n * Data Layer Layouts: represent specific information from a data source\n * @namespace Layouts.data_layer\n*/\n\nLocusZoom.Layouts.add(\"data_layer\", \"significance\", {\n    id: \"significance\",\n    type: \"orthogonal_line\",\n    orientation: \"horizontal\",\n    offset: 4.522\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"recomb_rate\", {\n    namespace: { \"recomb\": \"recomb\" },\n    id: \"recombrate\",\n    type: \"line\",\n    fields: [\"{{namespace[recomb]}}position\", \"{{namespace[recomb]}}recomb_rate\"],\n    z_index: 1,\n    style: {\n        \"stroke\": \"#0000FF\",\n        \"stroke-width\": \"1.5px\"\n    },\n    x_axis: {\n        field: \"{{namespace[recomb]}}position\"\n    },\n    y_axis: {\n        axis: 2,\n        field: \"{{namespace[recomb]}}recomb_rate\",\n        floor: 0,\n        ceiling: 100\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"association_pvalues\", {\n    namespace: { \"assoc\": \"assoc\", \"ld\": \"ld\" },\n    id: \"associationpvalues\",\n    type: \"scatter\",\n    point_shape: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: \"diamond\",\n            else: \"circle\"\n        }\n    },\n    point_size: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40\n        }\n    },\n    color: [\n        {\n            scale_function: \"if\",\n            field: \"{{namespace[ld]}}isrefvar\",\n            parameters: {\n                field_value: 1,\n                then: \"#9632b8\"\n            }\n        },\n        {\n            scale_function: \"numerical_bin\",\n            field: \"{{namespace[ld]}}state\",\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                values: [\"#357ebd\",\"#46b8da\",\"#5cb85c\",\"#eea236\",\"#d43f3a\"]\n            }\n        },\n        \"#B8B8B8\"\n    ],\n    legend: [\n        { shape: \"diamond\", color: \"#9632b8\", size: 40, label: \"LD Ref Var\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#d43f3a\", size: 40, label: \"1.0 > r² ≥ 0.8\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#eea236\", size: 40, label: \"0.8 > r² ≥ 0.6\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#5cb85c\", size: 40, label: \"0.6 > r² ≥ 0.4\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#46b8da\", size: 40, label: \"0.4 > r² ≥ 0.2\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#357ebd\", size: 40, label: \"0.2 > r² ≥ 0.0\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#B8B8B8\", size: 40, label: \"no r² data\", class: \"lz-data_layer-scatter\" }\n    ],\n    fields: [\"{{namespace[assoc]}}variant\", \"{{namespace[assoc]}}position\", \"{{namespace[assoc]}}log_pvalue\", \"{{namespace[assoc]}}log_pvalue|logtoscinotation\", \"{{namespace[assoc]}}ref_allele\", \"{{namespace[ld]}}state\", \"{{namespace[ld]}}isrefvar\"],\n    id_field: \"{{namespace[assoc]}}variant\",\n    z_index: 2,\n    x_axis: {\n        field: \"{{namespace[assoc]}}position\"\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[assoc]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [ 0, 10 ]\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"phewas_pvalues\", {\n    namespace: {\"phewas\": \"phewas\"},\n    id: \"phewaspvalues\",\n    type: \"category_scatter\",\n    point_shape: \"circle\",\n    point_size: 70,\n    tooltip_positioning: \"vertical\",\n    id_field: \"{{namespace[phewas]}}id\",\n    fields: [\"{{namespace[phewas]}}id\", \"{{namespace[phewas]}}log_pvalue\", \"{{namespace[phewas]}}trait_group\", \"{{namespace[phewas]}}trait_label\"],\n    x_axis: {\n        field: \"{{namespace[phewas]}}x\",  // Synthetic/derived field added by `category_scatter` layer\n        category_field: \"{{namespace[phewas]}}trait_group\",\n        lower_buffer: 0.025,\n        upper_buffer: 0.025\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[phewas]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.15\n    },\n    color: {\n        field: \"{{namespace[phewas]}}trait_group\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: [\"highlighted\", \"selected\"] },\n        hide: { and: [\"unhighlighted\", \"unselected\"] },\n        html: [\n            \"<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>\",\n            \"<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>\",\n            \"<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>\"\n        ].join(\"\")\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    label: {\n        text: \"{{{{namespace[phewas]}}trait_label}}\",\n        spacing: 6,\n        lines: {\n            style: {\n                \"stroke-width\": \"2px\",\n                \"stroke\": \"#333333\",\n                \"stroke-dasharray\": \"2px 2px\"\n            }\n        },\n        filters: [\n            {\n                field: \"{{namespace[phewas]}}log_pvalue\",\n                operator: \">=\",\n                value: 20\n            }\n        ],\n        style: {\n            \"font-size\": \"14px\",\n            \"font-weight\": \"bold\",\n            \"fill\": \"#333333\"\n        }\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genes\", {\n    namespace: { \"gene\": \"gene\", \"constraint\": \"constraint\" },\n    id: \"genes\",\n    type: \"genes\",\n    fields: [\"{{namespace[gene]}}all\", \"{{namespace[constraint]}}all\"],\n    id_field: \"gene_id\",\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_genes\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genome_legend\", {\n    namespace: { \"genome\": \"genome\" },\n    id: \"genome_legend\",\n    type: \"genome_legend\",\n    fields: [\"{{namespace[genome]}}chr\", \"{{namespace[genome]}}base_pairs\"],\n    x_axis: {\n        floor: 0,\n        ceiling: 2881033286\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    id: \"intervals\",\n    type: \"intervals\",\n    fields: [\"{{namespace[intervals]}}start\",\"{{namespace[intervals]}}end\",\"{{namespace[intervals]}}state_id\",\"{{namespace[intervals]}}state_name\"],\n    id_field: \"{{namespace[intervals]}}start\",\n    start_field: \"{{namespace[intervals]}}start\",\n    end_field: \"{{namespace[intervals]}}end\",\n    track_split_field: \"{{namespace[intervals]}}state_id\",\n    split_tracks: true,\n    always_hide_legend: false,\n    color: {\n        field: \"{{namespace[intervals]}}state_id\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [1,2,3,4,5,6,7,8,9,10,11,12,13],\n            values: [\"rgb(212,63,58)\", \"rgb(250,120,105)\", \"rgb(252,168,139)\", \"rgb(240,189,66)\", \"rgb(250,224,105)\", \"rgb(240,238,84)\", \"rgb(244,252,23)\", \"rgb(23,232,252)\", \"rgb(32,191,17)\", \"rgb(23,166,77)\", \"rgb(32,191,17)\", \"rgb(162,133,166)\", \"rgb(212,212,212)\"],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    legend: [\n        { shape: \"rect\", color: \"rgb(212,63,58)\", width: 9, label: \"Active Promoter\", \"{{namespace[intervals]}}state_id\": 1 },\n        { shape: \"rect\", color: \"rgb(250,120,105)\", width: 9, label: \"Weak Promoter\", \"{{namespace[intervals]}}state_id\": 2 },\n        { shape: \"rect\", color: \"rgb(252,168,139)\", width: 9, label: \"Poised Promoter\", \"{{namespace[intervals]}}state_id\": 3 },\n        { shape: \"rect\", color: \"rgb(240,189,66)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 4 },\n        { shape: \"rect\", color: \"rgb(250,224,105)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 5 },\n        { shape: \"rect\", color: \"rgb(240,238,84)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 6 },\n        { shape: \"rect\", color: \"rgb(244,252,23)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 7 },\n        { shape: \"rect\", color: \"rgb(23,232,252)\", width: 9, label: \"Insulator\", \"{{namespace[intervals]}}state_id\": 8 },\n        { shape: \"rect\", color: \"rgb(32,191,17)\", width: 9, label: \"Transcriptional transition\", \"{{namespace[intervals]}}state_id\": 9 },\n        { shape: \"rect\", color: \"rgb(23,166,77)\", width: 9, label: \"Transcriptional elongation\", \"{{namespace[intervals]}}state_id\": 10 },\n        { shape: \"rect\", color: \"rgb(136,240,129)\", width: 9, label: \"Weak transcribed\", \"{{namespace[intervals]}}state_id\": 11 },\n        { shape: \"rect\", color: \"rgb(162,133,166)\", width: 9, label: \"Polycomb-repressed\", \"{{namespace[intervals]}}state_id\": 12 },\n        { shape: \"rect\", color: \"rgb(212,212,212)\", width: 9, label: \"Heterochromatin / low signal\", \"{{namespace[intervals]}}state_id\": 13 }\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_intervals\", { unnamespaced: true })\n});\n\n/**\n * Dashboard Layouts: toolbar buttons etc\n  * @namespace Layouts.dashboard\n */\nLocusZoom.Layouts.add(\"dashboard\", \"standard_panel\", {\n    components: [\n        {\n            type: \"remove_panel\",\n            position: \"right\",\n            color: \"red\",\n            group_position: \"end\"\n        },\n        {\n            type: \"move_panel_up\",\n            position: \"right\",\n            group_position: \"middle\"\n        },\n        {\n            type: \"move_panel_down\",\n            position: \"right\",\n            group_position: \"start\",\n            style: { \"margin-left\": \"0.75em\" }\n        }\n    ]\n});                 \n\nLocusZoom.Layouts.add(\"dashboard\", \"standard_plot\", {\n    components: [\n        {\n            type: \"title\",\n            title: \"LocusZoom\",\n            subtitle: \"<a href=\\\"https://statgen.github.io/locuszoom/\\\" target=\\\"_blank\\\">v\" + LocusZoom.version + \"</a>\",\n            position: \"left\"\n        },\n        {\n            type: \"dimensions\",\n            position: \"right\"\n        },\n        {\n            type: \"region_scale\",\n            position: \"right\"\n        },\n        {\n            type: \"download\",\n            position: \"right\"\n        }\n    ]\n});\n\nvar covariates_model_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\ncovariates_model_plot_dashboard.components.push({\n    type: \"covariates_model\",\n    button_html: \"Model\",\n    button_title: \"Show and edit covariates currently in model\",\n    position: \"left\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"covariates_model_plot\", covariates_model_plot_dashboard);\n\nvar region_nav_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 500000,\n    button_html: \">>\",\n    position: \"right\",\n    group_position: \"end\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 50000,\n    button_html: \">\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: 0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: -0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -50000,\n    button_html: \"<\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -500000,\n    button_html: \"<<\",\n    position: \"right\",\n    group_position: \"start\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"region_nav_plot\", region_nav_plot_dashboard);\n\n/**\n * Panel Layouts\n * @namespace Layouts.panel\n */\n\nLocusZoom.Layouts.add(\"panel\", \"association\", {\n    id: \"association\",\n    width: 800,\n    height: 225,\n    min_width:  400,\n    min_height: 200,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_legend\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {\n        x: {\n            label: \"Chromosome {{chr}} (Mb)\",\n            label_offset: 32,\n            tick_format: \"region\",\n            extent: \"state\"\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        },\n        y2: {\n            label: \"Recombination Rate (cM/Mb)\",\n            label_offset: 40\n        }\n    },\n    legend: {\n        orientation: \"vertical\",\n        origin: { x: 55, y: 40 },\n        hidden: true\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"recomb_rate\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"association_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genes\", {\n    id: \"genes\",\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 112.5,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"resize_to_data\",\n            position: \"right\"\n        });\n        return l;\n    })(),   \n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genes\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"phewas\", {\n    id: \"phewas\",\n    width: 800,\n    height: 300,\n    min_width:  800,\n    min_height: 300,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    \"font-weight\": \"bold\",\n                    \"font-size\": \"11px\",\n                    \"text-anchor\": \"start\"\n                },\n                transform: \"rotate(50)\",\n                position: \"left\"  // Special param recognized by `category_scatter` layers\n            }\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"phewas_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genome_legend\", {\n    id: \"genome_legend\",\n    width: 800,\n    height: 50,\n    origin: { x: 0, y: 300 },\n    min_width:  800,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 0, right: 50, bottom: 35, left: 50 },\n    axes: {\n        x: {\n            label: \"Genomic Position (number denotes chromosome)\",\n            label_offset: 35,\n            ticks: [\n                {\n                    x: 124625310,\n                    text: \"1\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 370850307,\n                    text: \"2\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 591461209,\n                    text: \"3\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 786049562,\n                    text: \"4\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 972084330,\n                    text: \"5\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1148099493,\n                    text: \"6\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1313226358,\n                    text: \"7\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1465977701,\n                    text: \"8\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1609766427,\n                    text: \"9\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1748140516,\n                    text: \"10\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1883411148,\n                    text: \"11\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2017840353,\n                    text: \"12\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2142351240,\n                    text: \"13\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2253610949,\n                    text: \"14\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2358551415,\n                    text: \"15\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2454994487,\n                    text: \"16\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2540769469,\n                    text: \"17\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2620405698,\n                    text: \"18\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2689008813,\n                    text: \"19\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2750086065,\n                    text: \"20\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2805663772,\n                    text: \"21\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2855381003,\n                    text: \"22\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                }\n            ]\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genome_legend\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"intervals\", {\n    id: \"intervals\",\n    width: 1000,\n    height: 50,\n    min_width: 500,\n    min_height: 50,\n    margin: { top: 25, right: 150, bottom: 5, left: 50 },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_split_tracks\",\n            data_layer_id: \"intervals\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    legend: {\n        hidden: true,\n        orientation: \"horizontal\",\n        origin: { x: 50, y: 0 },\n        pad_from_bottom: 5\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"intervals\", { unnamespaced: true })\n    ]\n});\n\n\n/**\n * Plot Layouts\n * @namespace Layouts.plot\n */\n\nLocusZoom.Layouts.add(\"plot\", \"standard_association\", {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, proportional_height: 0.5 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, proportional_height: 0.5 })\n    ]\n});\n\n// Shortcut to \"StandardLayout\" for backward compatibility\nLocusZoom.StandardLayout = LocusZoom.Layouts.get(\"plot\", \"standard_association\");\n\nLocusZoom.Layouts.add(\"plot\", \"standard_phewas\", {\n    width: 800,\n    height: 600,\n    min_width: 800,\n    min_height: 600,\n    responsive_resize: true,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true } ),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"phewas\", { unnamespaced: true, proportional_height: 0.45 }),\n        LocusZoom.Layouts.get(\"panel\", \"genome_legend\", { unnamespaced: true, proportional_height: 0.1 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", {\n            unnamespaced: true, proportional_height: 0.45,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: \"Chromosome {{chr}} (Mb)\",\n                    label_offset: 32,\n                    tick_format: \"region\",\n                    extent: \"state\"\n                }\n            }\n        })\n    ],\n    mouse_guide: false\n});\n\nLocusZoom.Layouts.add(\"plot\", \"interval_association\", {\n    state: {},\n    width: 800,\n    height: 550,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, width: 800, proportional_height: (225/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"intervals\", { unnamespaced: true, proportional_height: (120/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, width: 800, proportional_height: (225/570) })\n    ]\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @class\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n*/\nLocusZoom.DataLayer = function(layout, parent) {\n    /** @member {Boolean} */\n    this.initialized = false;\n    /** @member {Number} */\n    this.layout_idx = null;\n\n    /** @member {String} */\n    this.id     = null;\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent || null;\n    /**\n     * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n     */\n    this.svg    = {};\n\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    if (typeof parent != \"undefined\" && parent instanceof LocusZoom.Panel){ this.parent_plot = parent.parent; }\n\n    /** @member {Object} */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.DataLayer.DefaultLayout);\n    if (this.layout.id){ this.id = this.layout.id; }\n\n    // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n    if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== \"number\"){ this.layout.x_axis.axis = 1; }\n    if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== \"number\"){ this.layout.y_axis.axis = 1; }\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n    /** @member {Object} */\n    this.state = {};\n    /** @member {String} */\n    this.state_id = null;\n\n    this.setDefaultState();\n\n    // Initialize parameters for storing data and tool tips\n    /** @member {Array} */\n    this.data = [];\n    if (this.layout.tooltip){\n        /** @member {Object} */\n        this.tooltips = {};\n    }\n\n    // Initialize flags for tracking global statuses\n    this.global_statuses = {\n        \"highlighted\": false,\n        \"selected\": false,\n        \"faded\": false,\n        \"hidden\": false\n    };\n    \n    return this;\n\n};\n\n/**\n * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n *\n * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn\n *\n *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n * @param fieldName\n * @param namespace\n * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n * @returns {String} The raw string added to the fields array\n */\nLocusZoom.DataLayer.prototype.addField = function(fieldName, namespace, transformations) {\n    if (!fieldName || !namespace) {\n        throw \"Must specify field name and namespace to use when adding field\";\n    }\n    var fieldString = namespace + \":\" + fieldName;\n    if (transformations) {\n        fieldString += \"|\";\n        if (typeof transformations === \"string\") {\n            fieldString += transformations;\n        } else if (Array.isArray(transformations)) {\n            fieldString += transformations.join(\"|\");\n        } else {\n            throw \"Must provide transformations as either a string or array of strings\";\n        }\n    }\n    var fields = this.layout.fields;\n    if (fields.indexOf(fieldString) === -1) {\n        fields.push(fieldString);\n    }\n    return fieldString;\n};\n\n/**\n * Define default state that should get tracked during the lifetime of this layer.\n *\n * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n */\nLocusZoom.DataLayer.prototype.setDefaultState = function() {\n    // Define state parameters specific to this data layer. Within plot state, this will live under a key\n    //  `panel_name.layer_name`.\n    if (this.parent){\n        this.state = this.parent.state;\n        this.state_id = this.parent.id + \".\" + this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n        LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n            this.state[this.state_id][status] = this.state[this.state_id][status] || [];\n        }.bind(this));\n    }\n};\n\n/**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nLocusZoom.DataLayer.DefaultLayout = {\n    type: \"\",\n    fields: [],\n    x_axis: {},\n    y_axis: {}\n};\n\n/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb/antiverb and an adjective. Verbs and antiverbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[], menu_antiverbs: String[]}}\n */\nLocusZoom.DataLayer.Statuses = {\n    verbs: [\"highlight\", \"select\", \"fade\", \"hide\"],\n    adjectives: [\"highlighted\", \"selected\", \"faded\", \"hidden\"],\n    menu_antiverbs: [\"unhighlight\", \"deselect\", \"unfade\", \"show\"]\n};\n\n/**\n * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n *\n * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n */\nLocusZoom.DataLayer.prototype.getBaseId = function(){\n    return this.parent_plot.id + \".\" + this.parent.id + \".\" + this.id;\n};\n\n/**\n * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n *\n * May be used by operations that resize the data layer to fit available data\n *\n * @public\n * @returns {number}\n */\nLocusZoom.DataLayer.prototype.getAbsoluteDataHeight = function(){\n    var dataBCR = this.svg.group.node().getBoundingClientRect();\n    return dataBCR.height;\n};\n\n/**\n * Whether transitions can be applied to this data layer\n * @returns {boolean}\n */\nLocusZoom.DataLayer.prototype.canTransition = function(){\n    if (!this.layout.transition){ return false; }\n    return !(this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.panel_id);\n};\n\n/**\n * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n * @param {String|Object} element\n * @returns {String}\n */\nLocusZoom.DataLayer.prototype.getElementId = function(element){\n    var element_id = \"element\";\n    if (typeof element == \"string\"){\n        element_id = element;\n    } else if (typeof element == \"object\"){\n        var id_field = this.layout.id_field || \"id\";\n        if (typeof element[id_field] == \"undefined\"){\n            throw(\"Unable to generate element ID\");\n        }\n        element_id = element[id_field].toString().replace(/\\W/g,\"\");\n    }\n    return (this.getBaseId() + \"-\" + element_id).replace(/(:|\\.|\\[|\\]|,)/g, \"_\");\n};\n\n/**\n * Fetch an ID that may bind a data element to a separate visual node for displaying status\n * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n * even a common/shared node to show status across many elements in a set.\n * Abstract method. It should be overridden by data layers that implement seperate status\n * nodes specifically to the use case of the data layer type.\n * @param {String|Object} element\n * @returns {String|null}\n */\nLocusZoom.DataLayer.prototype.getElementStatusNodeId = function(element){\n    return null;\n};\n\n/**\n * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n *   referenced by the unique identifier for the element\n\n * @param {String} id The unique identifier for the element, as defined by `getElementId`\n * @returns {Object|null} The data bound to that element\n */\nLocusZoom.DataLayer.prototype.getElementById = function(id){\n    var selector = d3.select(\"#\" + id.replace(/(:|\\.|\\[|\\]|,)/g, \"\\\\$1\"));\n    if (!selector.empty() && selector.data() && selector.data().length){\n        return selector.data()[0];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Basic method to apply arbitrary methods and properties to data elements.\n *   This is called on all data immediately after being fetched.\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyDataMethods = function(){\n    this.data.forEach(function(d, i){\n        // Basic toHTML() method - return the stringified value in the id_field, if defined.\n        this.data[i].toHTML = function(){\n            var id_field = this.layout.id_field || \"id\";\n            var html = \"\";\n            if (this.data[i][id_field]){ html = this.data[i][id_field].toString(); }\n            return html;\n        }.bind(this);\n        // getDataLayer() method - return a reference to the data layer\n        this.data[i].getDataLayer = function(){\n            return this;\n        }.bind(this);\n        // deselect() method - shortcut method to deselect the element\n        this.data[i].deselect = function(){\n            var data_layer = this.getDataLayer();\n            data_layer.unselectElement(this);\n        };\n    }.bind(this));\n    this.applyCustomDataMethods();\n    return this;\n};\n\n/**\n * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyCustomDataMethods = function(){\n    return this;\n};\n\n/**\n * Initialize a data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.initialize = function(){\n\n    // Append a container group element to house the main data layer group element and the clip path\n    this.svg.container = this.parent.svg.group.append(\"g\")\n        .attr(\"class\", \"lz-data_layer-container\")\n        .attr(\"id\", this.getBaseId() + \".data_layer_container\");\n        \n    // Append clip path to the container element\n    this.svg.clipRect = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\")\n        .append(\"rect\");\n    \n    // Append svg group for rendering all data layer elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".data_layer\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    return this;\n\n};\n\n/**\n * Move a data layer up relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveUp = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Move a data layer down relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveDown = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Apply scaling functions to an element or parameter as needed, based on its layout and the element's data\n * If the layout parameter is already a primitive type, simply return the value as given\n * @param {Array|Number|String|Object} layout\n * @param {*} data The value to be used with the filter\n * @returns {*} The transformed value\n */\nLocusZoom.DataLayer.prototype.resolveScalableParameter = function(layout, data){\n    var ret = null;\n    if (Array.isArray(layout)){\n        var idx = 0;\n        while (ret === null && idx < layout.length){\n            ret = this.resolveScalableParameter(layout[idx], data);\n            idx++;\n        }\n    } else {\n        switch (typeof layout){\n        case \"number\":\n        case \"string\":\n            ret = layout;\n            break;\n        case \"object\":\n            if (layout.scale_function){\n                if(layout.field) {\n                    var f = new LocusZoom.Data.Field(layout.field);\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, f.resolve(data));\n                } else {\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, data);\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n};\n\n/**\n * Generate dimension extent function based on layout parameters\n * @param {('x'|'y')} dimension\n */\nLocusZoom.DataLayer.prototype.getAxisExtent = function(dimension){\n\n    if ([\"x\", \"y\"].indexOf(dimension) === -1){\n        throw(\"Invalid dimension identifier passed to LocusZoom.DataLayer.getAxisExtent()\");\n    }\n\n    var axis_name = dimension + \"_axis\";\n    var axis_layout = this.layout[axis_name];\n\n    // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n    if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)){\n        return [+axis_layout.floor, +axis_layout.ceiling];\n    }\n\n    // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n    var data_extent = [];\n    if (axis_layout.field && this.data) {\n        if (!this.data.length) {\n            // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n            //  because we don't need padding around an empty screen)\n            data_extent = axis_layout.min_extent || [];\n            return data_extent;\n        } else {\n            data_extent = d3.extent(this.data, function (d) {\n                var f = new LocusZoom.Data.Field(axis_layout.field);\n                return +f.resolve(d);\n            });\n\n            // Apply upper/lower buffers, if applicable\n            var original_extent_span = data_extent[1] - data_extent[0];\n            if (!isNaN(axis_layout.lower_buffer)) {\n                data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n            }\n            if (!isNaN(axis_layout.upper_buffer)) {\n                data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n            }\n\n            if (typeof axis_layout.min_extent == \"object\") {\n                // The data should span at least the range specified by min_extent, an array with [low, high]\n                var range_min = axis_layout.min_extent[0];\n                var range_max = axis_layout.min_extent[1];\n                if (!isNaN(range_min) && !isNaN(range_max)) {\n                    data_extent[0] = Math.min(data_extent[0], range_min);\n                }\n                if (!isNaN(range_max)) {\n                    data_extent[1] = Math.max(data_extent[1], range_max);\n                }\n            }\n            // If specified, floor and ceiling will override the actual data range\n            return [\n                isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling\n            ];\n        }\n    }\n\n    // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n    // then default to using the state-defined region as the extent\n    if (dimension === \"x\" && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n        return [this.state.start, this.state.end];\n    }\n\n    // No conditions met for generating a valid extent, return an empty array\n    return [];\n\n};\n\n/**\n * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n *\n *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n *\n * @param {('x'|'y')} dimension\n * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n *   and meanings of these parameters may vary between different data layers.\n * @returns {Object[]}\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.DataLayer.prototype.getTicks = function (dimension, config) {\n    if ([\"x\", \"y\"].indexOf(dimension) === -1) {\n        throw(\"Invalid dimension identifier\");\n    }\n    return [];\n};\n\n/**\n * Generate a tool tip for a given element\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.createTooltip = function(d, id){\n    if (typeof this.layout.tooltip != \"object\"){\n        throw (\"DataLayer [\" + this.id + \"] layout does not define a tooltip\");\n    }\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    if (this.tooltips[id]){\n        this.positionTooltip(id);\n        return;\n    }\n    this.tooltips[id] = {\n        data: d,\n        arrow: null,\n        selector: d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n            .attr(\"class\", \"lz-data_layer-tooltip\")\n            .attr(\"id\", id + \"-tooltip\")\n    };\n    this.updateTooltip(d);\n    return this;\n};\n\n/**\n * Update a tool tip (generate its inner HTML)\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.updateTooltip = function(d, id){\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    // Empty the tooltip of all HTML (including its arrow!)\n    this.tooltips[id].selector.html(\"\");\n    this.tooltips[id].arrow = null;\n    // Set the new HTML\n    if (this.layout.tooltip.html){\n        this.tooltips[id].selector.html(LocusZoom.parseFields(d, this.layout.tooltip.html));\n    }\n    // If the layout allows tool tips on this data layer to be closable then add the close button\n    // and add padding to the tooltip to accommodate it\n    if (this.layout.tooltip.closable){\n        this.tooltips[id].selector.insert(\"button\", \":first-child\")\n            .attr(\"class\", \"lz-tooltip-close-button\")\n            .attr(\"title\", \"Close\")\n            .text(\"×\")\n            .on(\"click\", function(){\n                this.destroyTooltip(id);\n            }.bind(this));\n    }\n    // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n    this.tooltips[id].selector.data([d]);\n    // Reposition and draw a new arrow\n    this.positionTooltip(id);\n    return this;\n};\n\n/**\n * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyTooltip = function(d, id){\n    if (typeof d == \"string\"){\n        id = d;\n    } else if (typeof id == \"undefined\"){\n        id = this.getElementId(d);\n    }\n    if (this.tooltips[id]){\n        if (typeof this.tooltips[id].selector == \"object\"){\n            this.tooltips[id].selector.remove();\n        }\n        delete this.tooltips[id];\n    }\n    return this;\n};\n\n/**\n * Loop through and destroy all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.destroyTooltip(id);\n    }\n    return this;\n};\n\n//\n/**\n * Position tool tip - naïve function to place a tool tip to the lower right of the current mouse element\n *   Most data layers reimplement this method to position tool tips specifically for the data they display\n * @param {String} id The identifier of the tooltip to position\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionTooltip = function(id){\n    if (typeof id != \"string\"){\n        throw (\"Unable to position tooltip: id is not a string\");\n    }\n    // Position the div itself\n    this.tooltips[id].selector\n        .style(\"left\", (d3.event.pageX) + \"px\")\n        .style(\"top\", (d3.event.pageY) + \"px\");\n    // Create / update position on arrow connecting tooltip to data\n    if (!this.tooltips[id].arrow){\n        this.tooltips[id].arrow = this.tooltips[id].selector.append(\"div\")\n            .style(\"position\", \"absolute\")\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_top_left\");\n    }\n    this.tooltips[id].arrow\n        .style(\"left\", \"-1px\")\n        .style(\"top\", \"-1px\");\n    return this;\n};\n\n/**\n * Loop through and position all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.positionTooltip(id);\n    }\n    return this;\n};\n\n/**\n * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n * @param {String|Object} element The element associated with the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.showOrHideTooltip = function(element){\n    \n    if (typeof this.layout.tooltip != \"object\"){ return; }\n    var id = this.getElementId(element);\n\n    var resolveStatus = function(statuses, directive, operator){\n        var status = null;\n        if (typeof statuses != \"object\" || statuses === null){ return null; }\n        if (Array.isArray(directive)){\n            if (typeof operator == \"undefined\"){ operator = \"and\"; }\n            if (directive.length === 1){\n                status = statuses[directive[0]];\n            } else {\n                status = directive.reduce(function(previousValue, currentValue) {\n                    if (operator === \"and\"){\n                        return statuses[previousValue] && statuses[currentValue];\n                    } else if (operator === \"or\"){\n                        return statuses[previousValue] || statuses[currentValue];\n                    }\n                    return null;\n                });\n            }\n        } else if (typeof directive == \"object\"){\n            var sub_status;\n            for (var sub_operator in directive){\n                sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                if (status === null){\n                    status = sub_status;\n                } else if (operator === \"and\"){\n                    status = status && sub_status;\n                } else if (operator === \"or\"){\n                    status = status || sub_status;\n                }\n            }\n        }\n        return status;\n    };\n\n    var show_directive = {};\n    if (typeof this.layout.tooltip.show == \"string\"){\n        show_directive = { and: [ this.layout.tooltip.show ] };\n    } else if (typeof this.layout.tooltip.show == \"object\"){\n        show_directive = this.layout.tooltip.show;\n    }\n\n    var hide_directive = {};\n    if (typeof this.layout.tooltip.hide == \"string\"){\n        hide_directive = { and: [ this.layout.tooltip.hide ] };\n    } else if (typeof this.layout.tooltip.hide == \"object\"){\n        hide_directive = this.layout.tooltip.hide;\n    }\n\n    var statuses = {};\n    LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n        var antistatus = \"un\" + status;\n        statuses[status] = this.state[this.state_id][status].indexOf(id) !== -1;\n        statuses[antistatus] = !statuses[status];\n    }.bind(this));\n\n    var show_resolved = resolveStatus(statuses, show_directive);\n    var hide_resolved = resolveStatus(statuses, hide_directive);\n\n    // Only show tooltip if the resolved logic explicitly shows and explicitly not hides the tool tip\n    // Otherwise ensure tooltip does not exist\n    if (show_resolved && !hide_resolved){\n        this.createTooltip(element);\n    } else {\n        this.destroyTooltip(element);\n    }\n\n    return this;\n    \n};\n\n/**\n * Find the elements (or indices) that match any of a set of provided filters\n * @protected\n * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n *   [field, operator, value] for other operators\n * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n *   elements, or references to the elements themselves\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filter = function(filters, return_type){\n    if (typeof return_type == \"undefined\" || [\"indexes\",\"elements\"].indexOf(return_type) === -1){\n        return_type = \"indexes\";\n    }\n    if (!Array.isArray(filters)){ return []; }\n    var test = function(element, filter){\n        var operators = {\n            \"=\": function(a,b){ return a === b; },\n            \"<\": function(a,b){ return a < b; },\n            \"<=\": function(a,b){ return a <= b; },\n            \">\": function(a,b){ return a > b; },\n            \">=\": function(a,b){ return a >= b; },\n            \"%\": function(a,b){ return a % b; }\n        };\n        if (!Array.isArray(filter)){ return false; }\n        if (filter.length === 2){\n            return element[filter[0]] === filter[1];\n        } else if (filter.length === 3 && operators[filter[1]]){\n            return operators[filter[1]](element[filter[0]], filter[2]);\n        } else {\n            return false;\n        }\n    };\n    var matches = [];\n    this.data.forEach(function(element, idx){\n        var match = true;\n        filters.forEach(function(filter){\n            if (!test(element, filter)){ match = false; }\n        });\n        if (match){ matches.push(return_type === \"indexes\" ? idx : element); }\n    });\n    return matches;\n};\n\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterIndexes = function(filters){ return this.filter(filters, \"indexes\"); };\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterElements = function(filters){ return this.filter(filters, \"elements\"); };\n\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset a single element's status\n    // TODO: Improve documentation for dynamically generated methods/properties\n    LocusZoom.DataLayer.prototype[verb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.DataLayer.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.DataLayer.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n/**\n * Toggle a status (e.g. highlighted, selected, identified) on an element\n * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n * @param {String|Object} element The data bound to the element of interest\n * @param {Boolean} toggle True to add the status (and associated CSS styles); false to remove it\n * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatus = function(status, element, toggle, exclusive){\n    // Sanity checks\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof element == \"undefined\"){\n        throw(\"Invalid element passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof toggle == \"undefined\"){\n        toggle = true;\n    }\n\n    // Get an ID for the element or return having changed nothing\n    try {\n        var element_id = this.getElementId(element);\n    } catch (get_element_id_error){\n        return this;\n    }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Set/unset the proper status class on the appropriate DOM element(s)\n    d3.select(\"#\" + element_id).classed(\"lz-data_layer-\" + this.layout.type + \"-\" + status, toggle);\n    var element_status_node_id = this.getElementStatusNodeId(element);\n    if (element_status_node_id !== null){\n        d3.select(\"#\" + element_status_node_id).classed(\"lz-data_layer-\" + this.layout.type + \"-statusnode-\" + status, toggle);\n    }\n    \n    // Track element ID in the proper status state array\n    var element_status_idx = this.state[this.state_id][status].indexOf(element_id);\n    if (toggle && element_status_idx === -1){\n        this.state[this.state_id][status].push(element_id);\n    }\n    if (!toggle && element_status_idx !== -1){\n        this.state[this.state_id][status].splice(element_status_idx, 1);\n    }\n    \n    // Trigger tool tip show/hide logic\n    this.showOrHideTooltip(element);\n\n    // Trigger layout changed event hook\n    this.parent.emit(\"layout_changed\", true);\n    if (status === \"selected\") {\n        // Notify parents that a given element has been interacted with. For now, we will only notify on\n        //   \"selected\" type events, which is (usually) a toggle-able state. If elements are exclusive, two selection\n        //   events will be sent in short order as the previously selected element has to be de-selected first\n        this.parent.emit(\"element_selection\", { element: element, active: toggle }, true);\n    }\n    return this;\n    \n};\n\n/**\n * Toggle a status on elements in the data layer based on a set of filters\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatusByFilters()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; } else { toggle = !!toggle; }\n    if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n    if (!Array.isArray(filters)){ filters = []; }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Apply statuses\n    this.filterElements(filters).forEach(function(element){\n        this.setElementStatus(status, element, toggle);\n    }.bind(this));\n    \n    return this;\n};\n\n/**\n * Toggle a status on all elements in the data layer\n * @param {String} status\n * @param {Boolean} toggle\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setAllElementStatus = function(status, toggle){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; }\n\n    // Apply statuses\n    if (toggle){\n        this.data.forEach(function(element){\n            this.setElementStatus(status, element, true);\n        }.bind(this));\n    } else {\n        var status_ids = this.state[this.state_id][status].slice();\n        status_ids.forEach(function(id){\n            var element = this.getElementById(id);\n            if (typeof element == \"object\" && element !== null){\n                this.setElementStatus(status, element, false);\n            }\n        }.bind(this));\n        this.state[this.state_id][status] = [];\n    }\n\n    // Update global status flag\n    this.global_statuses[status] = toggle;\n\n    return this;\n};\n\n/**\n * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n * @param {d3.selection} selection\n */\nLocusZoom.DataLayer.prototype.applyBehaviors = function(selection){\n    if (typeof this.layout.behaviors != \"object\"){ return; }\n    Object.keys(this.layout.behaviors).forEach(function(directive){\n        var event_match = /(click|mouseover|mouseout)/.exec(directive);\n        if (!event_match){ return; }\n        selection.on(event_match[0] + \".\" + directive, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n    }.bind(this));\n};\n\n/**\n * Generate a function that executes an arbitrary list of behaviors on an element during an event\n * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n * @param {Object} behaviors An object describing the behavior to attach to this single element\n * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n *  selected, etc)\n * @param {string} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n * @returns {function(this:LocusZoom.DataLayer)} Return a function that handles the event in context with the behavior\n *   and the element- can be attached as an event listener\n */\nLocusZoom.DataLayer.prototype.executeBehaviors = function(directive, behaviors) {\n\n    // Determine the required state of control and shift keys during the event\n    var requiredKeyStates = {\n        \"ctrl\": (directive.indexOf(\"ctrl\") !== -1),\n        \"shift\": (directive.indexOf(\"shift\") !== -1)\n    };\n\n    return function(element){\n\n        // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n        if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey){ return; }\n\n        // Loop through behaviors making each one go in succession\n        behaviors.forEach(function(behavior){\n            \n            // Route first by the action, if defined\n            if (typeof behavior != \"object\" || behavior === null){ return; }\n            \n            switch (behavior.action){\n                \n            // Set a status (set to true regardless of current status, optionally with exclusivity)\n            case \"set\":\n                this.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                break;\n                \n            // Unset a status (set to false regardless of current status, optionally with exclusivity)\n            case \"unset\":\n                this.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                break;\n                \n            // Toggle a status\n            case \"toggle\":\n                var current_status_boolean = (this.state[this.state_id][behavior.status].indexOf(this.getElementId(element)) !== -1);\n                var exclusive = behavior.exclusive && !current_status_boolean;\n                this.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                break;\n                \n            // Link to a dynamic URL\n            case \"link\":\n                if (typeof behavior.href == \"string\"){\n                    var url = LocusZoom.parseFields(element, behavior.href);\n                    if (typeof behavior.target == \"string\"){\n                        window.open(url, behavior.target);\n                    } else {\n                        window.location.href = url;\n                    }\n                }\n                break;\n                \n            // Action not defined, just return\n            default:\n                break;\n                \n            }\n            \n            return;\n            \n        }.bind(this));\n\n    }.bind(this);\n\n};\n\n/**\n * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n *   Necessary for positioning any HTML elements over the panel\n * @returns {{x: Number, y: Number}}\n */\nLocusZoom.DataLayer.prototype.getPageOrigin = function(){\n    var panel_origin = this.parent.getPageOrigin();\n    return {\n        x: panel_origin.x + this.parent.layout.margin.left,\n        y: panel_origin.y + this.parent.layout.margin.top\n    };\n};\n\n/**\n * Get a data layer's current underlying data in a standard format (e.g. JSON or CSV)\n * @param {('csv'|'tsv'|'json')} format How to export the data\n * @returns {*}\n */\nLocusZoom.DataLayer.prototype.exportData = function(format){\n    var default_format = \"json\";\n    format = format || default_format;\n    format = (typeof format == \"string\" ? format.toLowerCase() : default_format);\n    if ([\"json\",\"csv\",\"tsv\"].indexOf(format) === -1){ format = default_format; }\n    var ret;\n    switch (format){\n    case \"json\":\n        try {\n            ret = JSON.stringify(this.data);\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export JSON data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    case \"tsv\":\n    case \"csv\":\n        try {\n            var jsonified = JSON.parse(JSON.stringify(this.data));\n            if (typeof jsonified != \"object\"){\n                ret = jsonified.toString();\n            } else if (!Array.isArray(jsonified)){\n                ret = \"Object\";\n            } else {\n                var delimiter = (format === \"tsv\") ? \"\\t\" : \",\";\n                var header = this.layout.fields.map(function(header){\n                    return JSON.stringify(header);\n                }).join(delimiter) + \"\\n\";\n                ret = header + jsonified.map(function(record){\n                    return this.layout.fields.map(function(field){\n                        if (typeof record[field] == \"undefined\"){\n                            return JSON.stringify(null);\n                        } else if (typeof record[field] == \"object\" && record[field] !== null){\n                            return Array.isArray(record[field]) ? \"\\\"[Array(\" + record[field].length + \")]\\\"\" : \"\\\"[Object]\\\"\";\n                        } else {\n                            return JSON.stringify(record[field]);\n                        }\n                    }).join(delimiter);\n                }.bind(this)).join(\"\\n\");\n            }\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export CSV data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    }\n    return ret;\n};\n\n/**\n * Position the datalayer and all tooltips\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.draw = function(){\n    this.svg.container.attr(\"transform\", \"translate(\" + this.parent.layout.cliparea.origin.x +  \",\" + this.parent.layout.cliparea.origin.y + \")\");\n    this.svg.clipRect\n        .attr(\"width\", this.parent.layout.cliparea.width)\n        .attr(\"height\", this.parent.layout.cliparea.height);\n    this.positionAllTooltips();\n    return this;\n};\n\n\n/**\n * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n * @return {Promise}\n */\nLocusZoom.DataLayer.prototype.reMap = function(){\n\n    this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n    // and then recreated if returning to visibility\n\n    // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n    var promise = this.parent_plot.lzd.getData(this.state, this.layout.fields);\n    promise.then(function(new_data) {\n        this.data = new_data.body;\n        this.applyDataMethods();\n        this.initialized = true;\n    }.bind(this));\n\n    return promise;\n};\n\n\n/**\n * The central registry of known data layer definitions (which may be stored in separate files due to length)\n * @namespace\n */\nLocusZoom.DataLayers = (function() {\n    var obj = {};\n    var datalayers = {};\n    /**\n     * @name LocusZoom.DataLayers.get\n     * @param {String} name The name of the datalayer\n     * @param {Object} layout The configuration object for this data layer\n     * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n     * @returns {LocusZoom.DataLayer}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (datalayers[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for data layer [\" + name + \"]\");\n            } else {\n                return new datalayers[name](layout, parent);\n            }\n        } else {\n            throw(\"data layer [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @name LocusZoom.DataLayers.set\n     * @protected\n     * @param {String} name\n     * @param {Function} datalayer Constructor for the datalayer\n     */\n    obj.set = function(name, datalayer) {\n        if (datalayer) {\n            if (typeof datalayer != \"function\"){\n                throw(\"unable to set data layer [\" + name + \"], argument provided is not a function\");\n            } else {\n                datalayers[name] = datalayer;\n                datalayers[name].prototype = new LocusZoom.DataLayer();\n            }\n        } else {\n            delete datalayers[name];\n        }\n    };\n\n    /**\n     * Add a new type of datalayer to the registry of known layer types\n     * @name LocusZoom.DataLayers.add\n     * @param {String} name The name of the data layer to register\n     * @param {Function} datalayer\n     */\n    obj.add = function(name, datalayer) {\n        if (datalayers[name]) {\n            throw(\"data layer already exists with name: \" + name);\n        } else {\n            obj.set(name, datalayer);\n        }\n    };\n\n    /**\n     * Register a new datalayer that inherits and extends basic behaviors from a known datalayer\n     * @param {String} parent_name The name of the parent data layer whose behavior is to be extended\n     * @param {String} name The name of the new datalayer to register\n     * @param {Object} [overrides] Object of properties and methods to combine with the prototype of the parent datalayer\n     * @returns {Function} The constructor for the new child class\n     */\n    obj.extend = function(parent_name, name, overrides) {\n        // TODO: Consider exposing additional constructor argument, if there is a use case for very granular extension\n        overrides = overrides || {};\n\n        var parent = datalayers[parent_name];\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered datalayer type\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        // Bypass .set() because we want a layer of inheritance below `DataLayer`\n        datalayers[name] = child;\n        return child;\n    };\n\n    /**\n     * List the names of all known datalayers\n     * @name LocusZoom.DataLayers.list\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(datalayers);\n    };\n\n    return obj;\n})();\n","\"use strict\";\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @class LocusZoom.DataLayers.annotation_track\n * @augments LocusZoom.DataLayer\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `LocusZoom.DataLayer.filter` for details\n */\nLocusZoom.DataLayers.add(\"annotation_track\", function(layout) {\n    // In the future we may add additional options for controlling marker size/ shape, based on user feedback\n    this.DefaultLayout = {\n        color: \"#000000\",\n        filters: []\n    };\n\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    if (!Array.isArray(layout.filters)) {\n        throw \"Annotation track must specify array of filters for selecting points to annotate\";\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    this.render = function() {\n        var self = this;\n        // Only render points that currently satisfy all provided filter conditions.\n        var trackData = this.filter(this.layout.filters, \"elements\");\n\n        var selection = this.svg.group\n            .selectAll(\"rect.lz-data_layer-\" + self.layout.type)\n            .data(trackData, function(d) { return d[self.layout.id_field]; });\n\n        // Add new elements as needed\n        selection.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function (d){ return self.getElementId(d); });\n        // Update the set of elements to reflect new data\n        selection\n            .attr(\"x\", function (d) { return self.parent[\"x_scale\"](d[self.layout.x_axis.field]); })\n            .attr(\"width\", 1)  // TODO autocalc width of track? Based on datarange / pixel width presumably\n            .attr(\"height\", self.parent.layout.height)\n            .attr(\"fill\", function(d){ return self.resolveScalableParameter(self.layout.color, d); });\n        // Remove unused elements\n        selection.exit().remove();\n\n        // Set up tooltips and mouse interaction\n        this.applyBehaviors(selection);\n    };\n\n    // Reimplement the positionTooltip() method to be annotation-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != \"string\") {\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]) {\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var offset = stroke_width / 2;\n        var page_origin = this.getPageOrigin();\n\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_center = data_layer_height / 2;\n\n        // Tooltip should be horizontally centered above the point to be annotated. (or below if space is limited)\n        var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n        left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n        arrow_left = (tooltip_box.width / 2) - (arrow_width) + offset_left - offset_right - offset;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - y_center) {\n            top = page_origin.y + y_center - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + y_center + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    return this;\n});\n","\"use strict\";\n\n/*********************\n  Forest Data Layer\n  Implements a standard forest plot\n*/\n\nLocusZoom.DataLayers.add(\"forest\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"square\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2\n        },\n        id_field: \"id\",\n        confidence_intervals: {\n            start_field: \"ci_start\",\n            end_field: \"ci_end\"\n        },\n        show_no_significance_line: true\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be forest-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        // Position horizontally on the left or the right depending on which side of the plot the point is on\n        var offset = Math.sqrt(point_size / Math.PI);\n        var left, arrow_type, arrow_left;\n        if (x_center <= this.parent.layout.width / 2){\n            left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n            arrow_type = \"left\";\n            arrow_left = -1 * (arrow_width + stroke_width);\n        } else {\n            left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n            arrow_type = \"right\";\n            arrow_left = tooltip_box.width - stroke_width;\n        }\n        // Position vertically centered unless we're at the top or bottom of the plot\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var top, arrow_top;\n        if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n            top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n            arrow_top = border_radius;\n        } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n            top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n            arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n        } else { // vertically centered\n            top = page_origin.y + y_center - (tooltip_box.height / 2);\n            arrow_top = (tooltip_box.height / 2) - arrow_width;\n        }        \n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate confidence interval paths if fields are defined\n        if (this.layout.confidence_intervals\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.start_field) !== -1\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.end_field) !== -1){\n            // Generate a selection for all forest plot confidence intervals\n            var ci_selection = this.svg.group\n                .selectAll(\"rect.lz-data_layer-forest.lz-data_layer-forest-ci\")\n                .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n            // Create confidence interval rect elements\n            ci_selection.enter()\n                .append(\"rect\")\n                .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-ci\")\n                .attr(\"id\", function(d){ return this.getElementId(d) + \"_ci\"; }.bind(this))\n                .attr(\"transform\", \"translate(0,\" + (isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height) + \")\");\n            // Apply position and size parameters using transition if necessary\n            var ci_transform = function(d) {\n                var x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)){ x = -1000; }\n                if (isNaN(y)){ y = -1000; }\n                return \"translate(\" + x + \",\" + y + \")\";\n            }.bind(this);\n            var ci_width = function(d){\n                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                     - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n            }.bind(this);\n            var ci_height = 1;\n            if (this.canTransition()){\n                ci_selection\n                    .transition()\n                    .duration(this.layout.transition.duration || 0)\n                    .ease(this.layout.transition.ease || \"cubic-in-out\")\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            } else {\n                ci_selection\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            }\n            // Remove old elements as needed\n            ci_selection.exit().remove();\n        }\n            \n        // Generate a selection for all forest plot points\n        var points_selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-forest.lz-data_layer-forest-point\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        points_selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-point\")\n            .attr(\"id\", function(d){ return this.getElementId(d) + \"_point\"; }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n        if (this.canTransition()){\n            points_selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            points_selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        points_selection.exit().remove();\n\n        // Apply default event emitters to selection\n        points_selection.on(\"click.event_emitter\", function(element_data){\n            this.parent.emit(\"element_clicked\", element_data, true);\n        }.bind(this));\n       \n        // Apply behaviors to points\n        this.applyBehaviors(points_selection);\n        \n    };\n \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"genes\", function(layout){\n    /**\n     * Define a default layout for this DataLayer type and merge it with the passed argument\n     * @protected\n     * @member {Object}\n     * */\n    this.DefaultLayout = {\n        // Optionally specify different fill and stroke properties\n        stroke: \"rgb(54, 54, 150)\",\n        color: \"#363696\",\n        label_font_size: 12,\n        label_exon_spacing: 4,\n        exon_height: 16,\n        bounding_box_padding: 6,\n        track_vertical_spacing: 10\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        return this.getElementId(element) + \"-statusnode\";\n    };\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    this.getTrackHeight = function(){\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    };\n\n    /**\n     * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n     * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n     * @member {number}\n     * @type {number}\n     */\n    this.transcript_idx = 0;\n\n    /**\n     * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n     *   over positions / assignments\n     * @protected\n     * @member {number}\n     */\n    this.tracks = 1;\n\n    /**\n     * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n     * @member {Object.<Number, Array>}\n     */\n    this.gene_track_index = { 1: [] };\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.assignTracks = function(){\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         *      TODO: Move to outer scope?\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        this.getLabelWidth = function(gene_name, font_size){\n            try {\n                var temp_text = this.svg.group.append(\"text\")\n                    .attr(\"x\", 0).attr(\"y\", 0).attr(\"class\", \"lz-data_layer-genes lz-label\")\n                    .style(\"font-size\", font_size)\n                    .text(gene_name + \"→\");\n                var label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e){\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        this.data.map(function(d, g){\n\n            // If necessary, split combined gene id / version fields into discrete fields.\n            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n            if (this.data[g].gene_id && this.data[g].gene_id.indexOf(\".\")){\n                var split = this.data[g].gene_id.split(\".\");\n                this.data[g].gene_id = split[0];\n                this.data[g].gene_version = split[1];\n            }\n\n            // Stash the transcript ID on the parent gene\n            this.data[g].transcript_id = this.data[g].transcripts[this.transcript_idx].transcript_id;\n\n            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n            // (range: values in terms of pixels on the screen)\n            this.data[g].display_range = {\n                start: this.parent.x_scale(Math.max(d.start, this.state.start)),\n                end:   this.parent.x_scale(Math.min(d.end, this.state.end))\n            };\n            this.data[g].display_range.label_width = this.getLabelWidth(this.data[g].gene_name, this.layout.label_font_size);\n            this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            // Determine label text anchor (default to middle)\n            this.data[g].display_range.text_anchor = \"middle\";\n            if (this.data[g].display_range.width < this.data[g].display_range.label_width){\n                if (d.start < this.state.start){\n                    this.data[g].display_range.end = this.data[g].display_range.start\n                        + this.data[g].display_range.label_width\n                        + this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"start\";\n                } else if (d.end > this.state.end){\n                    this.data[g].display_range.start = this.data[g].display_range.end\n                        - this.data[g].display_range.label_width\n                        - this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"end\";\n                } else {\n                    var centered_margin = ((this.data[g].display_range.label_width - this.data[g].display_range.width) / 2)\n                        + this.layout.label_font_size;\n                    if ((this.data[g].display_range.start - centered_margin) < this.parent.x_scale(this.state.start)){\n                        this.data[g].display_range.start = this.parent.x_scale(this.state.start);\n                        this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"start\";\n                    } else if ((this.data[g].display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                        this.data[g].display_range.end = this.parent.x_scale(this.state.end);\n                        this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"end\";\n                    } else {\n                        this.data[g].display_range.start -= centered_margin;\n                        this.data[g].display_range.end += centered_margin;\n                    }\n                }\n                this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            }\n            // Add bounding box padding to the calculated display range start, end, and width\n            this.data[g].display_range.start -= this.layout.bounding_box_padding;\n            this.data[g].display_range.end   += this.layout.bounding_box_padding;\n            this.data[g].display_range.width += 2 * this.layout.bounding_box_padding;\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[g].display_domain = {\n                start: this.parent.x_scale.invert(this.data[g].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[g].display_range.end)\n            };\n            this.data[g].display_domain.width = this.data[g].display_domain.end - this.data[g].display_domain.start;\n\n            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n            this.data[g].track = null;\n            var potential_track = 1;\n            while (this.data[g].track === null){\n                var collision_on_potential_track = false;\n                this.gene_track_index[potential_track].map(function(placed_gene){\n                    if (!collision_on_potential_track){\n                        var min_start = Math.min(placed_gene.display_range.start, this.display_range.start);\n                        var max_end = Math.max(placed_gene.display_range.end, this.display_range.end);\n                        if ((max_end - min_start) < (placed_gene.display_range.width + this.display_range.width)){\n                            collision_on_potential_track = true;\n                        }\n                    }\n                }.bind(this.data[g]));\n                if (!collision_on_potential_track){\n                    this.data[g].track = potential_track;\n                    this.gene_track_index[potential_track].push(this.data[g]);\n                } else {\n                    potential_track++;\n                    if (potential_track > this.tracks){\n                        this.tracks = potential_track;\n                        this.gene_track_index[potential_track] = [];\n                    }\n                }\n            }\n\n            // Stash parent references on all genes, trascripts, and exons\n            this.data[g].parent = this;\n            this.data[g].transcripts.map(function(d, t){\n                this.data[g].transcripts[t].parent = this.data[g];\n                this.data[g].transcripts[t].exons.map(function(d, e){\n                    this.data[g].transcripts[t].exons[e].parent = this.data[g].transcripts[t];\n                }.bind(this));\n            }.bind(this));\n\n        }.bind(this));\n        return this;\n    };\n\n    /**\n     * Main render function\n     */\n    this.render = function(){\n\n        var self = this;\n        this.assignTracks();\n\n        var width, height, x, y;\n\n        // Render gene groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-genes\")\n            .data(this.data, function(d){ return d.gene_name; });\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-genes\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(gene){\n\n                var data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                var bboxes = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-data_layer-genes-statusnode\")\n                    .data([gene], function(d){ return data_layer.getElementStatusNodeId(d); });\n\n                bboxes.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-data_layer-genes-statusnode\");\n                \n                bboxes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementStatusNodeId(d);\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    bboxes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    bboxes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                bboxes.exit().remove();\n\n                // Render gene boundaries\n                var boundary_fill = function(d){ return self.resolveScalableParameter(self.layout.color, d); };\n                var boundary_stroke = function(d){ return self.resolveScalableParameter(self.layout.stroke, d); };\n                var boundaries = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-boundary\")\n                    .data([gene], function(d){ return d.gene_name + \"_boundary\"; })\n                    .style({ fill: boundary_fill, stroke: boundary_stroke });\n\n                boundaries.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-boundary\");\n\n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return 1; // TODO: scale dynamically?\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing\n                        + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                };\n                if (data_layer.canTransition()){\n                    boundaries\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    boundaries\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                \n                boundaries.exit().remove();\n\n                // Render gene labels\n                var labels = d3.select(this).selectAll(\"text.lz-data_layer-genes.lz-label\")\n                    .data([gene], function(d){ return d.gene_name + \"_label\"; });\n\n                labels.enter().append(\"text\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-label\");\n\n                labels\n                    .attr(\"text-anchor\", function(d){\n                        return d.display_range.text_anchor;\n                    })\n                    .text(function(d){\n                        return (d.strand === \"+\") ? d.gene_name + \"→\" : \"←\" + d.gene_name;\n                    })\n                    .style(\"font-size\", gene.parent.layout.label_font_size);\n\n                x = function(d){\n                    if (d.display_range.text_anchor === \"middle\"){\n                        return d.display_range.start + (d.display_range.width / 2);\n                    } else if (d.display_range.text_anchor === \"start\"){\n                        return d.display_range.start + data_layer.layout.bounding_box_padding;\n                    } else if (d.display_range.text_anchor === \"end\"){\n                        return d.display_range.end - data_layer.layout.bounding_box_padding;\n                    }\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size;\n                };\n                if (data_layer.canTransition()){\n                    labels\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    labels\n                        .attr(\"x\", x).attr(\"y\", y);\n                }\n\n                labels.exit().remove();\n\n                // Render exon rects (first transcript only, for now)\n                // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                var exon_fill = function(d){ return self.resolveScalableParameter(self.layout.color, d.parent.parent); };\n                var exon_stroke = function(d){ return self.resolveScalableParameter(self.layout.stroke, d.parent.parent); };\n\n                var exons = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-exon\")\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, function(d){ return d.exon_id; });\n\n                exons.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-exon\");\n\n                exons\n                    .style({ fill: exon_fill, stroke: exon_stroke });\n\n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return data_layer.layout.exon_height;\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(){\n                    return ((gene.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing;\n                };\n                if (data_layer.canTransition()){\n                    exons\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    exons\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                exons.exit().remove();\n\n                // Render gene click area\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-clickarea\")\n                    .data([gene], function(d){ return d.gene_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click.event_emitter\", function(element){\n                    element.parent.parent.emit(\"element_clicked\", element, true);\n                });\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be gene-specific\n     * @param {String} id\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        var gene_bbox = d3.select(\"#\" + gene_bbox_id).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the gene that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var gene_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - gene_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + gene_center_x - data_layer_width, 0);\n        var left = page_origin.x + gene_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the gene unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (gene_bbox.y + gene_bbox.height)){\n            top = page_origin.y + gene_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + gene_bbox.y + gene_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n  Genome Legend Data Layer\n  Implements a data layer that will render a genome legend\n*/\n\n// Build a custom data layer for a genome legend\nLocusZoom.DataLayers.add(\"genome_legend\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        chromosome_fill_colors: {\n            light: \"rgb(155, 155, 188)\",\n            dark: \"rgb(95, 95, 128)\"\n        },\n        chromosome_label_colors: {\n            light: \"rgb(120, 120, 186)\",\n            dark: \"rgb(0, 0, 66)\"\n        }\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Implement the main render function\n    this.render = function(){\n\n        // Iterate over data to generate genome-wide start/end values for each chromosome\n        var position = 0;\n        this.data.forEach(function(d, i){\n            this.data[i].genome_start = position;\n            this.data[i].genome_end = position + d[\"genome:base_pairs\"];\n            position += d[\"genome:base_pairs\"];\n        }.bind(this));\n\n        var chromosomes = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend\")\n            .data(this.data, function(d){ return d[\"genome:chr\"]; });\n\n        // Create chromosome elements, apply class\n        chromosomes.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend\");\n\n        // Position and fill chromosome rects\n        var data_layer = this;\n        var panel = this.parent;\n\n        chromosomes\n            .attr(\"fill\", function(d){ return (d[\"genome:chr\"] % 2 ? data_layer.layout.chromosome_fill_colors.light : data_layer.layout.chromosome_fill_colors.dark); })\n            .attr(\"x\", function(d){ return panel.x_scale(d.genome_start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d[\"genome:base_pairs\"]); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        // Remove old elements as needed\n        chromosomes.exit().remove();\n\n        // Parse current state variant into a position\n        // Assumes that variant string is of the format 10:123352136_C/T or 10:123352136\n        var variant_parts = /([^:]+):(\\d+)(?:_.*)?/.exec(this.state.variant);\n        if (!variant_parts) {\n            throw(\"Genome legend cannot understand the specified variant position\");\n        }\n        var chr = variant_parts[1];\n        var offset = variant_parts[2];\n        // TODO: How does this handle representation of X or Y chromosomes?\n        position = +this.data[chr-1].genome_start + +offset;\n\n        // Render the position\n        var region = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend-marker\")\n            .data([{ start: position, end: position + 1 }]);\n\n        region.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend-marker\");\n\n        region\n            .transition()\n            .duration(500)\n            .style({\n                \"fill\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke-width\": \"3px\"\n            })\n            .attr(\"x\", function(d){ return panel.x_scale(d.start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d.end - d.start); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        region.exit().remove();\n        \n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/**\n * Intervals Data Layer\n * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)\n * @class LocusZoom.DataLayers.intervals\n * @augments LocusZoom.DataLayer\n */\nLocusZoom.DataLayers.add(\"intervals\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        start_field: \"start\",\n        end_field: \"end\",\n        track_split_field: \"state_id\",\n        track_split_order: \"DESC\",\n        track_split_legend_to_y_axis: 2,\n        split_tracks: true,\n        track_height: 15,\n        track_vertical_spacing: 3,\n        bounding_box_padding: 2,\n        always_hide_legend: false,\n        color: \"#B8B8B8\",\n        fill_opacity: 1\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n    \n    /**\n     * To define shared highlighting on the track split field define the status node id override\n     * to generate an ID common to the track when we're actively splitting data out to separate tracks\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        if (this.layout.split_tracks){\n            return (this.getBaseId() + \"-statusnode-\" + element[this.layout.track_split_field]).replace(/[:.[\\],]/g, \"_\");\n        }\n        return this.getElementId(element) + \"-statusnode\";\n    }.bind(this);\n    \n    // Helper function to sum layout values to derive total height for a single interval track\n    this.getTrackHeight = function(){\n        return this.layout.track_height\n            + this.layout.track_vertical_spacing\n            + (2 * this.layout.bounding_box_padding);\n    };\n\n    this.tracks = 1;\n    this.previous_tracks = 1;\n    \n    // track-number-indexed object with arrays of interval indexes in the dataset\n    this.interval_track_index = { 1: [] };\n\n    // After we've loaded interval data interpret it to assign\n    // each to a track so that they do not overlap in the view\n    this.assignTracks = function(){\n\n        // Reinitialize some metadata\n        this.previous_tracks = this.tracks;\n        this.tracks = 0;\n        this.interval_track_index = { 1: [] };\n        this.track_split_field_index = {};\n        \n        // If splitting tracks by a field's value then do a first pass determine\n        // a value/track mapping that preserves the order of possible values\n        if (this.layout.track_split_field && this.layout.split_tracks){\n            this.data.map(function(d){\n                this.track_split_field_index[d[this.layout.track_split_field]] = null;\n            }.bind(this));\n            var index = Object.keys(this.track_split_field_index);\n            if (this.layout.track_split_order === \"DESC\"){ index.reverse(); }\n            index.forEach(function(val){\n                this.track_split_field_index[val] = this.tracks + 1;\n                this.interval_track_index[this.tracks + 1] = [];\n                this.tracks++;\n            }.bind(this));\n        }\n\n        this.data.map(function(d, i){\n\n            // Stash a parent reference on the interval\n            this.data[i].parent = this;\n\n            // Determine display range start and end, based on minimum allowable interval display width,\n            // bounded by what we can see (range: values in terms of pixels on the screen)\n            this.data[i].display_range = {\n                start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),\n                end:   this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))\n            };\n            this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start;\n            \n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[i].display_domain = {\n                start: this.parent.x_scale.invert(this.data[i].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[i].display_range.end)\n            };\n            this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start;\n\n            // If splitting to tracks based on the value of the designated track split field\n            // then don't bother with collision detection (intervals will be grouped on tracks\n            // solely by the value of track_split_field)\n            if (this.layout.track_split_field && this.layout.split_tracks){\n                var val = this.data[i][this.layout.track_split_field];\n                this.data[i].track = this.track_split_field_index[val];\n                this.interval_track_index[this.data[i].track].push(i);\n            } else {\n                // If not splitting to tracks based on a field value then do so based on collision\n                // detection (as how it's done for genes). Use display range/domain data generated\n                // above and cast each interval to tracks such that none overlap\n                this.tracks = 1;\n                this.data[i].track = null;\n                var potential_track = 1;\n                while (this.data[i].track === null){\n                    var collision_on_potential_track = false;\n                    this.interval_track_index[potential_track].map(function(placed_interval){\n                        if (!collision_on_potential_track){\n                            var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);\n                            var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);\n                            if ((max_end - min_start) < (placed_interval.display_range.width + this.display_range.width)){\n                                collision_on_potential_track = true;\n                            }\n                        }\n                    }.bind(this.data[i]));\n                    if (!collision_on_potential_track){\n                        this.data[i].track = potential_track;\n                        this.interval_track_index[potential_track].push(this.data[i]);\n                    } else {\n                        potential_track++;\n                        if (potential_track > this.tracks){\n                            this.tracks = potential_track;\n                            this.interval_track_index[potential_track] = [];\n                        }\n                    }\n                }\n\n            }\n\n        }.bind(this));\n\n        return this;\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        this.assignTracks();\n\n        // Remove any shared highlight nodes and re-render them if we're splitting on tracks\n        // At most there will only be dozen or so nodes here (one per track) and each time\n        // we render data we may have new tracks, so wiping/redrawing all is reasonable.\n        this.svg.group.selectAll(\".lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared\").remove();\n        Object.keys(this.track_split_field_index).forEach(function(key){\n            // Make a psuedo-element so that we can generate an id for the shared node\n            var psuedoElement = {};\n            psuedoElement[this.layout.track_split_field] = key;\n            // Insert the shared node\n            var sharedstatusnode_style = {display: (this.layout.split_tracks ? null : \"none\")};\n            this.svg.group.insert(\"rect\", \":first-child\")\n                .attr(\"id\", this.getElementStatusNodeId(psuedoElement))\n                .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared\")\n                .attr(\"rx\", this.layout.bounding_box_padding).attr(\"ry\", this.layout.bounding_box_padding)\n                .attr(\"width\", this.parent.layout.cliparea.width)\n                .attr(\"height\", this.getTrackHeight() - this.layout.track_vertical_spacing)\n                .attr(\"x\", 0)\n                .attr(\"y\", (this.track_split_field_index[key]-1) * this.getTrackHeight())\n                .style(sharedstatusnode_style);\n        }.bind(this));\n\n        var width, height, x, y, fill, fill_opacity;\n            \n        // Render interval groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-intervals\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-intervals\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(interval){\n\n                var data_layer = interval.parent;\n\n                // Render interval status nodes (displayed behind intervals to show highlight\n                // without needing to modify interval display element(s))\n                var statusnode_style = {display: (data_layer.layout.split_tracks ? \"none\" : null)};\n                var statusnodes = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete\")\n                    .data([interval], function(d){ return data_layer.getElementId(d) + \"-statusnode\"; });\n                statusnodes.enter().insert(\"rect\", \":first-child\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete\");\n                statusnodes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"-statusnode\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .style(statusnode_style);\n                width = function(d){\n                    return d.display_range.width + (2 * data_layer.layout.bounding_box_padding);\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start - data_layer.layout.bounding_box_padding;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    statusnodes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    statusnodes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                statusnodes.exit().remove();\n\n                // Render primary interval rects\n                var rects = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-interval_rect\")\n                    .data([interval], function(d){ return d[data_layer.layout.id_field] + \"_interval_rect\"; });\n\n                rects.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-interval_rect\");\n\n                height = data_layer.layout.track_height;\n                width = function(d){\n                    return d.display_range.width;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding;\n                };\n                fill = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.color, d);\n                };\n                fill_opacity = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d);\n                };\n                \n                \n                if (data_layer.canTransition()){\n                    rects\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                } else {\n                    rects\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                }\n                \n                rects.exit().remove();\n\n                // Render interval click areas\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-clickarea\")\n                    .data([interval], function(d){ return d.interval_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click\", function(element_data){\n                    element_data.parent.parent.emit(\"element_clicked\", element_data, true);\n                }.bind(this));\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Update the legend axis if the number of ticks changed\n        if (this.previous_tracks !== this.tracks){\n            this.updateSplitTrackAxis();\n        }\n\n        return this;\n\n    };\n    \n    // Reimplement the positionTooltip() method to be interval-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var interval_bbox = d3.select(\"#\" + this.getElementStatusNodeId(tooltip.data)).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the interval that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var interval_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - interval_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + interval_center_x - data_layer_width, 0);\n        var left = page_origin.x + interval_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the interval unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (interval_bbox.y + interval_bbox.height)){\n            top = page_origin.y + interval_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + interval_bbox.y + interval_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Redraw split track axis or hide it, and show/hide the legend, as determined\n    // by current layout parameters and data\n    this.updateSplitTrackAxis = function(){\n        var legend_axis = this.layout.track_split_legend_to_y_axis ? \"y\" + this.layout.track_split_legend_to_y_axis : false;\n        if (this.layout.split_tracks){\n            var tracks = +this.tracks || 0;\n            var track_height = +this.layout.track_height || 0;\n            var track_spacing =  2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);\n            var target_height = (tracks * track_height) + ((tracks - 1) * track_spacing);\n            this.parent.scaleHeightToData(target_height);\n            if (legend_axis && this.parent.legend){\n                this.parent.legend.hide();                            \n                this.parent.layout.axes[legend_axis] = {\n                    render: true,\n                    ticks: [],\n                    range: {\n                        start: (target_height - (this.layout.track_height/2)),\n                        end: (this.layout.track_height/2)\n                    }\n                };\n                this.layout.legend.forEach(function(element){\n                    var key = element[this.layout.track_split_field];\n                    var track = this.track_split_field_index[key];\n                    if (track){\n                        if (this.layout.track_split_order === \"DESC\"){\n                            track = Math.abs(track - tracks - 1);\n                        }\n                        this.parent.layout.axes[legend_axis].ticks.push({\n                            y: track,\n                            text: element.label\n                        });\n                    }\n                }.bind(this));\n                this.layout.y_axis = {\n                    axis: this.layout.track_split_legend_to_y_axis,\n                    floor: 1,\n                    ceiling: tracks\n                };\n                this.parent.render();\n            }\n            this.parent_plot.positionPanels();\n        } else {\n            if (legend_axis && this.parent.legend){\n                if (!this.layout.always_hide_legend){ this.parent.legend.show(); }\n                this.parent.layout.axes[legend_axis] = { render: false };\n                this.parent.render();\n            }\n        }\n        return this;\n    };\n\n    // Method to not only toggle the split tracks boolean but also update\n    // necessary display values to animate a complete merge/split\n    this.toggleSplitTracks = function(){\n        this.layout.split_tracks = !this.layout.split_tracks;\n        if (this.parent.legend && !this.layout.always_hide_legend){\n            this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);\n        }\n        this.render();\n        this.updateSplitTrackAxis();\n        return this;\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    /** @member {Object} */\n    this.DefaultLayout = {\n        style: {\n            fill: \"none\",\n            \"stroke-width\": \"2px\"\n        },\n        interpolate: \"linear\",\n        x_axis: { field: \"x\" },\n        y_axis: { field: \"y\", axis: 1 },\n        hitarea_width: 5\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Var for storing mouse events for use in tool tip positioning\n    /** @member {String} */\n    this.mouse_event = null;\n\n    /**\n     * Var for storing the generated line function itself\n     * @member {d3.svg.line}\n     * */\n    this.line = null;\n\n    /**\n     * The timeout identifier returned by setTimeout\n     * @member {Number}\n     */\n    this.tooltip_timeout = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n\n    /**\n     * Helper function to get display and data objects representing\n     *   the x/y coordinates of the current mouse event with respect to the line in terms of the display\n     *   and the interpolated values of the x/y fields with respect to the line\n     * @returns {{display: {x: *, y: null}, data: {}, slope: null}}\n     */\n    this.getMouseDisplayAndData = function(){\n        var ret = {\n            display: {\n                x: d3.mouse(this.mouse_event)[0],\n                y: null\n            },\n            data: {},\n            slope: null\n        };\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        ret.data[x_field] = this.parent[x_scale].invert(ret.display.x);\n        var bisect = d3.bisector(function(datum) { return +datum[x_field]; }).left;\n        var index = bisect(this.data, ret.data[x_field]) - 1;\n        var startDatum = this.data[index];\n        var endDatum = this.data[index + 1];\n        var interpolate = d3.interpolateNumber(+startDatum[y_field], +endDatum[y_field]);\n        var range = +endDatum[x_field] - +startDatum[x_field];\n        ret.data[y_field] = interpolate((ret.data[x_field] % range) / range);\n        ret.display.y = this.parent[y_scale](ret.data[y_field]);\n        if (this.layout.tooltip.x_precision){\n            ret.data[x_field] = ret.data[x_field].toPrecision(this.layout.tooltip.x_precision);\n        }\n        if (this.layout.tooltip.y_precision){\n            ret.data[y_field] = ret.data[y_field].toPrecision(this.layout.tooltip.y_precision);\n        }\n        ret.slope = (this.parent[y_scale](endDatum[y_field]) - this.parent[y_scale](startDatum[y_field]))\n                  / (this.parent[x_scale](endDatum[x_field]) - this.parent[x_scale](startDatum[x_field]));\n        return ret;\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be line-specific\n     * @param {String} id Identify the tooltip to be positioned\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var arrow_width = 7; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var stroke_width = parseFloat(this.layout.style[\"stroke-width\"]) || 1;\n        var page_origin = this.getPageOrigin();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        var top, left, arrow_top, arrow_left, arrow_type;\n\n        // Determine x/y coordinates for display and data\n        var dd = this.getMouseDisplayAndData();\n\n        // If the absolute value of the slope of the line at this point is above 1 (including Infinity)\n        // then position the tool tip left/right. Otherwise position top/bottom.\n        if (Math.abs(dd.slope) > 1){\n\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (dd.display.x <= this.parent.layout.width / 2){\n                left = page_origin.x + dd.display.x + stroke_width + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + dd.display.x - tooltip_box.width - stroke_width - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            if (dd.display.y - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + dd.display.y - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (dd.display.y + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + dd.display.y + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + dd.display.y - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n\n        } else {\n\n            // Position horizontally: attempt to center on the mouse's x coordinate\n            // pad to either side if bumping up against the edge of the data layer\n            var offset_right = Math.max((tooltip_box.width / 2) - dd.display.x, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + dd.display.x - data_layer_width, 0);\n            left = page_origin.x + dd.display.x - (tooltip_box.width / 2) - offset_left + offset_right;\n            var min_arrow_left = arrow_width / 2;\n            var max_arrow_left = tooltip_box.width - (2.5 * arrow_width);\n            arrow_left = (tooltip_box.width / 2) - arrow_width + offset_left - offset_right;\n            arrow_left = Math.min(Math.max(arrow_left, min_arrow_left), max_arrow_left);\n\n            // Position vertically above the line unless there's insufficient space\n            if (tooltip_box.height + stroke_width + arrow_width > dd.display.y){\n                top = page_origin.y + dd.display.y + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            } else {\n                top = page_origin.y + dd.display.y - (tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            }\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style({ left: left + \"px\", top: top + \"px\" });\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style({ \"left\": arrow_left + \"px\", top: arrow_top + \"px\" });\n\n    };\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var data_layer = this;\n        var panel = this.parent;\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n            .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n            .interpolate(this.layout.interpolate);\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Apply tooltip, etc\n        if (this.layout.tooltip){\n            // Generate an overlaying transparent \"hit area\" line for more intuitive mouse events\n            var hitarea_width = parseFloat(this.layout.hitarea_width).toString() + \"px\";\n            var hitarea = this.svg.group\n                .selectAll(\"path.lz-data_layer-line-hitarea\")\n                .data([this.data]);\n            hitarea.enter()\n                .append(\"path\")\n                .attr(\"class\", \"lz-data_layer-line-hitarea\")\n                .style(\"stroke-width\", hitarea_width);\n            var hitarea_line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n            hitarea\n                .attr(\"d\", hitarea_line)\n                .on(\"mouseover\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.createTooltip(dd.data);\n                })\n                .on(\"mousemove\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.updateTooltip(dd.data);\n                    data_layer.positionTooltip(data_layer.getElementId());\n                })\n                .on(\"mouseout\", function(){\n                    data_layer.tooltip_timeout = setTimeout(function(){\n                        data_layer.mouse_event = null;\n                        data_layer.destroyTooltip(data_layer.getElementId());\n                    }, 300);\n                });\n            hitarea.exit().remove();\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.setElementStatus = function(status, element, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setElementStatusByFilters = function(status, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setAllElementStatus = function(status, toggle){\n        // Sanity check\n        if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n            throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n        }\n        if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n        if (typeof toggle == \"undefined\"){ toggle = true; }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        var path_class = \"lz-data_layer-line\";\n        Object.keys(this.global_statuses).forEach(function(global_status){\n            if (this.global_statuses[global_status]){ path_class += \" lz-data_layer-line-\" + global_status; }\n        }.bind(this));\n        this.path.attr(\"class\", path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit(\"layout_changed\", true);\n        return this;\n    };\n\n    return this;\n\n});\n\n\n/***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"orthogonal_line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        style: {\n            \"stroke\": \"#D3D3D3\",\n            \"stroke-width\": \"3px\",\n            \"stroke-dasharray\": \"10px 10px\"\n        },\n        orientation: \"horizontal\",\n        x_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        y_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        offset: 0\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Require that orientation be \"horizontal\" or \"vertical\" only\n    if ([\"horizontal\",\"vertical\"].indexOf(layout.orientation) === -1){\n        layout.orientation = \"horizontal\";\n    }\n\n    // Vars for storing the data generated line\n    /** @member {Array} */\n    this.data = [];\n    /** @member {d3.svg.line} */\n    this.line = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var panel = this.parent;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        var x_extent = \"x_extent\";\n        var y_extent = \"y\" + this.layout.y_axis.axis + \"_extent\";\n        var x_range = \"x_range\";\n        var y_range = \"y\" + this.layout.y_axis.axis + \"_range\";\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === \"horizontal\"){\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset }\n            ];\n        } else {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] }\n            ];\n        }\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d, i) {\n                var x = parseFloat(panel[x_scale](d[\"x\"]));\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y(function(d, i) {\n                var y = parseFloat(panel[y_scale](d[\"y\"]));\n                return isNaN(y) ? panel[y_range][i] : y;\n            })\n            .interpolate(\"linear\");\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n  Scatter Data Layer\n  Implements a standard scatter plot\n*/\n\nLocusZoom.DataLayers.add(\"scatter\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"circle\",\n        tooltip_positioning: \"horizontal\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 1\n        },\n        id_field: \"id\"\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Extra default for layout spacing\n    // Not in default layout since that would make the label attribute always present\n    if (layout.label && isNaN(layout.label.spacing)){\n        layout.label.spacing = 4;\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be scatter-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var offset = Math.sqrt(point_size / Math.PI);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        if (this.layout.tooltip_positioning === \"vertical\"){\n            // Position horizontally centered above the point\n            var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right - offset;\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (y_center + offset)){\n                top = page_origin.y + y_center - (offset + tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                top = page_origin.y + y_center + offset + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            }\n        } else {\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (x_center <= this.parent.layout.width / 2){\n                left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n            if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    this.flip_labels = function(){\n        var data_layer = this;\n        var point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        var spacing = data_layer.layout.label.spacing;\n        var handle_lines = Boolean(data_layer.layout.label.lines);\n        var min_x = 2 * spacing;\n        var max_x = data_layer.parent.layout.width - data_layer.parent.layout.margin.left - data_layer.parent.layout.margin.right - (2 * spacing);\n        var flip = function(dn, dnl){\n            var dnx = +dn.attr(\"x\");\n            var text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            if (handle_lines){\n                var dnlx2 = +dnl.attr(\"x2\");\n                var line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style(\"text-anchor\") === \"start\"){\n                dn.style(\"text-anchor\", \"end\");\n                dn.attr(\"x\", dnx - text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 - line_swing); }\n            } else {\n                dn.style(\"text-anchor\", \"start\");\n                dn.attr(\"x\", dnx + text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 + line_swing); }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x){\n                var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            if (da.style(\"text-anchor\") === \"end\") return;\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n            data_layer.label_texts.each(function () {\n                var b = this;\n                var db = d3.select(b);\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (collision){\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr(\"x\");\n                    if (dax - abound.width - spacing < min_x){\n                        flip(da, dal);\n                    }\n                }\n                return;\n            });\n        });\n    };\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    this.separate_labels = function(){\n        this.seperate_iterations++;\n        var data_layer = this;\n        var alpha = 0.5;\n        var spacing = this.layout.label.spacing;\n        var again = false;\n        data_layer.label_texts.each(function () {\n            var a = this;\n            var da = d3.select(a);\n            var y1 = da.attr(\"y\");\n            data_layer.label_texts.each(function () {\n                var b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) return;\n                var db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr(\"text-anchor\") !== db.attr(\"text-anchor\")) return;\n                // Determine if the  bounding rects for the two text elements collide\n                var abound = da.node().getBoundingClientRect();\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (!collision) return;\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                var y2 = db.attr(\"y\");\n                var sign = abound.top < bbound.top ? 1 : -1;\n                var adjust = sign * alpha;\n                var new_a_y = +y1 - adjust;\n                var new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                var min_y = 2 * spacing;\n                var max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                var delta;\n                if (new_a_y - (abound.height/2) < min_y){\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height/2) < min_y){\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height/2) > max_y){\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height/2) > max_y){\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr(\"y\",new_a_y);\n                db.attr(\"y\",new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines){\n                var label_elements = data_layer.label_texts[0];\n                data_layer.label_lines.attr(\"y2\",function(d,i) {\n                    var label_line = d3.select(label_elements[i]);\n                    return label_line.attr(\"y\");\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150){\n                setTimeout(function(){\n                    this.separate_labels();\n                }.bind(this), 1);\n            }\n        }\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var data_layer = this;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate labels first (if defined)\n        if (this.layout.label){\n            // Apply filters to generate a filtered data set\n            var filtered_data = this.data.filter(function(d){\n                if (!data_layer.layout.label.filters){\n                    return true;\n                } else {\n                    // Start by assuming a match, run through all filters to test if not a match on any one\n                    var match = true;\n                    data_layer.layout.label.filters.forEach(function(filter){\n                        var field_value = (new LocusZoom.Data.Field(filter.field)).resolve(d);\n                        if (isNaN(field_value)){\n                            match = false;\n                        } else {\n                            switch (filter.operator){\n                            case \"<\":\n                                if (!(field_value < filter.value)){ match = false; }\n                                break;\n                            case \"<=\":\n                                if (!(field_value <= filter.value)){ match = false; }\n                                break;\n                            case \">\":\n                                if (!(field_value > filter.value)){ match = false; }\n                                break;\n                            case \">=\":\n                                if (!(field_value >= filter.value)){ match = false; }\n                                break;\n                            case \"=\":\n                                if (!(field_value === filter.value)){ match = false; }\n                                break;\n                            default:\n                                // If we got here the operator is not valid, so the filter should fail\n                                match = false;\n                                break;\n                            }\n                        }\n                    });\n                    return match;\n                }\n            });\n            // Render label groups\n            var self = this;\n            this.label_groups = this.svg.group\n                .selectAll(\"g.lz-data_layer-\" + this.layout.type + \"-label\")\n                .data(filtered_data, function(d){ return d[self.layout.id_field]  + \"_label\"; });\n            this.label_groups.enter()\n                .append(\"g\")\n                .attr(\"class\", \"lz-data_layer-\"+ this.layout.type + \"-label\");\n            // Render label texts\n            if (this.label_texts){ this.label_texts.remove(); }\n            this.label_texts = this.label_groups.append(\"text\")\n                .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n            this.label_texts\n                .text(function(d){\n                    return LocusZoom.parseFields(d, data_layer.layout.label.text || \"\");\n                })\n                .style(data_layer.layout.label.style || {})\n                .attr({\n                    \"x\": function(d){\n                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                              + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                              + data_layer.layout.label.spacing;\n                        if (isNaN(x)){ x = -1000; }\n                        return x;\n                    },\n                    \"y\": function(d){\n                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)){ y = -1000; }\n                        return y;\n                    },\n                    \"text-anchor\": function(){\n                        return \"start\";\n                    }\n                });\n            // Render label lines\n            if (data_layer.layout.label.lines){\n                if (this.label_lines){ this.label_lines.remove(); }\n                this.label_lines = this.label_groups.append(\"line\")\n                    .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n                this.label_lines\n                    .style(data_layer.layout.label.lines.style || {})\n                    .attr({\n                        \"x1\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y1\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        },\n                        \"x2\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                                  + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                                  + (data_layer.layout.label.spacing/2);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y2\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        }\n                    });\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit().remove();\n        }\n            \n        // Generate main scatter data elements\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-\" + this.layout.type)\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Apply default event emitters to selection\n        selection.on(\"click.event_emitter\", function(element){\n            this.parent.emit(\"element_clicked\", element, true);\n        }.bind(this));\n       \n        // Apply mouse behaviors\n        this.applyBehaviors(selection);\n        \n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label){\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n            // Apply default event emitters to selection\n            this.label_texts.on(\"click.event_emitter\", function(element){\n                this.parent.emit(\"element_clicked\", element, true);\n            }.bind(this));\n            // Extend mouse behaviors to labels\n            this.applyBehaviors(this.label_texts);\n        }\n        \n    };\n\n    // Method to set a passed element as the LD reference in the plot-level state\n    this.makeLDReference = function(element){\n        var ref = null;\n        if (typeof element == \"undefined\"){\n            throw(\"makeLDReference requires one argument of any type\");\n        } else if (typeof element == \"object\"){\n            if (this.layout.id_field && typeof element[this.layout.id_field] != \"undefined\"){\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element[\"id\"] != \"undefined\"){\n                ref = element[\"id\"].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent_plot.applyState({ ldrefvar: ref });\n    };\n \n    return this;\n\n});\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n * @class LocusZoom.DataLayers.category_scatter\n * @augments LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.extend(\"scatter\", \"category_scatter\", {\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData: function() {\n        var xField = this.layout.x_axis.field || \"x\";\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw \"Layout for \" + this.layout.id + \" must specify category_field\";\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        var sourceData = this.data\n            .sort(function(a, b) {\n                var ak = a[category_field];\n                var bk = b[category_field];\n                var av = ak.toString ? ak.toString().toLowerCase() : ak;\n                var bv = bk.toString ? bk.toString().toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);});\n        sourceData.forEach(function(d, i){\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    },\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds: function() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        var xField = this.layout.x_axis.field || \"x\";\n        var uniqueCategories = {};\n        this.data.forEach(function(item) {\n            var category = item[category_field];\n            var x = item[xField];\n            var bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        var categoryNames = Object.keys(uniqueCategories);\n        this._setDynamicColorScheme(categoryNames);\n\n        return uniqueCategories;\n    },\n\n    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n    _setDynamicColorScheme: function(categoryNames) {\n        var colorParams = this.layout.color.parameters;\n        var baseParams = this._base_layout.color.parameters;\n\n        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n        if (this.layout.color.scale_function !== \"categorical_bin\") {\n            throw \"This layer requires that coloring be specified as a `categorical_bin`\";\n        }\n\n        if (baseParams.categories.length && baseParams.values.length) {\n            // If there are preset category/color combos, make sure that they apply to the actual dataset\n            var parameters_categories_hash = {};\n            baseParams.categories.forEach(function (category) { parameters_categories_hash[category] = 1; });\n            if (categoryNames.every(function (name) { return parameters_categories_hash.hasOwnProperty(name); })) {\n                // The layout doesn't have to specify categories in order, but make sure they are all there\n                colorParams.categories = baseParams.categories;\n            } else {\n                colorParams.categories = categoryNames;\n            }\n        } else {\n            colorParams.categories = categoryNames;\n        }\n        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n        var colors;\n        if (baseParams.values.length) {\n            colors = baseParams.values;\n        } else {\n            var color_scale = categoryNames.length <= 10 ? d3.scale.category10 : d3.scale.category20;\n            colors = color_scale().range();\n        }\n        while (colors.length < categoryNames.length) { colors = colors.concat(colors); }\n        colors = colors.slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n        colorParams.values = colors;\n    },\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks: function(dimension, config) { // Overrides parent method\n        if ([\"x\", \"y\"].indexOf(dimension) === -1) {\n            throw \"Invalid dimension identifier\";\n        }\n        var position = config.position || \"left\";\n        if ([\"left\", \"center\", \"right\"].indexOf(position) === -1) {\n            throw \"Invalid tick position\";\n        }\n\n        var categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === \"y\") {\n            return [];\n        }\n\n        if (dimension === \"x\") {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            var knownCategories = this.layout.color.parameters.categories || [];\n            var knownColors = this.layout.color.parameters.values || [];\n\n            return Object.keys(categoryBounds).map(function (category, index) {\n                var bounds = categoryBounds[category];\n                var xPos;\n\n                switch(position) {\n                case \"left\":\n                    xPos = bounds[0];\n                    break;\n                case \"center\":\n                    // Center tick under one or many elements as appropriate\n                    var diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case \"right\":\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        \"fill\": knownColors[knownCategories.indexOf(category)] || \"#000000\"\n                    }\n                };\n            });\n        }\n    },\n\n    applyCustomDataMethods: function() {\n        this.data = this._prepareData();\n        /**\n         * Define category names and extents (boundaries) for plotting.  TODO: properties in constructor\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n *\n * LocusZoom has various singleton objects that are used for registering functions or classes.\n * These objects provide safe, standard methods to redefine or delete existing functions/classes\n * as well as define new custom functions/classes to be used in a plot.\n *\n * @namespace Singletons\n */\n\n\n/*\n * The Collection of \"Known\" Data Sources. This registry is used internally by the `DataSources` class\n * @class\n * @static\n */\nLocusZoom.KnownDataSources = (function() {\n    /** @lends LocusZoom.KnownDataSources */\n    var obj = {};\n    /* @member {function[]} */\n    var sources = [];\n\n    var findSourceByName = function(x) {\n        for(var i=0; i<sources.length; i++) {\n            if (!sources[i].SOURCE_NAME) {\n                throw(\"KnownDataSources at position \" + i + \" does not have a 'SOURCE_NAME' static property\");\n            }\n            if (sources[i].SOURCE_NAME === x) {\n                return sources[i];\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Identify the datasource associated with a given name\n     * @param {String} name\n     * @returns {function} The constructor for the data source; will usually extend `Data.Source`\n     */\n    obj.get = function(name) {\n        return findSourceByName(name);\n    };\n\n    /**\n     * Register a data source constructor so that it may be located by name\n     * @param {function} source A constructor function for a data source; will usually extend `Data.Source`,\n     *   and should have a `SOURCE_NAME` property\n     */\n    obj.add = function(source) {\n        if (!source.SOURCE_NAME) {\n            console.warn(\"Data source added does not have a SOURCE_NAME\");\n        }\n        sources.push(source);\n    };\n\n    /**\n     * Create a custom source type that extends the behavior of an existing source, and registers that\n     *  source by the provided name\n     * @param {String} parent_name The name of a previously registered data source type to use as a template\n     * @param {String} source_name The new name to use when registering this data source\n     * @param {Object} overrides An object of additional properties and methods to add/override behavior\n     * @returns {LocusZoom.Data.Source} The newly defined class for this source\n     */\n    obj.extend = function(parent_name, source_name, overrides) {\n        var parent = findSourceByName(parent_name);\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered data source\";\n        }\n        if (!source_name) {\n            throw \"Must provide a name for the new data source\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        child.SOURCE_NAME = source_name;\n        sources.push(child);\n        return child;\n    };\n\n    /** @deprecated */\n    obj.push = function(source) {\n        console.warn(\"Warning: KnownDataSources.push() is deprecated. Use .add() instead\");\n        obj.add(source);\n    };\n\n    /**\n     * List the names of all registered datasources\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return sources.map(function(x) {return x.SOURCE_NAME;});\n    };\n\n    /**\n     * Create a datasource instance\n     * @param {String} name The name of the desired datasource to instantiate (must be defined in the registry)\n     * @returns {LocusZoom.Data.Source}\n     */\n    obj.create = function(name) {\n        //create new object (pass additional parameters to constructor)\n        var newObj = findSourceByName(name);\n        if (newObj) {\n            var params = arguments;\n            params[0] = null;\n            return new (Function.prototype.bind.apply(newObj, params));\n        } else {\n            throw(\"Unable to find data source for name: \" + name); \n        }\n    };\n\n    /**\n     * Get the array of all registered constructors\n     *   Generally only used for unit tests internally\n     * @private\n     * @returns {function[]}\n     */\n    obj.getAll = function() {\n        return sources;\n    };\n\n    /**\n     * Register an entire collection of data sources\n     *   Generally only used for unit tests internally\n     * @private\n     * @param {function[]} x An array of datasource constructors\n     */\n    obj.setAll = function(x) {\n        sources = x;\n    };\n\n    /**\n     * Unregister all known data sources\n     *   Generally only used for unit tests internally\n     * @private\n     */\n    obj.clear = function() {\n        sources = [];\n    };\n\n    return obj;\n})();\n\n/**************************\n * Transformation Functions\n *\n * Singleton for formatting or transforming a single input, for instance turning raw p values into negative log10 form\n * Transformation functions are chainable with a pipe on a field name, like so: \"pvalue|neglog10\"\n *\n * NOTE: Because these functions are chainable the FUNCTION is returned by get(), not the result of that function.\n *\n * All transformation functions must accept an object of parameters and a value to process.\n * @class\n */\nLocusZoom.TransformationFunctions = (function() {\n    /** @lends LocusZoom.TransformationFunctions */\n    var obj = {};\n    var transformations = {};\n\n    var getTrans = function(name) {\n        if (!name) {\n            return null;\n        }\n        var fun = transformations[name];\n        if (fun)  {\n            return fun;\n        } else {\n            throw(\"transformation \" + name + \" not found\");\n        }\n    };\n\n    //a single transformation with any parameters\n    //(parameters not currently supported)\n    var parseTrans = function(name) {\n        return getTrans(name);\n    };\n\n    //a \"raw\" transformation string with a leading pipe\n    //and one or more transformations\n    var parseTransString = function(x) {\n        var funs = [];\n        var re = /\\|([^|]+)/g;\n        var result;\n        while((result = re.exec(x))!==null) {\n            funs.push(result[1]);\n        }\n        if (funs.length===1) {\n            return parseTrans(funs[0]);\n        } else if (funs.length > 1) {\n            return function(x) {\n                var val = x;\n                for(var i = 0; i<funs.length; i++) {\n                    val = parseTrans(funs[i])(val);\n                }\n                return val;\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Retrieve a transformation function by name\n     * @param {String} name The name of the transformation function to retrieve. May optionally be prefixed with a\n     *   pipe (`|`) when chaining multiple transformation functions.\n     * @returns {function} The constructor for the transformation function\n     */\n    obj.get = function(name) {\n        if (name && name.substring(0,1)===\"|\") {\n            return parseTransString(name);\n        } else {\n            return parseTrans(name);\n        }\n    };\n    /**\n     * Internal logic that registers a transformation function\n     * @protected\n     * @param {String} name\n     * @param {function} fn\n     */\n    obj.set = function(name, fn) {\n        if (name.substring(0,1)===\"|\") {\n            throw(\"transformation name should not start with a pipe\");\n        } else {\n            if (fn) {\n                transformations[name] = fn;\n            } else {\n                delete transformations[name];\n            }\n        }\n    };\n\n    /**\n     * Register a transformation function\n     * @param {String} name\n     * @param {function} fn A transformation function (should accept one argument with the value)\n     */\n    obj.add = function(name, fn) {\n        if (transformations[name]) {\n            throw(\"transformation already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n    /**\n     * List the names of all registered transformation functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(transformations);\n    };\n\n    return obj;\n})();\n\n/**\n * Return the -log (base 10)\n * @function neglog10\n */\nLocusZoom.TransformationFunctions.add(\"neglog10\", function(x) {\n    if (isNaN(x) || x <= 0){ return null; }\n    return -Math.log(x) / Math.LN10;\n});\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\nLocusZoom.TransformationFunctions.add(\"logtoscinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"1\"; }\n    var exp = Math.ceil(x);\n    var diff = exp - x;\n    var base = Math.pow(10, diff);\n    if (exp === 1){\n        return (base / 10).toFixed(4);\n    } else if (exp === 2){\n        return (base / 100).toFixed(3);\n    } else {\n        return base.toFixed(2) + \" × 10^-\" + exp;\n    }\n});\n\n/**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} x\n * @returns {String}\n */\nLocusZoom.TransformationFunctions.add(\"scinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"0\"; }\n\n    var abs = Math.abs(x);\n    var log;\n    if (abs > 1) {\n        log = Math.ceil(Math.log(abs) / Math.LN10);\n    } else {  // 0...1\n        log = Math.floor(Math.log(abs) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3){\n        return x.toFixed(3);\n    } else {\n        return x.toExponential(2).replace(\"+\", \"\").replace(\"e\", \" × 10^\");\n    }\n});\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} str\n */\nLocusZoom.TransformationFunctions.add(\"urlencode\", function(str) {\n    return encodeURIComponent(str);\n});\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} str HTML-escape the provided value\n */\nLocusZoom.TransformationFunctions.add(\"htmlescape\", function(str) {\n    if ( !str ) {\n        return \"\";\n    }\n    str = str + \"\";\n\n    return str.replace( /['\"<>&`]/g, function( s ) {\n        switch ( s ) {\n        case \"'\":\n            return \"&#039;\";\n        case \"\\\"\":\n            return \"&quot;\";\n        case \"<\":\n            return \"&lt;\";\n        case \">\":\n            return \"&gt;\";\n        case \"&\":\n            return \"&amp;\";\n        case \"`\":\n            return \"&#x60;\";\n        }\n    });\n});\n\n/**\n * Singleton for accessing/storing functions that will convert arbitrary data points to values in a given scale\n * Useful for anything that needs to scale discretely with data (e.g. color, point size, etc.)\n *\n * A Scale Function can be thought of as a modifier to a layout directive that adds extra logic to how a piece of data\n *   can be resolved to a value.\n *\n * All scale functions must accept an object of parameters and a value to process.\n * @class\n * @static\n */\nLocusZoom.ScaleFunctions = (function() {\n    /** @lends LocusZoom.ScaleFunctions */\n    var obj = {};\n    var functions = {};\n\n    /**\n     * Find a scale function and return it. If parameters and values are passed, calls the function directly; otherwise\n     *   returns a callable.\n     * @param {String} name\n     * @param {Object} [parameters] Configuration parameters specific to the specified scale function\n     * @param {*} [value] The value to operate on\n     * @returns {*}\n     */\n    obj.get = function(name, parameters, value) {\n        if (!name) {\n            return null;\n        } else if (functions[name]) {\n            if (typeof parameters === \"undefined\" && typeof value === \"undefined\"){\n                return functions[name];\n            } else {\n                return functions[name](parameters, value);\n            }\n        } else {\n            throw(\"scale function [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @protected\n     * @param {String} name The name of the function to set/unset\n     * @param {Function} [fn] The function to register. If blank, removes this function name from the registry.\n     */\n    obj.set = function(name, fn) {\n        if (fn) {\n            functions[name] = fn;\n        } else {\n            delete functions[name];\n        }\n    };\n\n    /**\n     * Add a new scale function to the registry\n     * @param {String} name The name of the scale function\n     * @param {function} fn A scale function that accepts two parameters: an object of configuration and a value\n     */\n    obj.add = function(name, fn) {\n        if (functions[name]) {\n            throw(\"scale function already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n\n    /**\n     * List the names of all registered scale functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(functions);\n    };\n\n    return obj;\n})();\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nLocusZoom.ScaleFunctions.add(\"if\", function(parameters, input){\n    if (typeof input == \"undefined\" || parameters.field_value !== input){\n        if (typeof parameters.else != \"undefined\"){\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n});\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} null_value\n * @param {*} input value\n * @returns\n */\nLocusZoom.ScaleFunctions.add(\"numerical_bin\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    var threshold = breaks.reduce(function(prev, curr){\n        if (+input < prev || (+input >= prev && +input < curr)){\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n});\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nLocusZoom.ScaleFunctions.add(\"categorical_bin\", function(parameters, value){\n    if (typeof value == \"undefined\" || parameters.categories.indexOf(value) === -1){\n        return (parameters.null_value ? parameters.null_value : null); \n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n});\n\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nLocusZoom.ScaleFunctions.add(\"interpolate\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length){ return nullval; }\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){ return nullval; }\n    if (+input <= parameters.breaks[0]){\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length-1]){\n        return values[breaks.length-1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function(brk, idx){\n            if (!idx){ return; }\n            if (breaks[idx-1] <= +input && breaks[idx] >= +input){ upper_idx = idx; }\n        });\n        if (upper_idx === null){ return nullval; }\n        var normalized_input = (+input - breaks[upper_idx-1]) / (breaks[upper_idx] - breaks[upper_idx-1]);\n        if (!isFinite(normalized_input)){ return nullval; }\n        return d3.interpolate(values[upper_idx-1], values[upper_idx])(normalized_input);\n    }\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A Dashboard is an HTML element used for presenting arbitrary user interface components. Dashboards are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each dashboard is an HTML-based (read: not SVG) collection of components used to display information or provide\n *   user interface. Dashboards can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n * @class\n */\nLocusZoom.Dashboard = function(parent){\n    // parent must be a locuszoom plot or panel\n    if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create dashboard, parent must be a locuszoom plot or panel\";\n    }\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".dashboard\";\n    /** @member {('plot'|'panel')} */\n    this.type = (this.parent instanceof LocusZoom.Plot) ? \"plot\" : \"panel\";\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = this.type === \"plot\" ? this.parent : this.parent.parent;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {LocusZoom.Dashboard.Component[]} */\n    this.components = [];\n    /**\n     * The timer identifier as returned by setTimeout\n     * @member {Number}\n     */\n    this.hide_timeout = null;\n    /**\n     * Whether to hide the dashboard. Can be overridden by a child component. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n\n    // TODO: Return value from constructor function?\n    return this.initialize();\n};\n\n/**\n * Prepare the dashboard for first use: generate all component instances for this dashboard, based on the provided\n *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.initialize = function() {\n    // Parse layout to generate component instances\n    if (Array.isArray(this.parent.layout.dashboard.components)){\n        this.parent.layout.dashboard.components.forEach(function(layout){\n            try {\n                var component = LocusZoom.Dashboard.Components.get(layout.type, layout, this);\n                this.components.push(component);\n            } catch (e) {\n                console.warn(e);\n            }\n        }.bind(this));\n    }\n\n    // Add mouseover event handlers to show/hide panel dashboard\n    if (this.type === \"panel\"){\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseover.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            if (!this.selector || this.selector.style(\"visibility\") === \"hidden\"){ this.show(); }\n        }.bind(this));\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseout.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            this.hide_timeout = setTimeout(function(){ this.hide(); }.bind(this), 300);\n        }.bind(this));\n    }\n\n    return this;\n\n};\n\n/**\n * Whether to persist the dashboard. Returns true if at least one component should persist, or if the panel is engaged\n *   in an active drag event.\n * @returns {boolean}\n */\nLocusZoom.Dashboard.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    var persist = false;\n    // Persist if at least one component should also persist\n    this.components.forEach(function(component){\n        persist = persist || component.shouldPersist();\n    });\n    // Persist if in a parent drag event\n    persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n    return !!persist;\n};\n\n/**\n * Make the dashboard appear. If it doesn't exist yet create it, including creating/positioning all components within,\n *   and make sure it is set to be visible.\n */\nLocusZoom.Dashboard.prototype.show = function(){\n    if (!this.selector){\n        switch (this.type){\n        case \"plot\":\n            this.selector = d3.select(this.parent.svg.node().parentNode)\n                .insert(\"div\",\":first-child\");\n            break;\n        case \"panel\":\n            this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                .insert(\"div\", \".lz-data_layer-tooltip, .lz-dashboard-menu, .lz-curtain\").classed(\"lz-panel-dashboard\", true);\n            break;\n        }\n        this.selector.classed(\"lz-dashboard\", true).classed(\"lz-\"+this.type+\"-dashboard\", true).attr(\"id\", this.id);\n    }\n    this.components.forEach(function(component){ component.show(); });\n    this.selector.style({ visibility: \"visible\" });\n    return this.update();\n};\n\n/**\n * Update the dashboard and rerender all child components. This can be called whenever plot state changes.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.update = function(){\n    if (!this.selector){ return this; }\n    this.components.forEach(function(component){ component.update(); });\n    return this.position();\n};\n\n/**\n * Position the dashboard (and child components) within the panel\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.position = function(){\n    if (!this.selector){ return this; }\n    // Position the dashboard itself (panel only)\n    if (this.type === \"panel\"){\n        var page_origin = this.parent.getPageOrigin();\n        var top = (page_origin.y + 3.5).toString() + \"px\";\n        var left = page_origin.x.toString() + \"px\";\n        var width = (this.parent.layout.width - 4).toString() + \"px\";\n        this.selector.style({ position: \"absolute\", top: top, left: left, width: width });\n    }\n    // Recursively position components\n    this.components.forEach(function(component){ component.position(); });\n    return this;\n};\n\n/**\n * Hide the dashboard (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n *\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    this.components.forEach(function(component){ component.hide(); });\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n\n/**\n * Completely remove dashboard and all child components. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    this.components.forEach(function(component){ component.destroy(true); });\n    this.components = [];\n    this.selector.remove();\n    this.selector = null;\n    return this;\n};\n\n/**\n *\n * A dashboard component is an empty div rendered on a dashboard that can display custom\n * html of user interface elements. LocusZoom.Dashboard.Components is a singleton used to\n * define and manage an extendable collection of dashboard components.\n * (e.g. by LocusZoom.Dashboard.Components.add())\n * @class\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the component left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot dashboard is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple'} [layout.color='gray']  Color scheme for the\n *   component. Applies to buttons and menus.\n * @param {LocusZoom.Dashboard} parent The dashboard that contains this component\n*/\nLocusZoom.Dashboard.Component = function(layout, parent) {\n    /** @member {Object} */\n    this.layout = layout || {};\n    if (!this.layout.color){ this.layout.color = \"gray\"; }\n\n    /** @member {LocusZoom.Dashboard|*} */\n    this.parent = parent || null;\n    /**\n     * Some dashboards are attached to a panel, rather than directly to a plot\n     * @member {LocusZoom.Panel|null}\n     */\n    this.parent_panel = null;\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    /**\n     * This is a reference to either the panel or the plot, depending on what the dashboard is\n     *   tied to. Useful when absolutely positioning dashboard components relative to their SVG anchor.\n     * @member {LocusZoom.Plot|LocusZoom.Panel}\n     */\n    this.parent_svg = null;\n    if (this.parent instanceof LocusZoom.Dashboard){\n        // TODO: when is the immediate parent *not* a dashboard?\n        if (this.parent.type === \"panel\"){\n            this.parent_panel = this.parent.parent;\n            this.parent_plot = this.parent.parent.parent;\n            this.parent_svg = this.parent_panel;\n        } else {\n            this.parent_plot = this.parent.parent;\n            this.parent_svg = this.parent_plot;\n        }\n    }\n    /** @member {d3.selection} */\n    this.selector = null;\n    /**\n     * If this is an interactive component, it will contain a button or menu instance that handles the interactivity.\n     *   There is a 1-to-1 relationship of dashboard component to button\n     * @member {null|LocusZoom.Dashboard.Component.Button}\n     */\n    this.button  = null;\n    /**\n     * If any single component is marked persistent, it will bubble up to prevent automatic hide behavior on a\n     *   component's parent dashboard. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    if (!this.layout.position){ this.layout.position = \"left\"; }\n\n    // TODO: Return value in constructor\n    return this;\n};\n/**\n * Perform all rendering of component, including toggling visibility to true. Will initialize and create SVG element\n *   if necessary, as well as updating with new data and performing layout actions.\n */\nLocusZoom.Dashboard.Component.prototype.show = function(){\n    if (!this.parent || !this.parent.selector){ return; }\n    if (!this.selector){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.layout.group_position) !== -1 ? \" lz-dashboard-group-\" + this.layout.group_position : \"\");\n        this.selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-\" + this.layout.position + group_position);\n        if (this.layout.style){ this.selector.style(this.layout.style); }\n        if (typeof this.initialize == \"function\"){ this.initialize(); }\n    }\n    if (this.button && this.button.status === \"highlighted\"){ this.button.menu.show(); }\n    this.selector.style({ visibility: \"visible\" });\n    this.update();\n    return this.position();\n};\n/**\n * Update the dashboard component with any new data or plot state as appropriate. This method performs all\n *  necessary rendering steps.\n */\nLocusZoom.Dashboard.Component.prototype.update = function(){ /* stub */ };\n/**\n * Place the component correctly in the plot\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.position = function(){\n    if (this.button){ this.button.menu.position(); }\n    return this;\n};\n/**\n * Determine whether the component should persist (will bubble up to parent dashboard)\n * @returns {boolean}\n */\nLocusZoom.Dashboard.Component.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    if (this.button && this.button.persist){ return true; }\n    return false;\n};\n/**\n * Toggle visibility to hidden, unless marked as persistent\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    if (this.button){ this.button.menu.hide(); }\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n/**\n * Completely remove component and button. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.Component.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    if (this.button && this.button.menu){ this.button.menu.destroy(); }\n    this.selector.remove();\n    this.selector = null;\n    this.button = null;\n    return this;\n};\n\n/**\n * Singleton registry of all known components\n * @class\n * @static\n */\nLocusZoom.Dashboard.Components = (function() {\n    /** @lends LocusZoom.Dashboard.Components */\n    var obj = {};\n    var components = {};\n\n    /**\n     * Create a new component instance by name\n     * @param {String} name The string identifier of the desired component\n     * @param {Object} layout The layout to use to create the component\n     * @param {LocusZoom.Dashboard} parent The containing dashboard to use when creating the component\n     * @returns {LocusZoom.Dashboard.Component}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (components[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for dashboard component [\" + name + \"]\");\n            } else {\n                return new components[name](layout, parent);\n            }\n        } else {\n            throw(\"dashboard component [\" + name + \"] not found\");\n        }\n    };\n    /**\n     * Add a new component constructor to the registry and ensure that it extends the correct parent class\n     * @protected\n     * @param name\n     * @param component\n     */\n    obj.set = function(name, component) {\n        if (component) {\n            if (typeof component != \"function\"){\n                throw(\"unable to set dashboard component [\" + name + \"], argument provided is not a function\");\n            } else {\n                components[name] = component;\n                components[name].prototype = new LocusZoom.Dashboard.Component();\n            }\n        } else {\n            delete components[name];\n        }\n    };\n\n    /**\n     * Register a new component constructor by name\n     * @param {String} name\n     * @param {function} component The component constructor\n     */\n    obj.add = function(name, component) {\n        if (components[name]) {\n            throw(\"dashboard component already exists with name: \" + name);\n        } else {\n            obj.set(name, component);\n        }\n    };\n\n    /**\n     * List the names of all registered components\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(components);\n    };\n\n    return obj;\n})();\n\n/**\n * Plots and panels may have a \"dashboard\" element suited for showing HTML components that may be interactive.\n *   When components need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @class\n * @param {LocusZoom.Dashboard.Component} parent\n */\nLocusZoom.Dashboard.Component.Button = function(parent) {   \n    \n    if (!(parent instanceof LocusZoom.Dashboard.Component)){\n        throw \"Unable to create dashboard component button, invalid parent\";\n    }\n    /** @member {LocusZoom.Dashboard.Component} */\n    this.parent = parent;\n    /** @member {LocusZoom.Dashboard.Panel} */\n    this.parent_panel = this.parent.parent_panel;\n    /** @member {LocusZoom.Dashboard.Plot} */\n    this.parent_plot = this.parent.parent_plot;\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent_svg = this.parent.parent_svg;\n\n    /** @member {LocusZoom.Dashboard|null|*} */\n    this.parent_dashboard = this.parent.parent;\n    /** @member {d3.selection} */\n    this.selector = null;\n\n    /**\n     * Tag to use for the button (default: a)\n     * @member {String}\n     */\n    this.tag = \"a\";\n\n    /**\n     * TODO This method does not appear to be used anywhere\n     * @param {String} tag\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTag = function(tag){\n        if (typeof tag != \"undefined\"){ this.tag = tag.toString(); }\n        return this;\n    };\n\n    /**\n     * HTML for the button to show.\n     * @protected\n     * @member {String}\n     */\n    this.html = \"\";\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setHtml = function(html){\n        if (typeof html != \"undefined\"){ this.html = html.toString(); }\n        return this;\n    };\n    /**\n     * @deprecated since 0.5.6; use setHTML instead\n     */\n    this.setText = this.setHTML;\n\n    /**\n     * Mouseover title text for the button to show\n     * @protected\n     * @member {String}\n     */\n    this.title = \"\";\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTitle = function(title){\n        if (typeof title != \"undefined\"){ this.title = title.toString(); }\n        return this;\n    };\n\n    /**\n     * Color of the button\n     * @member {String}\n     */\n    this.color = \"gray\";\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setColor = function(color){\n        if (typeof color != \"undefined\"){\n            if ([\"gray\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"].indexOf(color) !== -1){ this.color = color; }\n            else { this.color = \"gray\"; }\n        }\n        return this;\n    };\n\n    /**\n     * Hash of arbitrary button styles to apply as {name: value} entries\n     * @protected\n     * @member {Object}\n     */\n    this.style = {};\n    /**\n     * Set a collection of custom styles to be used by the button\n     * @param {Object} style Hash of {name:value} entries\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setStyle = function(style){\n        if (typeof style != \"undefined\"){ this.style = style; }\n        return this;\n    };\n\n    //\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    this.getClass = function(){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.parent.layout.group_position) !== -1 ? \" lz-dashboard-button-group-\" + this.parent.layout.group_position : \"\");\n        return \"lz-dashboard-button lz-dashboard-button-\" + this.color + (this.status ? \"-\" + this.status : \"\") + group_position;\n    };\n\n    // Permanence\n    /**\n     * Track internal state on whether to keep showing the button/ menu contents at the moment\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    /**\n     * Configuration when defining a button: track whether this component should be allowed to keep open\n     *   menu/button contents in response to certain events\n     * @protected\n     * @member {Boolean}\n     */\n    this.permanent = false;\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setPermanent = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        this.permanent = bool;\n        if (this.permanent){ this.persist = true; }\n        return this;\n    };\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    this.shouldPersist = function(){\n        return this.permanent || this.persist;\n    };\n\n    /**\n     * Button status (highlighted / disabled/ etc)\n     * @protected\n     * @member {String}\n     */\n    this.status = \"\";\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    this.setStatus = function(status){\n        if (typeof status != \"undefined\" && [\"\", \"highlighted\", \"disabled\"].indexOf(status) !== -1){ this.status = status; }\n        return this.update();\n    };\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.highlight = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"highlighted\"); }\n        else if (this.status === \"highlighted\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.disable = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"disabled\"); }\n        else if (this.status === \"disabled\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n\n    // Mouse events\n    /** @member {function} */\n    this.onmouseover = function(){};\n    this.setOnMouseover = function(onmouseover){\n        if (typeof onmouseover == \"function\"){ this.onmouseover = onmouseover; }\n        else { this.onmouseover = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onmouseout = function(){};\n    this.setOnMouseout = function(onmouseout){\n        if (typeof onmouseout == \"function\"){ this.onmouseout = onmouseout; }\n        else { this.onmouseout = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onclick = function(){};\n    this.setOnclick = function(onclick){\n        if (typeof onclick == \"function\"){ this.onclick = onclick; }\n        else { this.onclick = function(){}; }\n        return this;\n    };\n    \n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    this.show = function(){\n        if (!this.parent){ return; }\n        if (!this.selector){\n            this.selector = this.parent.selector.append(this.tag).attr(\"class\", this.getClass());\n        }\n        return this.update();\n    };\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.preUpdate = function(){ return this; };\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.update = function(){\n        if (!this.selector){ return this; }\n        this.preUpdate();\n        this.selector\n            .attr(\"class\", this.getClass())\n            .attr(\"title\", this.title).style(this.style)\n            .on(\"mouseover\", (this.status === \"disabled\") ? null : this.onmouseover)\n            .on(\"mouseout\", (this.status === \"disabled\") ? null : this.onmouseout)\n            .on(\"click\", (this.status === \"disabled\") ? null : this.onclick)\n            .html(this.html);\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    };\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.postUpdate = function(){ return this; };\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.hide = function(){\n        if (this.selector && !this.shouldPersist()){\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    };    \n\n    /**\n     * Button Menu Object\n     * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n     *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n     * @member {Object}\n     */\n    this.menu = {\n        outer_selector: null,\n        inner_selector: null,\n        scroll_position: 0,\n        hidden: true,\n        /**\n         * Show the button menu, including setting up any DOM elements needed for first rendering\n         */\n        show: function(){\n            if (!this.menu.outer_selector){\n                this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu lz-dashboard-menu-\" + this.color)\n                    .attr(\"id\", this.parent_svg.getBaseId() + \".dashboard.menu\");\n                this.menu.inner_selector = this.menu.outer_selector.append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu-content\");\n                this.menu.inner_selector.on(\"scroll\", function(){\n                    this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                }.bind(this));\n            }\n            this.menu.outer_selector.style({ visibility: \"visible\" });\n            this.menu.hidden = false;\n            return this.menu.update();\n        }.bind(this),\n        /**\n         * Update the rendering of the menu\n         */\n        update: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in component definition\n            if (this.menu.inner_selector){ this.menu.inner_selector.node().scrollTop = this.menu.scroll_position; }\n            return this.menu.position();\n        }.bind(this),\n        position: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n            this.menu.outer_selector.style({ height: null });\n            var padding = 3;\n            var scrollbar_padding = 20;\n            var menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n            var page_origin = this.parent_svg.getPageOrigin();\n            var page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n            var container_offset = this.parent_plot.getContainerOffset();\n            var dashboard_client_rect = this.parent_dashboard.selector.node().getBoundingClientRect();\n            var button_client_rect = this.selector.node().getBoundingClientRect();\n            var menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n            var total_content_height = this.menu.inner_selector.node().scrollHeight;\n            var top = 0; var left = 0;\n            if (this.parent_dashboard.type === \"panel\"){\n                top = (page_origin.y + dashboard_client_rect.height + (2 * padding));\n                left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n            } else {\n                top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n            }\n            var base_max_width = Math.max(this.parent_svg.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n            var container_max_width = base_max_width;\n            var content_max_width = (base_max_width - (4 * padding));\n            var base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n            var height = Math.min(total_content_height, base_max_height);\n            var max_height = base_max_height;\n            this.menu.outer_selector.style({\n                \"top\": top.toString() + \"px\",\n                \"left\": left.toString() + \"px\",\n                \"max-width\": container_max_width.toString() + \"px\",\n                \"max-height\": max_height.toString() + \"px\",\n                \"height\": height.toString() + \"px\"\n            });\n            this.menu.inner_selector.style({ \"max-width\": content_max_width.toString() + \"px\" });\n            this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n            return this.menu;\n        }.bind(this),\n        hide: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.outer_selector.style({ visibility: \"hidden\" });\n            this.menu.hidden = true;\n            return this.menu;\n        }.bind(this),\n        destroy: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.inner_selector.remove();\n            this.menu.outer_selector.remove();\n            this.menu.inner_selector = null;\n            this.menu.outer_selector = null;\n            return this.menu;\n        }.bind(this),\n        /**\n         * Internal method definition\n         * By convention populate() does nothing and should be reimplemented with each dashboard button definition\n         *   Reimplement by way of Dashboard.Component.Button.menu.setPopulate to define the populate method and hook\n         *   up standard menu click-toggle behavior prototype.\n         * @protected\n         */\n        populate: function(){ /* stub */ }.bind(this),\n        /**\n         * Define how the menu is populated with items, and set up click and display properties as appropriate\n         * @public\n         */\n        setPopulate: function(menu_populate_function){\n            if (typeof menu_populate_function == \"function\"){\n                this.menu.populate = menu_populate_function;\n                this.setOnclick(function(){\n                    if (this.menu.hidden){\n                        this.menu.show();\n                        this.highlight().update();\n                        this.persist = true;\n                    } else {\n                        this.menu.hide();\n                        this.highlight(false).update();\n                        if (!this.permanent){ this.persist = false; }\n                    }\n                }.bind(this));\n            } else {\n                this.setOnclick();\n            }\n            return this;\n        }.bind(this)\n    };\n\n};\n\n/**\n * Renders arbitrary text with title formatting\n * @class LocusZoom.Dashboard.Components.title\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\nLocusZoom.Dashboard.Components.add(\"title\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.show = function(){\n        this.div_selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-title lz-dashboard-\" + this.layout.position);\n        this.title_selector = this.div_selector.append(\"h3\");\n        return this.update();\n    };\n    this.update = function(){\n        var title = layout.title.toString();\n        if (this.layout.subtitle){ title += \" <small>\" + this.layout.subtitle + \"</small>\"; }\n        this.title_selector.html(title);\n        return this;\n    };\n});\n\n/**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n * @class LocusZoom.Dashboard.Components.dimensions\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"dimensions\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var display_width = this.parent_plot.layout.width.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n        var display_height = this.parent_plot.layout.height.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n        this.selector.html(display_width + \"px × \" + display_height + \"px\");\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n * @class LocusZoom.Dashboard.Components.region_scale\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"region_scale\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null){\n            this.selector.style(\"display\", null);\n            this.selector.html(LocusZoom.positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style(\"display\", \"none\");\n        }\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Button to export current plot to an SVG image\n * @class LocusZoom.Dashboard.Components.download\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"download\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Download Image\").setTitle(\"Download image of the current plot as locuszoom.svg\")\n            .setOnMouseover(function() {\n                this.button.selector\n                    .classed(\"lz-dashboard-button-gray-disabled\", true)\n                    .html(\"Preparing Image\");\n                this.generateBase64SVG().then(function(base64_string){\n                    this.button.selector\n                        .attr(\"href\", \"data:image/svg+xml;base64,\\n\" + base64_string)\n                        .classed(\"lz-dashboard-button-gray-disabled\", false)\n                        .classed(\"lz-dashboard-button-gray-highlighted\", true)\n                        .html(\"Download Image\");\n                }.bind(this));\n            }.bind(this))\n            .setOnMouseout(function() {\n                this.button.selector.classed(\"lz-dashboard-button-gray-highlighted\", false);\n            }.bind(this));\n        this.button.show();\n        this.button.selector.attr(\"href-lang\", \"image/svg+xml\").attr(\"download\", \"locuszoom.svg\");\n        return this;\n    };\n    this.css_string = \"\";\n    for (var stylesheet in Object.keys(document.styleSheets)){\n        if ( document.styleSheets[stylesheet].href !== null\n             && document.styleSheets[stylesheet].href.indexOf(\"locuszoom.css\") !== -1){\n            // TODO: \"Download image\" button will render the image incorrectly if the stylesheet has been renamed or concatenated\n            LocusZoom.createCORSPromise(\"GET\", document.styleSheets[stylesheet].href)\n                .then(function(response){\n                    this.css_string = response.replace(/[\\r\\n]/g,\" \").replace(/\\s+/g,\" \");\n                    if (this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\")){\n                        this.css_string = this.css_string.substring(0, this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\"));\n                    }\n                }.bind(this));\n            break;\n        }\n    } \n    this.generateBase64SVG = function(){\n        return Q.fcall(function () {\n            // Insert a hidden div, clone the node into that so we can modify it with d3\n            var container = this.parent.selector.append(\"div\").style(\"display\", \"none\")\n                .html(this.parent_plot.svg.node().outerHTML);\n            // Remove unnecessary elements\n            container.selectAll(\"g.lz-curtain\").remove();\n            container.selectAll(\"g.lz-mouse_guide\").remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            container.selectAll(\"g.tick text\").each(function(){\n                var dy = +(d3.select(this).attr(\"dy\").substring(-2).slice(0,-2))*10;\n                d3.select(this).attr(\"dy\", dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            var initial_html = d3.select(container.select(\"svg\").node().parentNode).html();\n            var style_def = \"<style type=\\\"text/css\\\"><![CDATA[ \" + this.css_string + \" ]]></style>\";\n            var insert_at = initial_html.indexOf(\">\") + 1;\n            initial_html = initial_html.slice(0,insert_at) + style_def + initial_html.slice(insert_at);\n            // Delete the container node\n            container.remove();\n            // Base64-encode the string and return it\n            return btoa(encodeURIComponent(initial_html).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n                return String.fromCharCode(\"0x\" + p1);\n            }));\n        }.bind(this));\n    };\n});\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.remove_panel\n * @augments LocusZoom.Dashboard.Component\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\nLocusZoom.Dashboard.Components.add(\"remove_panel\", function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"×\").setTitle(\"Remove panel\")\n            .setOnclick(function(){\n                if (!layout.suppress_confirm && !confirm(\"Are you sure you want to remove this panel? This cannot be undone!\")){\n                    return false;\n                }\n                var panel = this.parent_panel;\n                panel.dashboard.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseover.\" + panel.getBaseId() + \".dashboard\", null);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseout.\" + panel.getBaseId() + \".dashboard\", null);\n                return panel.parent.removePanel(panel.id);\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_up\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_up\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▴\").setTitle(\"Move panel up\")\n            .setOnclick(function(){\n                this.parent_panel.moveUp();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_down\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_down\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length-1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▾\").setTitle(\"Move panel down\")\n            .setOnclick(function(){\n                this.parent_panel.moveDown();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @class LocusZoom.Dashboard.Components.shift_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\nLocusZoom.Dashboard.Components.add(\"shift_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add shift_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 50000; }\n    if (typeof layout.button_html !== \"string\"){ layout.button_html = layout.step > 0 ? \">\" : \"<\"; }\n    if (typeof layout.button_title !== \"string\"){\n        layout.button_title = \"Shift region by \" + (layout.step > 0 ? \"+\" : \"-\") + LocusZoom.positionIntToString(Math.abs(layout.step),null,true);\n    }\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + layout.step, 1),\n                    end: this.parent_plot.state.end + layout.step\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @class LocusZoom.Dashboard.Components.zoom_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\nLocusZoom.Dashboard.Components.add(\"zoom_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add zoom_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 0.2; }\n    if (typeof layout.button_html != \"string\"){ layout.button_html = layout.step > 0 ? \"z–\" : \"z+\"; }\n    if (typeof layout.button_title != \"string\"){\n        layout.button_title = \"Zoom region \" + (layout.step > 0 ? \"out\" : \"in\") + \" by \" + (Math.abs(layout.step)*100).toFixed(1) + \"%\";\n    }\n    this.update = function(){\n        if (this.button){\n            var can_zoom = true;\n            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale){\n                can_zoom = false;\n            }\n            if (layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale){\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                var zoom_factor = 1 + layout.step;\n                var new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)){\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)){\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                var delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @class LocusZoom.Dashboard.Components.menu\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nLocusZoom.Dashboard.Components.add(\"menu\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title);\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(layout.menu_html);\n        }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n *   objects and store them in the special `model.covariates` field of plot `state`.\n * @class LocusZoom.Dashboard.Components.covariates_model\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n */\nLocusZoom.Dashboard.Components.add(\"covariates_model\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.initialize = function(){\n        // Initialize state.model.covariates\n        this.parent_plot.state.model = this.parent_plot.state.model || {};\n        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n        // Create an object at the plot level for easy access to interface methods in custom client-side JS\n        /**\n         * When a covariates model dashboard element is present, create (one) object at the plot level that exposes\n         *   component data and state for custom interactions with other plot elements.\n         * @class LocusZoom.Plot.CovariatesModel\n         */\n        this.parent_plot.CovariatesModel = {\n            /** @member {LocusZoom.Dashboard.Component.Button} */\n            button: this,\n            /**\n             * Add an element to the model and show a representation of it in the dashboard component menu. If the\n             *   element is already part of the model, do nothing (to avoid adding duplicates).\n             * When plot state is changed, this will automatically trigger requests for new data accordingly.\n             * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n             *   to create a serialized representation of itself.\n             */\n            add: function(element_reference){\n                var element = JSON.parse(JSON.stringify(element_reference));\n                if (typeof element_reference == \"object\" && typeof element.html != \"string\"){\n                    element.html = ( (typeof element_reference.toHTML == \"function\") ? element_reference.toHTML() : element_reference.toString());\n                }\n                // Check if the element is already in the model covariates array and return if it is.\n                for (var i = 0; i < this.state.model.covariates.length; i++) {\n                    if (JSON.stringify(this.state.model.covariates[i]) === JSON.stringify(element)) {\n                        return this;\n                    }\n                }\n                this.state.model.covariates.push(element);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Remove an element from `state.model.covariates` (and from the dashboard component menu's\n             *  representation of the state model). When plot state is changed, this will automatically trigger\n             *  requests for new data accordingly.\n             * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n             */\n            removeByIdx: function(idx){\n                if (typeof this.state.model.covariates[idx] == \"undefined\"){\n                    throw(\"Unable to remove model covariate, invalid index: \" + idx.toString());\n                }\n                this.state.model.covariates.splice(idx, 1);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Empty the `state.model.covariates` array (and dashboard component menu representation thereof) of all\n             *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n             */\n            removeAll: function(){\n                this.state.model.covariates = [];\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Manually trigger the update methods on the dashboard component's button and menu elements to force\n             *   display of most up-to-date content. Can be used to force the dashboard to reflect changes made, eg if\n             *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n             */\n            updateComponent: function(){\n                this.button.update();\n                this.button.menu.update();\n            }.bind(this)\n        };\n    }.bind(this);\n\n    this.update = function(){\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            var selector = this.button.menu.inner_selector;\n            selector.html(\"\");\n            // General model HTML representation\n            if (typeof this.parent_plot.state.model.html != \"undefined\"){\n                selector.append(\"div\").html(this.parent_plot.state.model.html);\n            }\n            // Model covariates table\n            if (!this.parent_plot.state.model.covariates.length){\n                selector.append(\"i\").html(\"no covariates in model\");\n            } else {\n                selector.append(\"h5\").html(\"Model Covariates (\" + this.parent_plot.state.model.covariates.length + \")\");\n                var table = selector.append(\"table\");\n                this.parent_plot.state.model.covariates.forEach(function(covariate, idx){\n                    var html = ( (typeof covariate == \"object\" && typeof covariate.html == \"string\") ? covariate.html : covariate.toString() );\n                    var row = table.append(\"tr\");\n                    row.append(\"td\").append(\"button\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){\n                            this.parent_plot.CovariatesModel.removeByIdx(idx);\n                        }.bind(this))\n                        .html(\"×\");\n                    row.append(\"td\").html(html);\n                }.bind(this));\n                selector.append(\"button\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                    .style({ \"margin-left\": \"4px\" }).html(\"× Remove All Covariates\")\n                    .on(\"click\", function(){\n                        this.parent_plot.CovariatesModel.removeAll();\n                    }.bind(this));\n            }\n        }.bind(this));\n\n        this.button.preUpdate = function(){\n            var html = \"Model\";\n            if (this.parent_plot.state.model.covariates.length){\n                var cov = this.parent_plot.state.model.covariates.length > 1 ? \"covariates\" : \"covariate\";\n                html += \" (\" + this.parent_plot.state.model.covariates.length + \" \" + cov + \")\";\n            }\n            this.button.setHtml(html).disable(false);\n        }.bind(this);\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Button to toggle split tracks\n * @class LocusZoom.Dashboard.Components.toggle_split_tracks\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_split_tracks\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (!layout.data_layer_id){ layout.data_layer_id = \"intervals\"; }\n    if (!this.parent_panel.data_layers[layout.data_layer_id]){\n        throw (\"Dashboard toggle split tracks component missing valid data layer ID\");\n    }\n    this.update = function(){\n        var data_layer = this.parent_panel.data_layers[layout.data_layer_id];\n        var html = data_layer.layout.split_tracks ? \"Merge Tracks\" : \"Split Tracks\";\n        if (this.button){\n            this.button.setHtml(html);\n            this.button.show();\n            this.parent.position();\n            return this;\n        } else {\n            this.button = new LocusZoom.Dashboard.Component.Button(this)\n                .setColor(layout.color).setHtml(html)\n                .setTitle(\"Toggle whether tracks are split apart or merged together\")\n                .setOnclick(function(){\n                    data_layer.toggleSplitTracks();\n                    if (this.scale_timeout){ clearTimeout(this.scale_timeout); }\n                    var timeout = data_layer.layout.transition ? +data_layer.layout.transition.duration || 0 : 0;\n                    this.scale_timeout = setTimeout(function(){\n                        this.parent_panel.scaleHeightToData();\n                        this.parent_plot.positionPanels();\n                    }.bind(this), timeout);\n                    this.update();\n                }.bind(this));\n            return this.update();\n        }\n    };\n});\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @class LocusZoom.Dashboard.Components.resize_to_data\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"resize_to_data\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Resize to Data\")\n            .setTitle(\"Automatically resize this panel to fit the data its currently showing\")\n            .setOnclick(function(){\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to toggle legend\n * @class LocusZoom.Dashboard.Components.toggle_legend\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_legend\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var html = this.parent_panel.legend.layout.hidden ? \"Show Legend\" : \"Hide Legend\";\n        if (this.button){\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setTitle(\"Show or hide the legend for this panel\")\n            .setOnclick(function(){\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            }.bind(this));\n        return this.update();\n    };\n});\n\n/**\n * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n * @class LocusZoom.Dashboard.Components.data_layers\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"data_layers\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.update = function(){\n\n        if (typeof layout.button_html != \"string\"){ layout.button_html = \"Data Layers\"; }\n        if (typeof layout.button_title != \"string\"){ layout.button_title = \"Manipulate Data Layers (sort, dim, show/hide, etc.)\"; }\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(\"\");\n            var table = this.button.menu.inner_selector.append(\"table\");\n            this.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function(id, idx){\n                var data_layer = this.parent_panel.data_layers[id];\n                var name = (typeof data_layer.layout.name != \"string\") ? data_layer.id : data_layer.layout.name;\n                var row = table.append(\"tr\");\n                // Layer name\n                row.append(\"td\").html(name);\n                // Status toggle buttons\n                layout.statuses.forEach(function(status_adj){\n                    var status_idx = LocusZoom.DataLayer.Statuses.adjectives.indexOf(status_adj);\n                    var status_verb = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                    var html, onclick, highlight;\n                    if (data_layer.global_statuses[status_adj]){\n                        html = LocusZoom.DataLayer.Statuses.menu_antiverbs[status_idx];\n                        onclick = \"un\" + status_verb + \"AllElements\";\n                        highlight = \"-highlighted\";\n                    } else {\n                        html = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                        onclick = status_verb + \"AllElements\";\n                        highlight = \"\";\n                    }\n                    row.append(\"td\").append(\"a\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color + highlight)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){ data_layer[onclick](); this.button.menu.populate(); }.bind(this))\n                        .html(html);\n                }.bind(this));\n                // Sort layer buttons\n                var at_top = (idx === 0);\n                var at_bottom = (idx === (this.parent_panel.data_layer_ids_by_z_index.length - 1));\n                var td = row.append(\"td\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-start lz-dashboard-button-\" + this.layout.color + (at_bottom ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveDown(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▾\").attr(\"title\", \"Move layer down (further back)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-middle lz-dashboard-button-\" + this.layout.color + (at_top ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveUp(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▴\").attr(\"title\", \"Move layer up (further front)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-end lz-dashboard-button-red\")\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){\n                        if (confirm(\"Are you sure you want to remove the \" + name + \" layer? This cannot be undone!\")){\n                            data_layer.parent.removeDataLayer(id);\n                        }\n                        return this.button.menu.populate();\n                    }.bind(this))\n                    .html(\"×\").attr(\"title\", \"Remove layer\");\n            }.bind(this));\n            return this;\n        }.bind(this));\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @class LocusZoom.Dashboard.Components.display_options\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\nLocusZoom.Dashboard.Components.add(\"display_options\", function (layout) {\n    if (typeof layout.button_html != \"string\"){ layout.button_html = \"Display options\"; }\n    if (typeof layout.button_title != \"string\"){ layout.button_title = \"Control how plot items are displayed\"; }\n\n    // Call parent constructor\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n    //  information (like plot height etc) while changing point rendering\n    var allowed_fields = layout.fields_whitelist || [\"color\", \"fill_opacity\", \"label\", \"legend\",\n        \"point_shape\", \"point_size\", \"tooltip\", \"tooltip_positioning\"];\n\n    var dataLayer = this.parent_panel.data_layers[layout.layer_name];\n    var dataLayerLayout = dataLayer.layout;\n\n    // Store default configuration for the layer as a clean deep copy, so we may revert later\n    var defaultConfig = {};\n    allowed_fields.forEach(function(name) {\n        var configSlot = dataLayerLayout[name];\n        if (configSlot) {\n            defaultConfig[name] = JSON.parse(JSON.stringify(configSlot));\n        }\n    });\n\n    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n    this._selected_item = \"default\";\n\n    // Define the button + menu that provides the real functionality for this dashboard component\n    var self = this;\n    this.button = new LocusZoom.Dashboard.Component.Button(self)\n        .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n        .setOnclick(function () {\n            self.button.menu.populate();\n        });\n    this.button.menu.setPopulate(function () {\n        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n        var uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n        self.button.menu.inner_selector.html(\"\");\n        var table = self.button.menu.inner_selector.append(\"table\");\n\n        var menuLayout = self.layout;\n\n        var renderRow = function(display_name, display_options, row_id) { // Helper method\n            var row = table.append(\"tr\");\n            row.append(\"td\")\n                .append(\"input\")\n                .attr({type: \"radio\", name: \"color-picker-\" + uniqueID, value: row_id})\n                .property(\"checked\", (row_id === self._selected_item))\n                .on(\"click\", function () {\n                    Object.keys(display_options).forEach(function(field_name) {\n                        dataLayer.layout[field_name] = display_options[field_name];\n                    });\n                    self._selected_item = row_id;\n                    self.parent_panel.render();\n                    var legend = self.parent_panel.legend;\n                    if (legend && display_options.legend) {\n                        // Update the legend only if necessary\n                        legend.render();\n                    }\n                });\n            row.append(\"td\").text(display_name);\n        };\n        // Render the \"display options\" menu: default and special custom options\n        var defaultName = menuLayout.default_config_display_name || \"Default style\";\n        renderRow(defaultName, defaultConfig, \"default\");\n        menuLayout.options.forEach(function (item, index) {\n            renderRow(item.display_name, item.display, index);\n        });\n        return self;\n    });\n\n    this.update = function () {\n        this.button.show();\n        return this;\n    };\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @class\n * @param {LocusZoom.Panel} parent\n*/\nLocusZoom.Legend = function(parent){\n    if (!(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create legend, parent must be a locuszoom panel\";\n    }\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".legend\";\n\n    this.parent.layout.legend = LocusZoom.Layouts.merge(this.parent.layout.legend || {}, LocusZoom.Legend.DefaultLayout);\n    /** @member {Object} */\n    this.layout = this.parent.layout.legend;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {d3.selection} */\n    this.background_rect = null;\n    /** @member {d3.selection[]} */\n    this.elements = [];\n    /**\n     * SVG selector for the group containing all elements in the legend\n     * @protected\n     * @member {d3.selection|null}\n     */\n    this.elements_group = null;\n\n    /**\n     * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n     * @deprecated\n     * @protected\n     * @member {Boolean}\n     */\n    this.hidden = false;\n\n    // TODO Revisit constructor return value; see https://stackoverflow.com/a/3350364/1422268\n    return this.render();\n};\n\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nLocusZoom.Legend.DefaultLayout = {\n    orientation: \"vertical\",\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false\n};\n\n/**\n * Render the legend in the parent panel\n */\nLocusZoom.Legend.prototype.render = function(){\n\n    // Get a legend group selector if not yet defined\n    if (!this.selector){\n        this.selector = this.parent.svg.group.append(\"g\")\n            .attr(\"id\", this.parent.getBaseId() + \".legend\").attr(\"class\", \"lz-legend\");\n    }\n\n    // Get a legend background rect selector if not yet defined\n    if (!this.background_rect){\n        this.background_rect = this.selector.append(\"rect\")\n            .attr(\"width\", 100).attr(\"height\", 100).attr(\"class\", \"lz-legend-background\");\n    }\n\n    // Get a legend elements group selector if not yet defined\n    if (!this.elements_group){\n        this.elements_group = this.selector.append(\"g\");\n    }\n\n    // Remove all elements from the document and re-render from scratch\n    this.elements.forEach(function(element){\n        element.remove();\n    });\n    this.elements = [];\n\n    // Gather all elements from data layers in order (top to bottom) and render them\n    var padding = +this.layout.padding || 1;\n    var x = padding;\n    var y = padding;\n    var line_height = 0;\n    this.parent.data_layer_ids_by_z_index.slice().reverse().forEach(function(id){\n        if (Array.isArray(this.parent.data_layers[id].layout.legend)){\n            this.parent.data_layers[id].layout.legend.forEach(function(element){\n                var selector = this.elements_group.append(\"g\")\n                    .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                var label_size = +element.label_size || +this.layout.label_size || 12;\n                var label_x = 0;\n                var label_y = (label_size/2) + (padding/2);\n                line_height = Math.max(line_height, label_size + padding);\n                // Draw the legend element symbol (line, rect, shape, etc)\n                if (element.shape === \"line\"){\n                    // Line symbol\n                    var length = +element.length || 16;\n                    var path_y = (label_size/4) + (padding/2);\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", \"M0,\" + path_y + \"L\" + length + \",\" + path_y)\n                        .style(element.style || {});\n                    label_x = length + padding;\n                } else if (element.shape === \"rect\"){\n                    // Rect symbol\n                    var width = +element.width || 16;\n                    var height = +element.height || width;\n                    selector.append(\"rect\").attr(\"class\", element.class || \"\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = width + padding;\n                    line_height = Math.max(line_height, height + padding);\n                } else if (d3.svg.symbolTypes.indexOf(element.shape) !== -1) {\n                    // Shape symbol (circle, diamond, etc.)\n                    var size = +element.size || 40;\n                    var radius = Math.ceil(Math.sqrt(size/Math.PI));\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", d3.svg.symbol().size(size).type(element.shape))\n                        .attr(\"transform\", \"translate(\" + radius + \",\" + (radius+(padding/2)) + \")\")\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = (2*radius) + padding;\n                    label_y = Math.max((2*radius)+(padding/2), label_y);\n                    line_height = Math.max(line_height, (2*radius) + padding);\n                }\n                // Draw the legend element label\n                selector.append(\"text\").attr(\"text-anchor\", \"left\").attr(\"class\", \"lz-label\")\n                    .attr(\"x\", label_x).attr(\"y\", label_y).style({\"font-size\": label_size}).text(element.label);\n                // Position the legend element group based on legend layout orientation\n                var bcr = selector.node().getBoundingClientRect();\n                if (this.layout.orientation === \"vertical\"){\n                    y += bcr.height + padding;\n                    line_height = 0;\n                } else {\n                    // Ensure this element does not exceed the panel width\n                    // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                    var right_x = this.layout.origin.x + x + bcr.width;\n                    if (x > padding && right_x > this.parent.layout.width){\n                        y += line_height;\n                        x = padding;\n                        selector.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                    }\n                    x += bcr.width + (3*padding);\n                }\n                // Store the element\n                this.elements.push(selector);\n            }.bind(this));\n        }\n    }.bind(this));\n\n    // Scale the background rect to the elements in the legend\n    var bcr = this.elements_group.node().getBoundingClientRect();\n    this.layout.width = bcr.width + (2*this.layout.padding);\n    this.layout.height = bcr.height + (2*this.layout.padding);\n    this.background_rect\n        .attr(\"width\", this.layout.width)\n        .attr(\"height\", this.layout.height);\n\n    // Set the visibility on the legend from the \"hidden\" flag\n    // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n    this.selector.style({ visibility: this.layout.hidden ? \"hidden\" : \"visible\" });\n\n    // TODO: Annotate return type and make consistent\n    return this.position();\n};\n\n/**\n * Place the legend in position relative to the panel, as specified in the layout configuration\n * @returns {LocusZoom.Legend | null}\n * TODO: should this always be chainable?\n */\nLocusZoom.Legend.prototype.position = function(){\n    if (!this.selector){ return this; }\n    var bcr = this.selector.node().getBoundingClientRect();\n    if (!isNaN(+this.layout.pad_from_bottom)){\n        this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n    }\n    if (!isNaN(+this.layout.pad_from_right)){\n        this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n    }\n    this.selector.attr(\"transform\", \"translate(\" + this.layout.origin.x + \",\" + this.layout.origin.y + \")\");\n};\n\n/**\n * Hide the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.hide = function(){\n    this.layout.hidden = true;\n    this.render();\n};\n\n/**\n * Show the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.show = function(){\n    this.layout.hidden = false;\n    this.render();\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * LocusZoom functionality used for data parsing and retrieval\n * @namespace\n * @public\n */\nLocusZoom.Data = LocusZoom.Data ||  {};\n\n/**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * @public\n * @class\n */\nLocusZoom.DataSources = function() {\n    /** @member {Object.<string, LocusZoom.Data.Source>} */\n    this.sources = {};\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.addSource = function(ns, x) {\n    console.warn(\"Warning: .addSource() is deprecated. Use .add() instead\");\n    return this.add(ns, x);\n};\n\n/**\n * Add a (namespaced) datasource to the plot\n * @public\n * @param {String} ns A namespace used for fields from this data source\n * @param {LocusZoom.Data.Source|Array|null} x An instantiated datasource, or an array of arguments that can be used to\n *   create a known datasource type.\n */\nLocusZoom.DataSources.prototype.add = function(ns, x) {\n    return this.set(ns, x);\n};\n\n/** @protected */\nLocusZoom.DataSources.prototype.set = function(ns, x) {\n    if (Array.isArray(x)) {\n        // If passed array of source name and options, make the source\n        var dsobj = LocusZoom.KnownDataSources.create.apply(null, x);\n        // Each datasource in the chain should be aware of its assigned namespace\n        dsobj.source_id = ns;\n        this.sources[ns] = dsobj;\n    } else {\n        // If passed the already-created source object\n        if (x !== null) {\n            x.source_id = ns;\n            this.sources[ns] = x;\n        } else {\n            delete this.sources[ns];\n        }\n    }\n    return this;\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.getSource = function(ns) {\n    console.warn(\"Warning: .getSource() is deprecated. Use .get() instead\");\n    return this.get(ns);\n};\n\n/**\n * Return the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n * @returns {LocusZoom.Data.Source}\n */\nLocusZoom.DataSources.prototype.get = function(ns) {\n    return this.sources[ns];\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.removeSource = function(ns) {\n    console.warn(\"Warning: .removeSource() is deprecated. Use .remove() instead\");\n    return this.remove(ns);\n};\n\n/**\n * Remove the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n */\nLocusZoom.DataSources.prototype.remove = function(ns) {\n    return this.set(ns, null);\n};\n\n/**\n * Populate a list of datasources specified as a JSON object\n * @public\n * @param {String|Object} x An object or JSON representation containing {ns: configArray} entries\n * @returns {LocusZoom.DataSources}\n */\nLocusZoom.DataSources.prototype.fromJSON = function(x) {\n    if (typeof x === \"string\") {\n        x = JSON.parse(x);\n    }\n    var ds = this;\n    Object.keys(x).forEach(function(ns) {\n        ds.set(ns, x[ns]);\n    });\n    return ds;\n};\n\n/**\n * Return the names of all currently recognized datasources\n * @public\n * @returns {Array}\n */\nLocusZoom.DataSources.prototype.keys = function() {\n    return Object.keys(this.sources);\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents existing sources in that format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n */\nLocusZoom.DataSources.prototype.toJSON = function() {\n    return this.sources;\n};\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @public\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nLocusZoom.Data.Field = function(field){\n    \n    var parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n    /** @member {String} */\n    this.full_name = field;\n    /** @member {String} */\n    this.namespace = parts[1] || null;\n    /** @member {String} */\n    this.name = parts[2] || null;\n    /** @member {Array} */\n    this.transformations = [];\n    \n    if (typeof parts[3] == \"string\" && parts[3].length > 1){\n        this.transformations = parts[3].substring(1).split(\"|\");\n        this.transformations.forEach(function(transform, i){\n            this.transformations[i] = LocusZoom.TransformationFunctions.get(transform);\n        }.bind(this));\n    }\n\n    this.applyTransformations = function(val){\n        this.transformations.forEach(function(transform){\n            val = transform(val);\n        });\n        return val;\n    };\n\n    // Resolve the field for a given data element.\n    // First look for a full match with transformations already applied by the data requester.\n    // Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n    this.resolve = function(d){\n        if (typeof d[this.full_name] == \"undefined\"){\n            var val = null;\n            if (typeof (d[this.namespace+\":\"+this.name]) != \"undefined\"){ val = d[this.namespace+\":\"+this.name]; }\n            else if (typeof d[this.name] != \"undefined\"){ val = d[this.name]; }\n            d[this.full_name] = this.applyTransformations(val);\n        }\n        return d[this.full_name];\n    };\n    \n};\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {LocusZoom.DataSources} sources An object of {ns: LocusZoom.Data.Source} instances\n * @class\n */\nLocusZoom.Data.Requester = function(sources) {\n\n    function split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || \"base\";\n            var field = parts[2];\n            var trans = LocusZoom.TransformationFunctions.get(parts[3]);\n            if (typeof requests[ns] ==\"undefined\") {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    this.getData = function(state, fields) {\n        var requests = split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var request_handles = Object.keys(requests).map(function(key) {\n            if (!sources.get(key)) {\n                throw(\"Datasource for namespace \" + key + \" not found\");\n            }\n            return sources.get(key).getData(state, requests[key].fields, \n                                            requests[key].outnames, requests[key].trans);\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Q.when({header:{}, body:{}, discrete: {}});\n        for(var i=0; i < request_handles.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(request_handles[i]);\n        }\n        return ret;\n    };\n};\n\n/**\n * Base class for LocusZoom data sources\n * This can be extended with .extend() to create custom data sources\n * @class\n * @public\n */\nLocusZoom.Data.Source = function() {\n    /**\n     * Whether this source should enable caching\n     * @member {Boolean}\n     */\n    this.enableCache = true;\n    /**\n     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n     *  association data if no data was found for that region.\n     * @member {boolean}\n     */\n    this.dependentSource = false;\n};\n\n/**\n * A default constructor that can be used when creating new data sources\n * @param {String|Object} init Basic configuration- either a url, or a config object\n * @param {String} [init.url] The datasource URL\n * @param {String} [init.params] Initial config params for the datasource\n */\nLocusZoom.Data.Source.prototype.parseInit = function(init) {\n    if (typeof init === \"string\") {\n        /** @member {String} */\n        this.url = init;\n        /** @member {String} */\n        this.params = {};\n    } else {\n        this.url = init.url;\n        this.params = init.params || {};\n    }\n    if (!this.url) {\n        throw(\"Source not initialized with required URL\");\n    }\n\n};\n\n/**\n * A unique identifier that indicates whether cached data is valid for this request\n * @protected\n * @param state\n * @param chain\n * @param fields\n * @returns {String|undefined}\n */\nLocusZoom.Data.Source.prototype.getCacheKey = function(state, chain, fields) {\n    return this.getURL && this.getURL(state, chain, fields);\n};\n\n/**\n * Stub: build the URL for any requests made by this source.\n */\nLocusZoom.Data.Source.prototype.getURL = function(state, chain, fields) { return this.url; };\n\n/**\n * Perform a network request to fetch data for this source\n * @protected\n * @param {Object} state The state of the parent plot\n * @param chain\n * @param fields\n */\nLocusZoom.Data.Source.prototype.fetchRequest = function(state, chain, fields) {\n    var url = this.getURL(state, chain, fields);\n    return LocusZoom.createCORSPromise(\"GET\", url); \n};\n\n/**\n * Gets the data for just this source, typically via a network request (caching where possible)\n * @protected\n */\nLocusZoom.Data.Source.prototype.getRequest = function(state, chain, fields) {\n    var req;\n    var cacheKey = this.getCacheKey(state, chain, fields);\n    if (this.enableCache && typeof(cacheKey) !== \"undefined\" && cacheKey === this._cachedKey) {\n        req = Q.when(this._cachedResponse);\n    } else {\n        req = this.fetchRequest(state, chain, fields);\n        if (this.enableCache) {\n            req = req.then(function(x) {\n                this._cachedKey = cacheKey;\n                return this._cachedResponse = x;\n            }.bind(this));\n        }\n    }\n    return req;\n};\n\n/**\n * Fetch the data from the specified data source, and apply transformations requested by an external consumer.\n * This is the public-facing datasource method that will most commonly be called by external code.\n *\n * @public\n * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {function} A callable operation that can be used as part of the data chain\n */\nLocusZoom.Data.Source.prototype.getData = function(state, fields, outnames, trans) {\n    if (this.preGetData) {\n        var pre = this.preGetData(state, fields, outnames, trans);\n        if(this.pre) {\n            state = pre.state || state;\n            fields = pre.fields || fields;\n            outnames = pre.outnames || outnames;\n            trans = pre.trans || trans;\n        }\n    }\n\n    var self = this;\n    return function (chain) {\n        if (self.dependentSource && chain && chain.body && !chain.body.length) {\n            // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n            // Therefore, it should simply return the previous data chain.\n            return Q.when(chain);\n        }\n\n        return self.getRequest(state, chain, fields).then(function(resp) {\n            return self.parseResponse(resp, chain, fields, outnames, trans);\n        });\n    };\n};\n\n/**\n * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n *\n * Does not apply namespacing or transformations.\n *\n * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other\n *  sources.\n *\n * @param {Object[]|Object} data The original parsed server response\n * @protected\n */\nLocusZoom.Data.Source.prototype.normalizeResponse = function (data) {\n    if (Array.isArray(data)) {\n        // Already in the desired form\n        return data;\n    }\n\n    // Otherwise, assume the server response is an object representing columns of data.\n    // Each array should have the same length (verify), and a given array index corresponds to a single row.\n    var keys = Object.keys(data);\n    var N = data[keys[0]].length;\n    var sameLength = keys.every(function(key) {\n        var item = data[key];\n        return item.length === N;\n    });\n    if (!sameLength) {\n        throw this.constructor.SOURCE_NAME + \" expects a response in which all arrays of data are the same length\";\n    }\n\n    // Go down the rows, and create an object for each record\n    var records = [];\n    var fields = Object.keys(data);\n    for(var i = 0; i < N; i++) {\n        var record = {};\n        for(var j = 0; j < fields.length; j++) {\n            record[fields[j]] = data[fields[j]][i];\n        }\n        records.push(record);\n    }\n    return records;\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.prepareData = function (records) {\n    console.warn(\"Warning: .prepareData() is deprecated. Use .annotateData() instead\");\n    return this.annotateData(records);\n};\n\n/**\n * Hook to post-process the data returned by this source with new, additional behavior.\n *   (eg cleaning up API values or performing complex calculations on the returned data)\n *\n * @param {Object[]} records The parsed data from the source (eg standardized api response)\n * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n * @returns {Object[]|Promise} The modified set of records\n */\nLocusZoom.Data.Source.prototype.annotateData = function(records, chain) {\n    // Default behavior: no transformations\n    return records;\n};\n\n/**\n * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n *   Apply per-field transformations as appropriate.\n *\n * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n *\n * @param {Object[]} data One record object per element\n * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n * @protected\n */\nLocusZoom.Data.Source.prototype.extractFields = function (data, fields, outnames, trans) {\n    //intended for an array of objects\n    //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n    // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n    if (!Array.isArray(data)) {\n        return data;\n    }\n\n    var fieldFound = [];\n    for (var k=0; k<fields.length; k++) {\n        fieldFound[k] = 0;\n    }\n\n    var records = data.map(function (item) {\n        var output_record = {};\n        for (var j=0; j < fields.length; j++) {\n            var val = item[fields[j]];\n            if (typeof val != \"undefined\") {\n                fieldFound[j] = 1;\n            }\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            output_record[outnames[j]] = val;\n        }\n        return output_record;\n    });\n    fieldFound.forEach(function(v, i) {\n        if (!v) {throw \"field \" + fields[i] + \" not found in response for \" + outnames[i];}\n    });\n    return records;\n};\n\n/**\n * Combine records from this source with others in the chain to yield final chain body.\n *   Handles merging this data with other sources (if applicable).\n *\n * @param {Object[]} data The data That would be returned from this source alone\n * @param {Object} chain The data chain built up during previous requests\n * @param {String[]} fields\n * @param {String[]} outnames\n * @return {Promise|Object[]} The new chain body\n * @protected\n */\nLocusZoom.Data.Source.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    return data;\n};\n\n/**\n * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n *\n * @public\n * @param {String|Object} resp The raw data associated with the response\n * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n *  including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {Promise|{header: ({}|*), discrete: {}, body: []}} A promise that resolves to an object containing\n *   request metadata (headers), the consolidated data for plotting (body), and the individual responses that would be\n *   returned by each source in the chain in isolation (discrete)\n */\nLocusZoom.Data.Source.prototype.parseResponse = function(resp, chain, fields, outnames, trans) {\n    var source_id = this.source_id || this.constructor.SOURCE_NAME;\n    if (!chain.discrete) {\n        chain.discrete = {};\n    }\n\n    if (!resp) {\n        // FIXME: Hack. Certain browser issues (such as mixed content warnings) are reported as a successful promise\n        //  resolution, even though the request was aborted. This is difficult to reliably detect, and is most likely\n        // to occur for annotation sources (such as from ExAC). If empty response is received, skip parsing and log.\n        // FIXME: Throw an error after pending, eg https://github.com/konradjk/exac_browser/issues/345\n        console.error(\"No usable response was returned for source: '\" + source_id + \"'. Parsing will be skipped.\");\n        return Q.when(chain);\n    }\n\n    var json = typeof resp == \"string\" ? JSON.parse(resp) : resp;\n\n    var self = this;\n    // Perform the 4 steps of parsing the payload and return a combined chain object\n    return Q.when(self.normalizeResponse(json.data || json))\n        .then(function(standardized) {\n            // Perform calculations on the data from just this source\n            return Q.when(self.annotateData(standardized, chain));\n        }).then(function (data) {\n            return Q.when(self.extractFields(data, fields, outnames, trans));\n        }).then(function (one_source_body) {\n            // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n            //   fields array into account). This is useful when we want to re-use the source output in many ways.\n            chain.discrete[source_id] = one_source_body;\n            return Q.when(self.combineChainBody(one_source_body, chain, fields, outnames));\n        }).then(function (new_body) {\n            return { header: chain.header || {}, discrete: chain.discrete, body: new_body };\n        });\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseArraysToObjects = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseArraysToObjects() is no longer used. A stub is provided for legacy use\");\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseObjectsToObjects = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseObjectsToObjects() is deprecated. Use .extractFields() instead\");\n    return this.extractFields(data, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseData = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseData() is no longer used. A stub is provided for legacy use\");\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/**\n * Method to define new custom datasources based on a provided constructor. (does not allow registering any additional methods)\n * @public\n * @param {Function} constructorFun Constructor function that is used to create the specified class\n * @param {String} [uniqueName] The name by which the class should be listed in `KnownDataSources`\n * @param {String|Function} [base=LocusZoomData.Source] The name or constructor of a base class to use\n * @returns {*|Function}\n */\nLocusZoom.Data.Source.extend = function(constructorFun, uniqueName, base) {\n    if (base) {\n        if (Array.isArray(base)) {\n            base = LocusZoom.KnownDataSources.create.apply(null, base);\n        } else if (typeof base === \"string\") {\n            base = LocusZoom.KnownDataSources.get(base).prototype;\n        } else if (typeof base === \"function\") {\n            base = base.prototype;\n        }\n    } else {\n        base =  new LocusZoom.Data.Source();\n    }\n    constructorFun = constructorFun || function() {};\n    constructorFun.prototype = base;\n    constructorFun.prototype.constructor = constructorFun;\n    if (uniqueName) {\n        /** @member {String} LocusZoom.Data.Source.SOURCENAME */\n        constructorFun.SOURCE_NAME = uniqueName;\n        LocusZoom.KnownDataSources.add(constructorFun);\n    }\n    return constructorFun;\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents an existing source in that data format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n *\n * Custom sources with their own parameters may need to re-implement this method\n *\n * @public\n * @returns {Object}\n */\nLocusZoom.Data.Source.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, \n        {url:this.url, params:this.params}];\n};\n\n/**\n * Data Source for Association Data, as fetched from the LocusZoom API server (or compatible)\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.AssociationSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"AssociationLZ\");\n\nLocusZoom.Data.AssociationSource.prototype.preGetData = function(state, fields, outnames, trans) {\n    var id_field = this.params.id_field || \"id\";\n    [id_field, \"position\"].forEach(function(x) {\n        if (fields.indexOf(x)===-1) {\n            fields.unshift(x);\n            outnames.unshift(x);\n            trans.unshift(null);\n        }\n    });\n    return {fields: fields, outnames:outnames, trans:trans};\n};\n\nLocusZoom.Data.AssociationSource.prototype.getURL = function(state, chain, fields) {\n    var analysis = state.analysis || chain.header.analysis || this.params.analysis || 3;\n    return this.url + \"results/?filter=analysis in \" + analysis  +\n        \" and chromosome in  '\" + state.chr + \"'\" +\n        \" and position ge \" + state.start +\n        \" and position le \" + state.end;\n};\n\n/**\n * Data Source for LD Data, as fetched from the LocusZoom API server (or compatible)\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.LDSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, \"LDLZ\");\n\nLocusZoom.Data.LDSource.prototype.preGetData = function(state, fields) {\n    if (fields.length>1) {\n        if (fields.length!==2 || fields.indexOf(\"isrefvar\")===-1) {\n            throw(\"LD does not know how to get all fields: \" + fields.join(\", \"));\n        }\n    }\n};\n\nLocusZoom.Data.LDSource.prototype.findMergeFields = function(chain) {\n    // since LD may be shared across sources with different namespaces\n    // we use regex to find columns to join on rather than \n    // requiring exact matches\n    var exactMatch = function(arr) {return function() {\n        var regexes = arguments;\n        for(var i=0; i<regexes.length; i++) {\n            var regex = regexes[i];\n            var m = arr.filter(function(x) {return x.match(regex);});\n            if (m.length){\n                return m[0];\n            }\n        }\n        return null;\n    };};\n    var dataFields = {\n        id: this.params.id_field,\n        position: this.params.position_field,\n        pvalue: this.params.pvalue_field,\n        _names_:null\n    };\n    if (chain && chain.body && chain.body.length>0) {\n        var names = Object.keys(chain.body[0]);\n        var nameMatch = exactMatch(names);\n        dataFields.id = dataFields.id || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n        dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n        dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n        dataFields._names_ = names;\n    }\n    return dataFields;\n};\n\nLocusZoom.Data.LDSource.prototype.findRequestedFields = function(fields, outnames) {\n    var obj = {};\n    for(var i=0; i<fields.length; i++) {\n        if(fields[i]===\"isrefvar\") {\n            obj.isrefvarin = fields[i];\n            obj.isrefvarout = outnames && outnames[i];\n        } else {\n            obj.ldin = fields[i];\n            obj.ldout = outnames && outnames[i];\n        }\n    }\n    return obj;\n};\n\nLocusZoom.Data.LDSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.LDSource.prototype.getURL = function(state, chain, fields) {\n    var findExtremeValue = function(x, pval, sign) {\n        pval = pval || \"pvalue\";\n        sign = sign || 1;\n        var extremeVal = x[0][pval], extremeIdx=0;\n        for(var i=1; i<x.length; i++) {\n            if (x[i][pval] * sign > extremeVal) {\n                extremeVal = x[i][pval] * sign;\n                extremeIdx = i;\n            }\n        }\n        return extremeIdx;\n    };\n\n    var refSource = state.ldrefsource || chain.header.ldrefsource || 1;\n    var reqFields = this.findRequestedFields(fields);\n    var refVar = reqFields.ldin;\n    if (refVar === \"state\") {\n        refVar = state.ldrefvar || chain.header.ldrefvar || \"best\";\n    }\n    if (refVar === \"best\") {\n        if (!chain.body) {\n            throw(\"No association data found to find best pvalue\");\n        }\n        var keys = this.findMergeFields(chain);\n        if (!keys.pvalue || !keys.id) {\n            var columns = \"\";\n            if (!keys.id){ columns += (columns.length ? \", \" : \"\") + \"id\"; }\n            if (!keys.pvalue){ columns += (columns.length ? \", \" : \"\") + \"pvalue\"; }\n            throw(\"Unable to find necessary column(s) for merge: \" + columns + \" (available: \" + keys._names_ + \")\");\n        }\n        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n    }\n    if (!chain.header) {chain.header = {};}\n    chain.header.ldrefvar = refVar;\n    return this.url + \"results/?filter=reference eq \" + refSource + \n        \" and chromosome2 eq '\" + state.chr + \"'\" + \n        \" and position2 ge \" + state.start + \n        \" and position2 le \" + state.end + \n        \" and variant1 eq '\" + refVar + \"'\" + \n        \"&fields=chr,pos,rsquare\";\n};\n\nLocusZoom.Data.LDSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    var keys = this.findMergeFields(chain);\n    var reqFields = this.findRequestedFields(fields, outnames);\n    if (!keys.position) {\n        throw(\"Unable to find position field for merge: \" + keys._names_);\n    }\n    var leftJoin = function(left, right, lfield, rfield) {\n        var i=0, j=0;\n        while (i < left.length && j < right.position2.length) {\n            if (left[i][keys.position] === right.position2[j]) {\n                left[i][lfield] = right[rfield][j];\n                i++;\n                j++;\n            } else if (left[i][keys.position] < right.position2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    };\n    var tagRefVariant = function(data, refvar, idfield, outname) {\n        for(var i=0; i<data.length; i++) {\n            if (data[i][idfield] && data[i][idfield]===refvar) {\n                data[i][outname] = 1;\n            } else {\n                data[i][outname] = 0;\n            }\n        }\n    };\n    leftJoin(chain.body, data, reqFields.ldout, \"rsquare\");\n    if(reqFields.isrefvarin && chain.header.ldrefvar) {\n        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout);\n    }\n    return chain.body;\n};\n\n\n/**\n * Data Source for Gene Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.GeneSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneLZ\");\n\nLocusZoom.Data.GeneSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.source || chain.header.source || this.params.source || 2;\n    return this.url + \"?filter=source in \" + source +\n        \" and chrom eq '\" + state.chr + \"'\" + \n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\n// Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with the\n// exact information returned by the API. (ignoring the fields array in the layout)\nLocusZoom.Data.GeneSource.prototype.normalizeResponse = function (data) { return data; };\nLocusZoom.Data.GeneSource.prototype.extractFields = function (data, fields, outnames, trans) { return data; };\n\n/**\n * Data Source for Gene Constraint Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n*/\nLocusZoom.Data.GeneConstraintSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneConstraintLZ\");\n\nLocusZoom.Data.GeneConstraintSource.prototype.getURL = function() {\n    return this.url;\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.GeneConstraintSource.prototype.getCacheKey = function(state, chain, fields) {\n    return this.url + JSON.stringify(state);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.fetchRequest = function(state, chain, fields) {\n    var geneids = [];\n    chain.body.forEach(function(gene){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        geneids.push(gene_id);\n    });\n    var url = this.getURL(state, chain, fields);\n    var body = \"geneids=\" + encodeURIComponent(JSON.stringify(geneids));\n    var headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    return LocusZoom.createCORSPromise(\"POST\", url, body, headers);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    if (!data) {\n        return chain;\n    }\n    var constraint_fields = [\"bp\", \"exp_lof\", \"exp_mis\", \"exp_syn\", \"lof_z\", \"mis_z\", \"mu_lof\", \"mu_mis\",\"mu_syn\", \"n_exons\", \"n_lof\", \"n_mis\", \"n_syn\", \"pLI\", \"syn_z\"];\n    chain.body.forEach(function(gene, i){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        constraint_fields.forEach(function(field){\n            // Do not overwrite any fields defined in the original gene source\n            if (typeof chain.body[i][field] != \"undefined\"){ return; }\n            if (data[gene_id]){\n                var val = data[gene_id][field];\n                if (typeof val == \"number\" && val.toString().indexOf(\".\") !== -1){\n                    val = parseFloat(val.toFixed(2));\n                }\n                chain.body[i][field] = val;\n            } else {\n                // If the gene did not come back in the response then set the same field with a null values\n                chain.body[i][field] = null;\n            }\n        });\n    });\n    return chain.body;\n};\n\n/**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.RecombinationRateSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"RecombLZ\");\n\nLocusZoom.Data.RecombinationRateSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.recombsource || chain.header.recombsource || this.params.source || 15;\n    return this.url + \"?filter=id in \" + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        \" and position le \" + state.end +\n        \" and position ge \" + state.start;\n};\n\n/**\n * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.IntervalSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"IntervalLZ\");\n\nLocusZoom.Data.IntervalSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.bedtracksource || chain.header.bedtracksource || this.params.source || 16;\n    return this.url + \"?filter=id in \" + source + \n        \" and chromosome eq '\" + state.chr + \"'\" + \n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\n/**\n * Data Source for static blobs of JSON Data. This does not perform additional parsing, and therefore it is the\n * responsibility of the user to pass information in a format that can be read and understood by the chosen plot.\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.StaticSource = LocusZoom.Data.Source.extend(function(data) {\n    /** @member {Object} */\n    this._data = data;\n},\"StaticJSON\");\n\nLocusZoom.Data.StaticSource.prototype.getRequest = function(state, chain, fields) {\n    return Q.fcall(function() {return this._data;}.bind(this));\n};\n\nLocusZoom.Data.StaticSource.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, this._data];\n};\n\n/**\n * Data source for PheWAS data served from external JSON files\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {String[]} init.build This datasource expects to be provided the name of the genome build that will be used to\n *   provide pheWAS results for this position. Note positions may not translate between builds.\n */\nLocusZoom.Data.PheWASSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"PheWASLZ\");\nLocusZoom.Data.PheWASSource.prototype.getURL = function(state, chain, fields) {\n    var build = this.params.build;\n    if (!build || !Array.isArray(build) || !build.length) {\n        throw [\"Data source\", this.constructor.SOURCE_NAME, \"requires that you specify array of one or more desired genome build names\"].join(\" \");\n    }\n    var url = [\n        this.url,\n        \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n        build.map(function(item) {return \"build=\" + encodeURIComponent(item);}).join(\"&\")\n    ];\n    return url.join(\"\");\n};\n\n/**\n * Base class for \"connectors\"- this is meant to be subclassed, rather than used directly.\n *\n * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object} init Configuration for this source\n * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n *  assumptions about what namespaces a source is using.\n * @type {*|Function}\n */\nLocusZoom.Data.ConnectorSource = LocusZoom.Data.Source.extend(function(init) {\n    if (!init || !init.sources) {\n        throw \"Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs\";\n    }\n\n    /**\n     * Tells the connector how to find the data it relies on\n     *\n     * For example, a connector that applies burden test information to the genes layer might specify:\n     *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n     *\n     * @member {Object}\n     */\n    this._source_name_mapping = init.sources;\n\n    // Validate that this source has been told how to find the required information\n    var specified_ids = Object.keys(init.sources);\n    var self = this;\n    this.REQUIRED_SOURCES.forEach(function (k) {\n        if (specified_ids.indexOf(k) === -1) {\n            throw \"Configuration for \" + self.constructor.SOURCE_NAME + \" must specify a source ID corresponding to \" + k;\n        }\n    });\n    this.parseInit(init);\n}, \"ConnectorSource\");\n\n/** @property {String[]} Specifies the sources that must be provided in the original config object */\nLocusZoom.Data.ConnectorSource.prototype.REQUIRED_SOURCES = [];\n\nLocusZoom.Data.ConnectorSource.prototype.parseInit = function(init) {};  // Stub\n\nLocusZoom.Data.ConnectorSource.prototype.getRequest = function(state, chain, fields) {\n    // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n    //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n    var self = this;\n    Object.keys(this._source_name_mapping).forEach(function(ns) {\n        var chain_source_id = self._source_name_mapping[ns];\n        if (chain.discrete && !chain.discrete[chain_source_id]) {\n            throw self.constructor.SOURCE_NAME + \" cannot be used before loading required data for: \" + chain_source_id;\n        }\n    });\n    return Q.when(chain.body || []);\n};\n\nLocusZoom.Data.ConnectorSource.prototype.parseResponse = function(data, chain, fields, outnames) {\n    // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n    //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n\n    // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n    // Typically connectors are called with `connector_name:all` in the fields array.\n    return Q.when(this.combineChainBody(data, chain, fields, outnames))\n        .then(function(new_body) {\n            return {header: chain.header || {}, discrete: chain.discrete || {}, body: new_body};\n        });\n};\n\nLocusZoom.Data.ConnectorSource.prototype.combineChainBody = function(records, chain) {\n    // Stub method: specifies how to combine the data\n    throw \"This method must be implemented in a subclass\";\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An independent LocusZoom object that renders a unique set of data and subpanels.\n * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n *\n * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n * to use the `LocusZoom.populate` helper method.\n *\n * @class\n * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n *   where the plot is rendered..\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n*/\nLocusZoom.Plot = function(id, datasource, layout) {\n    /** @member Boolean} */\n    this.initialized = false;\n    // TODO: This makes sense for all other locuszoom elements to have; determine whether this is interface boilerplate or something that can be removed\n    this.parent_plot = this;\n\n    /** @member {String} */\n    this.id = id;\n\n    /** @member {Element} */\n    this.container = null;\n    /**\n     * Selector for a node that will contain the plot. (set externally by populate methods)\n     * @member {d3.selection}\n     */\n    this.svg = null;\n\n    /** @member {Object.<String, Number>} */\n    this.panels = {};\n    /**\n     * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n     * @protected\n     * @member {String[]}\n     */\n    this.panel_ids_by_y_index = [];\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     */\n    this.applyPanelYIndexesToPanelLayouts = function(){\n        this.panel_ids_by_y_index.forEach(function(pid, idx){\n            this.panels[pid].layout.y_index = idx;\n        }.bind(this));\n    };\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @returns {String}\n     */\n    this.getBaseId = function(){\n        return this.id;\n    };\n\n    /**\n     * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n     * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n     * @protected\n     * @member {Promise[]}\n     */\n    this.remap_promises = [];\n\n    if (typeof layout == \"undefined\"){\n        /**\n         * The layout is a serializable object used to describe the composition of the Plot\n         *   If no layout was passed, use the Standard Association Layout\n         *   Otherwise merge whatever was passed with the Default Layout\n         *   TODO: Review description; we *always* merge with default layout?\n         * @member {Object}\n         */\n        this.layout = LocusZoom.Layouts.merge({}, LocusZoom.Layouts.get(\"plot\", \"standard_association\"));\n    } else {\n        this.layout = layout;\n    }\n    LocusZoom.Layouts.merge(this.layout, LocusZoom.Plot.DefaultLayout);\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original plot state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n\n    /**\n     * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n     *   with initial state/setup.\n     *\n     * Tracks state of the plot, eg start and end position\n     * @member {Object}\n     */\n    this.state = this.layout.state;\n\n    /** @member {LocusZoom.Data.Requester} */\n    this.lzd = new LocusZoom.Data.Requester(datasource);\n\n    /**\n     * Window.onresize listener (responsive layouts only)\n     * TODO: .on appears to return a selection, not a listener? Check logic here\n     * https://github.com/d3/d3-selection/blob/00b904b9bcec4dfaf154ae0bbc777b1fc1d7bc08/test/selection/on-test.js#L11\n     * @deprecated\n     * @member {d3.selection}\n     */\n    this.window_onresize = null;\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": [],\n        \"element_selection\": [],\n        \"state_changed\": []  // Only triggered when a state change causes rerender\n    };\n\n    /**\n     * @callback eventCallback\n     * @param {object} eventData A description of the event\n     * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n     *  triggered the event. Will be automatically filled in if not explicitly provided.\n     * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n     *   associated with a clicked plot element\n     */\n\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: plot - A data element in any of the plot's data layers has been clicked.\n     *   - `element_selection` - context: plot - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook){\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Plot}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof \"event\" != \"string\" || !Array.isArray(theseHooks)){\n            throw(\"Unable to remove event hook, invalid event: \" + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw(\"The specified event listener is not registered and therefore cannot be removed\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {LocusZoom.Plot}\n     */\n    this.emit = function(event, eventData) {\n        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        this.event_hooks[event].forEach(function(hookToRun) {\n            var eventContext;\n            if (eventData && eventData.sourceID) {\n                // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n                //  when re-emitting the event to plot-level listeners\n                eventContext = eventData;\n            } else {\n                eventContext = {sourceID: sourceID, data: eventData || null};\n            }\n            // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n            //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n            //  override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the plot\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    this.getPageOrigin = function(){\n        var bounding_client_rect = this.svg.node().getBoundingClientRect();\n        var x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        var y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        var container = this.svg.node();\n        while (container.parentNode !== null){\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style(\"position\") !== \"static\"){\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height\n        };\n    };\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @returns {{top: number, left: number}}\n     */\n    this.getContainerOffset = function(){\n        var offset = { top: 0, left: 0 };\n        var container = this.container.offsetParent || null;\n        while (container !== null){\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    };\n\n    //\n    /**\n     * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n     * TODO: Add/ document details of interaction structure as we expand\n     * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n     * @returns {LocusZoom.Plot}\n     */\n    this.interaction = {};\n\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    this.canInteract = function(panel_id){\n        panel_id = panel_id || null;\n        if (panel_id){\n            return ((typeof this.interaction.panel_id == \"undefined\" || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n    // TODO: Possibly superfluous return from constructor\n    return this;\n};\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\nLocusZoom.Plot.DefaultLayout = {\n    state: {},\n    width: 1,\n    height: 1,\n    min_width: 1,\n    min_height: 1,\n    responsive_resize: false,\n    aspect_ratio: 1,\n    panels: [],\n    dashboard: {\n        components: []\n    },\n    panel_boundaries: true,\n    mouse_guide: true\n};\n\n/**\n * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n * @param {('Height'|'Width')} dimension\n * @returns {number}\n */\nLocusZoom.Plot.prototype.sumProportional = function(dimension){\n    if (dimension !== \"height\" && dimension !== \"width\"){\n        throw (\"Bad dimension value passed to LocusZoom.Plot.prototype.sumProportional\");\n    }\n    var total = 0;\n    for (var id in this.panels){\n        // Ensure every panel contributing to the sum has a non-zero proportional dimension\n        if (!this.panels[id].layout[\"proportional_\" + dimension]){\n            this.panels[id].layout[\"proportional_\" + dimension] = 1 / Object.keys(this.panels).length;\n        }\n        total += this.panels[id].layout[\"proportional_\" + dimension];\n    }\n    return total;\n};\n\n/**\n * Resize the plot to fit the bounding container\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.rescaleSVG = function(){\n    var clientRect = this.svg.node().getBoundingClientRect();\n    this.setDimensions(clientRect.width, clientRect.height);\n    return this;\n};\n\n/**\n * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initializeLayout = function(){\n\n    // Sanity check layout values\n    // TODO: Find a way to generally abstract this, maybe into an object that models allowed layout values?\n    if (isNaN(this.layout.width) || this.layout.width <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.height) || this.layout.height <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.aspect_ratio) || this.layout.aspect_ratio <= 0){\n        throw (\"Plot layout parameter `aspect_ratio` must be a positive number\");\n    }\n\n    // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n    if (this.layout.responsive_resize){\n        this.window_onresize = d3.select(window).on(\"resize.lz-\"+this.id, function(){\n            this.rescaleSVG();\n        }.bind(this));\n        // Forcing one additional setDimensions() call after the page is loaded clears up\n        // any disagreements between the initial layout and the loaded responsive container's size\n        d3.select(window).on(\"load.lz-\"+this.id, function(){\n            this.setDimensions();\n        }.bind(this));\n    }\n\n    // Add panels\n    this.layout.panels.forEach(function(panel_layout){\n        this.addPanel(panel_layout);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n *\n * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n *   calculates the appropriate plot dimensions based on all panels.\n * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.setDimensions = function(width, height){\n\n    var id;\n\n    // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n    var min_width = parseFloat(this.layout.min_width) || 0;\n    var min_height = parseFloat(this.layout.min_height) || 0;\n    for (id in this.panels){\n        min_width = Math.max(min_width, this.panels[id].layout.min_width);\n        if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0){\n            min_height = Math.max(min_height, (this.panels[id].layout.min_height / this.panels[id].layout.proportional_height));\n        }\n    }\n    this.layout.min_width = Math.max(min_width, 1);\n    this.layout.min_height = Math.max(min_height, 1);\n    d3.select(this.svg.node().parentNode).style({\n        \"min-width\": this.layout.min_width + \"px\",\n        \"min-height\": this.layout.min_height + \"px\"\n    });\n\n    // If width and height arguments were passed then adjust them against plot minimums if necessary.\n    // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n    if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n        this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n        this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        this.layout.aspect_ratio = this.layout.width / this.layout.height;\n        // Override discrete values if resizing responsively\n        if (this.layout.responsive_resize){\n            if (this.svg){\n                this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n            }\n            this.layout.height = this.layout.width / this.layout.aspect_ratio;\n            if (this.layout.height < this.layout.min_height){\n                this.layout.height = this.layout.min_height;\n                this.layout.width  = this.layout.height * this.layout.aspect_ratio;\n            }\n        }\n        // Resize/reposition panels to fit, update proportional origins if necessary\n        var y_offset = 0;\n        this.panel_ids_by_y_index.forEach(function(panel_id){\n            var panel_width = this.layout.width;\n            var panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n            this.panels[panel_id].setDimensions(panel_width, panel_height);\n            this.panels[panel_id].setOrigin(0, y_offset);\n            this.panels[panel_id].layout.proportional_origin.x = 0;\n            this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n            y_offset += panel_height;\n            this.panels[panel_id].dashboard.update();\n        }.bind(this));\n    }\n\n    // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n    // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n    else if (Object.keys(this.panels).length) {\n        this.layout.width = 0;\n        this.layout.height = 0;\n        for (id in this.panels){\n            this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n            this.layout.height += this.panels[id].layout.height;\n        }\n        this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n        this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n    }\n\n    // Keep aspect ratio in agreement with dimensions\n    this.layout.aspect_ratio = this.layout.width / this.layout.height;\n\n    // Apply layout width and height as discrete values or viewbox values\n    if (this.svg !== null){\n        if (this.layout.responsive_resize){\n            this.svg\n                .attr(\"viewBox\", \"0 0 \" + this.layout.width + \" \" + this.layout.height)\n                .attr(\"preserveAspectRatio\", \"xMinYMin meet\");\n        } else {\n            this.svg.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n        }\n    }\n\n    // If the plot has been initialized then trigger some necessary render functions\n    if (this.initialized){\n        this.panel_boundaries.position();\n        this.dashboard.update();\n        this.curtain.update();\n        this.loader.update();\n    }\n\n    return this.emit(\"layout_changed\");\n};\n\n/**\n * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n * @param {Object} layout\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Plot.prototype.addPanel = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\"){\n        throw \"Invalid panel layout passed to LocusZoom.Plot.prototype.addPanel()\";\n    }\n\n    // Create the Panel and set its parent\n    var panel = new LocusZoom.Panel(layout, this);\n\n    // Store the Panel on the Plot\n    this.panels[panel.id] = panel;\n\n    // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n    if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n        && this.panel_ids_by_y_index.length > 0){\n        // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (panel.layout.y_index < 0){\n            panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n        }\n        this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n        this.applyPanelYIndexesToPanelLayouts();\n    } else {\n        var length = this.panel_ids_by_y_index.push(panel.id);\n        this.panels[panel.id].layout.y_index = length - 1;\n    }\n\n    // Determine if this panel was already in the layout.panels array.\n    // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n    var layout_idx = null;\n    this.layout.panels.forEach(function(panel_layout, idx){\n        if (panel_layout.id === panel.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n    }\n    this.panels[panel.id].layout_idx = layout_idx;\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        this.positionPanels();\n        // Initialize and load data into the new panel\n        this.panels[panel.id].initialize();\n        this.panels[panel.id].reMap();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this.panels[panel.id];\n};\n\n\n/**\n * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n *\n * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.clearPanelData = function(panelId, mode) {\n    mode = mode || \"wipe\";\n\n    // TODO: Add unit tests for this method\n    var panelsList;\n    if (panelId) {\n        panelsList = [panelId];\n    } else {\n        panelsList = Object.keys(this.panels);\n    }\n    var self = this;\n    panelsList.forEach(function(pid) {\n        self.panels[pid].data_layer_ids_by_z_index.forEach(function(dlid){\n            var layer = self.panels[pid].data_layers[dlid];\n            layer.destroyAllTooltips();\n\n            delete self.layout.state[pid + \".\" + dlid];\n            if(mode === \"reset\") {\n                layer.setDefaultState();\n            }\n        });\n    });\n    return this;\n};\n\n/**\n * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n * @param {String} id\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.removePanel = function(id){\n    if (!this.panels[id]){\n        throw (\"Unable to remove panel, ID not found: \" + id);\n    }\n\n    // Hide all panel boundaries\n    this.panel_boundaries.hide();\n\n    // Destroy all tooltips and state vars for all data layers on the panel\n    this.clearPanelData(id);\n\n    // Remove all panel-level HTML overlay elements\n    this.panels[id].loader.hide();\n    this.panels[id].dashboard.destroy(true);\n    this.panels[id].curtain.hide();\n\n    // Remove the svg container for the panel if it exists\n    if (this.panels[id].svg.container){\n        this.panels[id].svg.container.remove();\n    }\n\n    // Delete the panel and its presence in the plot layout and state\n    this.layout.panels.splice(this.panels[id].layout_idx, 1);\n    delete this.panels[id];\n    delete this.layout.state[id];\n\n    // Update layout_idx values for all remaining panels\n    this.layout.panels.forEach(function(panel_layout, idx){\n        this.panels[panel_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    // Remove the panel id from the y_index array\n    this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n    this.applyPanelYIndexesToPanelLayouts();\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n        this.layout.min_height = this._base_layout.min_height;\n        this.layout.min_width = this._base_layout.min_width;\n\n        this.positionPanels();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this;\n};\n\n\n/**\n * Automatically position panels based on panel positioning rules and values.\n * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n *\n * TODO: This logic currently only supports dynamic positioning of panels to prevent overlap in a VERTICAL orientation.\n *      Some framework exists for positioning panels in horizontal orientations as well (width, proportional_width, origin.x, etc.)\n *      but the logic for keeping these user-definable values straight approaches the complexity of a 2D box-packing algorithm.\n *      That's complexity we don't need right now, and may not ever need, so it's on hiatus until a use case materializes.\n */\nLocusZoom.Plot.prototype.positionPanels = function(){\n\n    var id;\n\n    // We want to enforce that all x-linked panels have consistent horizontal margins\n    // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n    // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n    var x_linked_margins = { left: 0, right: 0 };\n\n    // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n    // proportional heights for all panels with a null value from discretely set dimensions.\n    // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n    for (id in this.panels){\n        if (this.panels[id].layout.proportional_height === null){\n            this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n        }\n        if (this.panels[id].layout.proportional_width === null){\n            this.panels[id].layout.proportional_width = 1;\n        }\n        if (this.panels[id].layout.interaction.x_linked){\n            x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n            x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n        }\n    }\n\n    // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n    var total_proportional_height = this.sumProportional(\"height\");\n    if (!total_proportional_height){\n        return this;\n    }\n    var proportional_adjustment = 1 / total_proportional_height;\n    for (id in this.panels){\n        this.panels[id].layout.proportional_height *= proportional_adjustment;\n    }\n\n    // Update origins on all panels without changing plot-level dimensions yet\n    // Also apply x-linked margins to x-linked panels, updating widths as needed\n    var y_offset = 0;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setOrigin(0, y_offset);\n        this.panels[panel_id].layout.proportional_origin.x = 0;\n        y_offset += this.panels[panel_id].layout.height;\n        if (this.panels[panel_id].layout.interaction.x_linked){\n            var delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0)\n                      + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n            this.panels[panel_id].layout.width += delta;\n            this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n            this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n            this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n        }\n    }.bind(this));\n    var calculated_plot_height = y_offset;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n    }.bind(this));\n\n    // Update dimensions on the plot to accommodate repositioned panels\n    this.setDimensions();\n\n    // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width,\n                                            this.layout.height * this.panels[panel_id].layout.proportional_height);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n *\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initialize = function(){\n\n    // Ensure proper responsive class is present on the containing node if called for\n    if (this.layout.responsive_resize){\n        d3.select(this.container).classed(\"lz-container-responsive\", true);\n    }\n\n    // Create an element/layer for containing mouse guides\n    if (this.layout.mouse_guide) {\n        var mouse_guide_svg = this.svg.append(\"g\")\n            .attr(\"class\", \"lz-mouse_guide\").attr(\"id\", this.id + \".mouse_guide\");\n        var mouse_guide_vertical_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-vertical\").attr(\"x\",-1);\n        var mouse_guide_horizontal_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-horizontal\").attr(\"y\",-1);\n        this.mouse_guide = {\n            svg: mouse_guide_svg,\n            vertical: mouse_guide_vertical_svg,\n            horizontal: mouse_guide_horizontal_svg\n        };\n    }\n\n    // Add curtain and loader prototpyes to the plot\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    // Create the panel_boundaries object with show/position/hide methods\n    this.panel_boundaries = {\n        parent: this,\n        hide_timeout: null,\n        showing: false,\n        dragging: false,\n        selectors: [],\n        corner_selector: null,\n        show: function(){\n            // Generate panel boundaries\n            if (!this.showing && !this.parent.curtain.showing){\n                this.showing = true;\n                // Loop through all panels to create a horizontal boundary for each\n                this.parent.panel_ids_by_y_index.forEach(function(panel_id, panel_idx){\n                    var selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                        .attr(\"class\", \"lz-panel-boundary\")\n                        .attr(\"title\", \"Resize panel\");\n                    selector.append(\"span\");\n                    var panel_resize_drag = d3.behavior.drag();\n                    panel_resize_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                    panel_resize_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                    panel_resize_drag.on(\"drag\", function(){\n                        // First set the dimensions on the panel we're resizing\n                        var this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                        var original_panel_height = this_panel.layout.height;\n                        this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                        var panel_height_change = this_panel.layout.height - original_panel_height;\n                        var new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                        // Next loop through all panels.\n                        // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                        // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                        this.parent.panel_ids_by_y_index.forEach(function(loop_panel_id, loop_panel_idx){\n                            var loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                            loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                            if (loop_panel_idx > panel_idx){\n                                loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                loop_panel.dashboard.position();\n                            }\n                        }.bind(this));\n                        // Reset dimensions on the entire plot and reposition panel boundaries\n                        this.parent.positionPanels();\n                        this.position();\n                    }.bind(this));\n                    selector.call(panel_resize_drag);\n                    this.parent.panel_boundaries.selectors.push(selector);\n                }.bind(this));\n                // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                var corner_selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                    .attr(\"class\", \"lz-panel-corner-boundary\")\n                    .attr(\"title\", \"Resize plot\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-outer\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-inner\");\n                var corner_drag = d3.behavior.drag();\n                corner_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                corner_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                corner_drag.on(\"drag\", function(){\n                    this.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                }.bind(this.parent));\n                corner_selector.call(corner_drag);\n                this.parent.panel_boundaries.corner_selector = corner_selector;\n            }\n            return this.position();\n        },\n        position: function(){\n            if (!this.showing){ return this; }\n            // Position panel boundaries\n            var plot_page_origin = this.parent.getPageOrigin();\n            this.selectors.forEach(function(selector, panel_idx){\n                var panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].getPageOrigin();\n                var left = plot_page_origin.x;\n                var top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                var width = this.parent.layout.width - 1;\n                selector.style({\n                    top: top + \"px\",\n                    left: left + \"px\",\n                    width: width + \"px\"\n                });\n                selector.select(\"span\").style({\n                    width: width + \"px\"\n                });\n            }.bind(this));\n            // Position corner selector\n            var corner_padding = 10;\n            var corner_size = 16;\n            this.corner_selector.style({\n                top: (plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size) + \"px\",\n                left: (plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size) + \"px\"\n            });\n            return this;\n        },\n        hide: function(){\n            if (!this.showing){ return this; }\n            this.showing = false;\n            // Remove panel boundaries\n            this.selectors.forEach(function(selector){ selector.remove(); });\n            this.selectors = [];\n            // Remove corner boundary\n            this.corner_selector.remove();\n            this.corner_selector = null;\n            return this;\n        }\n    };\n\n    // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n    if (this.layout.panel_boundaries){\n        d3.select(this.svg.node().parentNode).on(\"mouseover.\" + this.id + \".panel_boundaries\", function(){\n            clearTimeout(this.panel_boundaries.hide_timeout);\n            this.panel_boundaries.show();\n        }.bind(this));\n        d3.select(this.svg.node().parentNode).on(\"mouseout.\" + this.id + \".panel_boundaries\", function(){\n            this.panel_boundaries.hide_timeout = setTimeout(function(){\n                this.panel_boundaries.hide();\n            }.bind(this), 300);\n        }.bind(this));\n    }\n\n    // Create the dashboard object and immediately show it\n    this.dashboard = new LocusZoom.Dashboard(this).show();\n\n    // Initialize all panels\n    for (var id in this.panels){\n        this.panels[id].initialize();\n    }\n\n    // Define plot-level mouse events\n    var namespace = \".\" + this.id;\n    if (this.layout.mouse_guide) {\n        var mouseout_mouse_guide = function(){\n            this.mouse_guide.vertical.attr(\"x\", -1);\n            this.mouse_guide.horizontal.attr(\"y\", -1);\n        }.bind(this);\n        var mousemove_mouse_guide = function(){\n            var coords = d3.mouse(this.svg.node());\n            this.mouse_guide.vertical.attr(\"x\", coords[0]);\n            this.mouse_guide.horizontal.attr(\"y\", coords[1]);\n        }.bind(this);\n        this.svg\n            .on(\"mouseout\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"touchleave\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"mousemove\" + namespace + \"-mouse_guide\", mousemove_mouse_guide);\n    }\n    var mouseup = function(){\n        this.stopDrag();\n    }.bind(this);\n    var mousemove = function(){\n        if (this.interaction.dragging){\n            var coords = d3.mouse(this.svg.node());\n            if (d3.event){ d3.event.preventDefault(); }\n            this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n            this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n            this.panels[this.interaction.panel_id].render();\n            this.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.panels[panel_id].render();\n            }.bind(this));\n        }\n    }.bind(this);\n    this.svg\n        .on(\"mouseup\" + namespace, mouseup)\n        .on(\"touchend\" + namespace, mouseup)\n        .on(\"mousemove\" + namespace, mousemove)\n        .on(\"touchmove\" + namespace, mousemove);\n\n    // Add an extra namespaced mouseup handler to the containing body, if there is one\n    // This helps to stop interaction events gracefully when dragging outside of the plot element\n    if (!d3.select(\"body\").empty()){\n        d3.select(\"body\")\n            .on(\"mouseup\" + namespace, mouseup)\n            .on(\"touchend\" + namespace, mouseup);\n    }\n\n    this.initialized = true;\n\n    // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n    // positioning. TODO: make this additional call unnecessary.\n    var client_rect = this.svg.node().getBoundingClientRect();\n    var width = client_rect.width ? client_rect.width : this.layout.width;\n    var height = client_rect.height ? client_rect.height : this.layout.height;\n    this.setDimensions(width, height);\n\n    return this;\n\n};\n\n/**\n * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n * @returns {Promise}\n */\nLocusZoom.Plot.prototype.refresh = function(){\n    return this.applyState();\n};\n\n\n/**\n * A user-defined callback function that can receive (and potentially act on) new plot data.\n * @callback externalDataCallback\n * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n *  a data layer making an equivalent request.\n */\n\n/**\n * A user-defined callback function that can respond to errors received during a previous operation\n * @callback externalErrorCallback\n * @param err A representation of the error that occurred\n */\n\n/**\n * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n *\n * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n *  using the same fields syntax and underlying methods as data layers.\n *\n * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n *  Different data sources should be prefixed by the source name.\n * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n *  new data is received by the plot.\n * @param {Object} [opts] Options\n * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n *  occurs during the data request or subsequent callback operations\n * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n *  uncombined record info\n *  @return {function} The newly created event listener, to allow for later cleanup/removal\n */\nLocusZoom.Plot.prototype.subscribeToData = function(fields, success_callback, opts) {\n    opts = opts || {};\n\n    // Register an event listener that is notified whenever new data has been rendered\n    var error_callback = opts.onerror || function(err) {\n        console.log(\"An error occurred while acting on an external callback\", err);\n    };\n    var self = this;\n\n    var listener = function() {\n        try {\n            self.lzd.getData(self.state, fields)\n                .then(function (new_data) {\n                    success_callback(opts.discrete ? new_data.discrete : new_data.body);\n                }).catch(error_callback);\n        } catch (error) {\n            // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n            error_callback(error);\n        }\n    };\n    this.on(\"data_rendered\", listener);\n    return listener;\n};\n\n/**\n * Update state values and trigger a pull for fresh data on all data sources for all data layers\n * @param state_changes\n * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n */\nLocusZoom.Plot.prototype.applyState = function(state_changes){\n    state_changes = state_changes || {};\n    if (typeof state_changes != \"object\"){\n        throw(\"LocusZoom.applyState only accepts an object; \" + (typeof state_changes) + \" given\");\n    }\n\n    // First make a copy of the current (old) state to work with\n    var new_state = JSON.parse(JSON.stringify(this.state));\n\n    // Apply changes by top-level property to the new state\n    for (var property in state_changes) {\n        new_state[property] = state_changes[property];\n    }\n\n    // Validate the new state (may do nothing, may do a lot, depends on how the user has things set up)\n    new_state = LocusZoom.validateState(new_state, this.layout);\n\n    // Apply new state to the actual state\n    for (property in new_state) {\n        this.state[property] = new_state[property];\n    }\n\n    // Generate requests for all panels given new state\n    this.emit(\"data_requested\");\n    this.remap_promises = [];\n    this.loading_data = true;\n    for (var id in this.panels){\n        this.remap_promises.push(this.panels[id].reMap());\n    }\n\n    return Q.all(this.remap_promises)\n        .catch(function(error){\n            console.error(error);\n            this.curtain.drop(error);\n            this.loading_data = false;\n        }.bind(this))\n        .then(function(){\n            // TODO: Check logic here; in some promise implementations, this would cause the error to be considered handled, and \"then\" would always fire. (may or may not be desired behavior)\n            // Update dashboard / components\n            this.dashboard.update();\n\n            // Apply panel-level state values\n            this.panel_ids_by_y_index.forEach(function(panel_id){\n                var panel = this.panels[panel_id];\n                panel.dashboard.update();\n                // Apply data-layer-level state values\n                panel.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n                    var data_layer = this.data_layers[data_layer_id];\n                    var state_id = panel_id + \".\" + data_layer_id;\n                    for (var property in this.state[state_id]){\n                        if (!this.state[state_id].hasOwnProperty(property)){ continue; }\n                        if (Array.isArray(this.state[state_id][property])){\n                            this.state[state_id][property].forEach(function(element_id){\n                                try {\n                                    this.setElementStatus(property, this.getElementById(element_id), true);\n                                } catch (e){\n                                    console.error(\"Unable to apply state: \" + state_id + \", \" + property);\n                                }\n                            }.bind(data_layer));\n                        }\n                    }\n                }.bind(panel));\n            }.bind(this));\n\n            // Emit events\n            this.emit(\"layout_changed\");\n            this.emit(\"data_rendered\");\n            this.emit(\"state_changed\", state_changes);\n\n            this.loading_data = false;\n\n        }.bind(this));\n};\n\n/**\n * Register interactions along the specified axis, provided that the target panel allows interaction.\n *\n * @param {LocusZoom.Panel} panel\n * @param {('x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.startDrag = function(panel, method){\n\n    panel = panel || null;\n    method = method || null;\n\n    var axis = null;\n    switch (method){\n    case \"background\":\n    case \"x_tick\":\n        axis = \"x\";\n        break;\n    case \"y1_tick\":\n        axis = \"y1\";\n        break;\n    case \"y2_tick\":\n        axis = \"y2\";\n        break;\n    }\n\n    if (!(panel instanceof LocusZoom.Panel) || !axis || !this.canInteract()){ return this.stopDrag(); }\n\n    var coords = d3.mouse(this.svg.node());\n    this.interaction = {\n        panel_id: panel.id,\n        linked_panel_ids: panel.getLinkedPanelIds(axis),\n        dragging: {\n            method: method,\n            start_x: coords[0],\n            start_y: coords[1],\n            dragged_x: 0,\n            dragged_y: 0,\n            axis: axis\n        }\n    };\n\n    this.svg.style(\"cursor\", \"all-scroll\");\n\n    return this;\n\n};\n\n/**\n * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n *   clear the event when complete\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.stopDrag = function(){\n\n    if (!this.interaction.dragging){ return this; }\n\n    if (typeof this.panels[this.interaction.panel_id] != \"object\"){\n        this.interaction = {};\n        return this;\n    }\n    var panel = this.panels[this.interaction.panel_id];\n\n    // Helper function to find the appropriate axis layouts on child data layers\n    // Once found, apply the extent as floor/ceiling and remove all other directives\n    // This forces all associated axes to conform to the extent generated by a drag action\n    var overrideAxisLayout = function(axis, axis_number, extent){\n        panel.data_layer_ids_by_z_index.forEach(function(id){\n            if (panel.data_layers[id].layout[axis+\"_axis\"].axis === axis_number){\n                panel.data_layers[id].layout[axis+\"_axis\"].floor = extent[0];\n                panel.data_layers[id].layout[axis+\"_axis\"].ceiling = extent[1];\n                delete panel.data_layers[id].layout[axis+\"_axis\"].lower_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].upper_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].min_extent;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].ticks;\n            }\n        });\n    };\n\n    switch(this.interaction.dragging.method){\n    case \"background\":\n    case \"x_tick\":\n        if (this.interaction.dragging.dragged_x !== 0){\n            overrideAxisLayout(\"x\", 1, panel.x_extent);\n            this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n        }\n        break;\n    case \"y1_tick\":\n    case \"y2_tick\":\n        if (this.interaction.dragging.dragged_y !== 0){\n            // TODO: Hardcoded assumption of only two possible axes with single-digit #s (switch/case)\n            var y_axis_number = parseInt(this.interaction.dragging.method[1]);\n            overrideAxisLayout(\"y\", y_axis_number, panel[\"y\"+y_axis_number+\"_extent\"]);\n        }\n        break;\n    }\n\n    this.interaction = {};\n    this.svg.style(\"cursor\", null);\n\n    return this;\n\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n * @class\n * @param {Object} layout\n * @param {LocusZoom.Plot|null} parent\n*/\nLocusZoom.Panel = function(layout, parent) {\n\n    if (typeof layout !== \"object\"){\n        throw \"Unable to create panel, invalid layout\";\n    }\n\n    /** @member {LocusZoom.Plot|null} */\n    this.parent = parent || null;\n    /** @member {LocusZoom.Plot|null} */\n    this.parent_plot = parent;\n\n    // Ensure a valid ID is present. If there is no valid ID then generate one\n    if (typeof layout.id !== \"string\" || !layout.id.length){\n        if (!this.parent){\n            layout.id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n        } else {\n            var id = null;\n            var generateID = function(){\n                id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n                if (id == null || typeof this.parent.panels[id] != \"undefined\"){\n                    id = generateID();\n                }\n            }.bind(this);\n            layout.id = id;\n        }\n    } else if (this.parent) {\n        if (typeof this.parent.panels[layout.id] !== \"undefined\"){\n            throw \"Cannot create panel with id [\" + layout.id + \"]; panel with that id already exists\";\n        }\n    }\n    /** @member {String} */\n    this.id = layout.id;\n\n    /** @member {Boolean} */\n    this.initialized = false;\n    /**\n     * The index of this panel in the parent plot's `layout.panels`\n     * @member {number}\n     * */\n    this.layout_idx = null;\n    /** @member {Object} */\n    this.svg = {};\n\n    /**\n     * A JSON-serializable object used to describe the composition of the Panel\n     * @member {Object}\n     */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.Panel.DefaultLayout);\n\n    // Define state parameters specific to this panel\n    if (this.parent){\n        /** @member {Object} */\n        this.state = this.parent.state;\n\n        /** @member {String} */\n        this.state_id = this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n    } else {\n        this.state = null;\n        this.state_id = null;\n    }\n\n    /** @member {Object} */\n    this.data_layers = {};\n    /** @member {String[]} */\n    this.data_layer_ids_by_z_index = [];\n\n    /** @protected */\n    this.applyDataLayerZIndexesToDataLayerLayouts = function(){\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    }.bind(this);\n\n    /**\n     * Track data requests in progress\n     * @member {Promise[]}\n     *  @protected\n     */\n    this.data_promises = [];\n\n    /** @member {d3.scale} */\n    this.x_scale  = null;\n    /** @member {d3.scale} */\n    this.y1_scale = null;\n    /** @member {d3.scale} */\n    this.y2_scale = null;\n\n    /** @member {d3.extent} */\n    this.x_extent  = null;\n    /** @member {d3.extent} */\n    this.y1_extent = null;\n    /** @member {d3.extent} */\n    this.y2_extent = null;\n\n    /** @member {Number[]} */\n    this.x_ticks  = [];\n    /** @member {Number[]} */\n    this.y1_ticks = [];\n    /** @member {Number[]} */\n    this.y2_ticks = [];\n\n    /**\n     * A timeout ID as returned by setTimeout\n     * @protected\n     * @member {number}\n     */\n    this.zoom_timeout = null;\n\n    /** @returns {string} */\n    this.getBaseId = function(){\n        return this.parent.id + \".\" + this.id;\n    };\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": [],\n        \"element_selection\": []\n    };\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: panel - A data element in any of the panel's data layers has been clicked.\n     *   - `element_selection` - context: panel - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of the event (as defined in `event_hooks`)\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook){\n        // TODO: Dry plot and panel event code into a shared mixin\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Panel}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof \"event\" != \"string\" || !Array.isArray(theseHooks)){\n            throw(\"Unable to remove event hook, invalid event: \" + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw(\"The specified event listener is not registered and therefore cannot be removed\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {LocusZoom.Panel}\n     */\n    this.emit = function(event, eventData, bubble)  {\n        bubble = bubble || false;\n\n        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        if (typeof eventData === \"boolean\" && arguments.length === 2) {\n            // Overloaded method signature: emit(event, bubble)\n            bubble = eventData;\n            eventData = null;\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        var eventContext = {sourceID: sourceID, data: eventData || null};\n        this.event_hooks[event].forEach(function(hookToRun) {\n            // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n            // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        if (bubble && this.parent) {\n            this.parent.emit(event, eventContext);\n        }\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @returns {{x: Number, y: Number}}\n     */\n    this.getPageOrigin = function(){\n        var plot_origin = this.parent.getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y\n        };\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n\n    return this;\n\n};\n\n/**\n * Default panel layout\n * @static\n * @type {Object}\n */\nLocusZoom.Panel.DefaultLayout = {\n    title: { text: \"\", style: {}, x: 10, y: 22 },\n    y_index: null,\n    width:  0,\n    height: 0,\n    origin: { x: 0, y: null },\n    min_width: 1,\n    min_height: 1,\n    proportional_width: null,\n    proportional_height: null,\n    proportional_origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: \"clear_selections\",\n    dashboard: {\n        components: []\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 }\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {}\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false\n    },\n    data_layers: []\n};\n\n/**\n * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n *   and preparing / positioning data layers as appropriate.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initializeLayout = function(){\n\n    // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n    // This will default the panel to taking up the full width of the plot.\n    if (this.layout.width === 0 && this.layout.proportional_width === null){\n        this.layout.proportional_width = 1;\n    }\n\n    // If the layout is missing BOTH height and proportional height then set the proportional height to\n    // an equal share of the plot's current height.\n    if (this.layout.height === 0 && this.layout.proportional_height === null){\n        var panel_count = Object.keys(this.parent.panels).length;\n        if (panel_count > 0){\n            this.layout.proportional_height = (1 / panel_count);\n        } else {\n            this.layout.proportional_height = 1;\n        }\n    }\n\n    // Set panel dimensions, origin, and margin\n    this.setDimensions();\n    this.setOrigin();\n    this.setMargin();\n\n    // Set ranges\n    // TODO: Define stub values in constructor\n    this.x_range = [0, this.layout.cliparea.width];\n    this.y1_range = [this.layout.cliparea.height, 0];\n    this.y2_range = [this.layout.cliparea.height, 0];\n\n    // Initialize panel axes\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render ===false){\n            // The default layout sets the axis to an empty object, so set its render boolean here\n            this.layout.axes[axis].render = false;\n        } else {\n            this.layout.axes[axis].render = true;\n            this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n            this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n        }\n    }.bind(this));\n\n    // Add data layers (which define x and y extents)\n    this.layout.data_layers.forEach(function(data_layer_layout){\n        this.addDataLayer(data_layer_layout);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n *\n * @public\n * @param {number} [width]\n * @param {number} [height]\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setDimensions = function(width, height){\n    if (typeof width != \"undefined\" && typeof height != \"undefined\"){\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        }\n    } else {\n        if (this.layout.proportional_width !== null){\n            this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n        }\n        if (this.layout.proportional_height !== null){\n            this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n        }\n    }\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    if (this.svg.clipRect){\n        this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n    }\n    if (this.initialized){\n        this.render();\n        this.curtain.update();\n        this.loader.update();\n        this.dashboard.update();\n        if (this.legend){ this.legend.position(); }\n    }\n    return this;\n};\n\n/**\n * Set panel origin on the plot, and re-render as appropriate\n *\n * @public\n * @param {number} x\n * @param {number} y\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setOrigin = function(x, y){\n    if (!isNaN(x) && x >= 0){ this.layout.origin.x = Math.max(Math.round(+x), 0); }\n    if (!isNaN(y) && y >= 0){ this.layout.origin.y = Math.max(Math.round(+y), 0); }\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set margins around this panel\n * @public\n * @param {number} top\n * @param {number} right\n * @param {number} bottom\n * @param {number} left\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setMargin = function(top, right, bottom, left){\n    var extra;\n    if (!isNaN(top)    && top    >= 0){ this.layout.margin.top    = Math.max(Math.round(+top),    0); }\n    if (!isNaN(right)  && right  >= 0){ this.layout.margin.right  = Math.max(Math.round(+right),  0); }\n    if (!isNaN(bottom) && bottom >= 0){ this.layout.margin.bottom = Math.max(Math.round(+bottom), 0); }\n    if (!isNaN(left)   && left   >= 0){ this.layout.margin.left   = Math.max(Math.round(+left),   0); }\n    if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height){\n        extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n        this.layout.margin.top -= extra;\n        this.layout.margin.bottom -= extra;\n    }\n    if (this.layout.margin.left + this.layout.margin.right > this.layout.width){\n        extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.layout.width) / 2);\n        this.layout.margin.left -= extra;\n        this.layout.margin.right -= extra;\n    }\n    [\"top\", \"right\", \"bottom\", \"left\"].forEach(function(m){\n        this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n    }.bind(this));\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    this.layout.cliparea.origin.x = this.layout.margin.left;\n    this.layout.cliparea.origin.y = this.layout.margin.top;\n\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n *   string, the title DOM element will be set to display: none.\n *\n * @param {string|object|null} title The title text, or an object with additional configuration\n * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n    NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setTitle = function(title){\n    if (typeof this.layout.title == \"string\"){\n        var text = this.layout.title;\n        this.layout.title = { text: text, x: 0, y: 0, style: {} };\n    }\n    if (typeof title == \"string\"){\n        this.layout.title.text = title;\n    } else if (typeof title == \"object\" && title !== null){\n        this.layout.title = LocusZoom.Layouts.merge(title, this.layout.title);\n    }\n    if (this.layout.title.text.length){\n        this.title.attr(\"display\", null)\n            .attr(\"x\", parseFloat(this.layout.title.x))\n            .attr(\"y\", parseFloat(this.layout.title.y))\n            .style(this.layout.title.style)\n            .text(this.layout.title.text);\n    } else {\n        this.title.attr(\"display\", \"none\");\n    }\n    return this;\n};\n\n\n/**\n * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n *   elements such as axes,  title, and loader/curtain.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initialize = function(){\n\n    // Append a container group element to house the main panel group element and the clip path\n    // Position with initial layout parameters\n    this.svg.container = this.parent.svg.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel_container\")\n        .attr(\"transform\", \"translate(\" + (this.layout.origin.x || 0) + \",\" + (this.layout.origin.y || 0) + \")\");\n\n    // Append clip path to the parent svg element, size with initial layout parameters\n    var clipPath = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\");\n    this.svg.clipRect = clipPath.append(\"rect\")\n        .attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Append svg group for rendering all panel child elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    // Add curtain and loader prototypes to the panel\n    /** @member {Object} */\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    /** @member {Object} */\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    /**\n     * Create the dashboard object and hang components on it as defined by panel layout\n     * @member {LocusZoom.Dashboard}\n     */\n    this.dashboard = new LocusZoom.Dashboard(this);\n\n    // Inner border\n    this.inner_border = this.svg.group.append(\"rect\")\n        .attr(\"class\", \"lz-panel-background\")\n        .on(\"click\", function(){\n            if (this.layout.background_click === \"clear_selections\"){ this.clearSelections(); }\n        }.bind(this));\n\n    // Add the title\n    /** @member {Element} */\n    this.title = this.svg.group.append(\"text\").attr(\"class\", \"lz-panel-title\");\n    if (typeof this.layout.title != \"undefined\"){ this.setTitle(); }\n\n    // Initialize Axes\n    this.svg.x_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".x_axis\").attr(\"class\", \"lz-x lz-axis\");\n    if (this.layout.axes.x.render){\n        this.svg.x_axis_label = this.svg.x_axis.append(\"text\")\n            .attr(\"class\", \"lz-x lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y1_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y1_axis\").attr(\"class\", \"lz-y lz-y1 lz-axis\");\n    if (this.layout.axes.y1.render){\n        this.svg.y1_axis_label = this.svg.y1_axis.append(\"text\")\n            .attr(\"class\", \"lz-y1 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y2_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y2_axis\").attr(\"class\", \"lz-y lz-y2 lz-axis\");\n    if (this.layout.axes.y2.render){\n        this.svg.y2_axis_label = this.svg.y2_axis.append(\"text\")\n            .attr(\"class\", \"lz-y2 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n\n    // Initialize child Data Layers\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].initialize();\n    }.bind(this));\n\n    /**\n     * Legend object, as defined by panel layout and child data layer layouts\n     * @member {LocusZoom.Legend}\n     * */\n    this.legend = null;\n    if (this.layout.legend){\n        this.legend = new LocusZoom.Legend(this);\n    }\n\n    // Establish panel background drag interaction mousedown event handler (on the panel background)\n    if (this.layout.interaction.drag_background_to_pan){\n        var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n        var mousedown = function(){\n            this.parent.startDrag(this, \"background\");\n        }.bind(this);\n        this.svg.container.select(\".lz-panel-background\")\n            .on(\"mousedown\" + namespace + \".background\", mousedown)\n            .on(\"touchstart\" + namespace + \".background\", mousedown);\n    }\n\n    return this;\n\n};\n\n/**\n * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n */\nLocusZoom.Panel.prototype.resortDataLayers = function(){\n    var sort = [];\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        sort.push(this.data_layers[id].layout.z_index);\n    }.bind(this));\n    this.svg.group.selectAll(\"g.lz-data_layer-container\").data(sort).sort(d3.ascending);\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n};\n\n/**\n * Get an array of panel IDs that are axis-linked to this panel\n * @param {('x'|'y1'|'y2')} axis\n * @returns {Array}\n */\nLocusZoom.Panel.prototype.getLinkedPanelIds = function(axis){\n    axis = axis || null;\n    var linked_panel_ids = [];\n    if ([\"x\",\"y1\",\"y2\"].indexOf(axis) === -1){ return linked_panel_ids; }\n    if (!this.layout.interaction[axis + \"_linked\"]){ return linked_panel_ids; }\n    this.parent.panel_ids_by_y_index.forEach(function(panel_id){\n        if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[axis + \"_linked\"]){\n            linked_panel_ids.push(panel_id);\n        }\n    }.bind(this));\n    return linked_panel_ids;\n};\n\n/**\n * Move a panel up relative to others by y-index\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveUp = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Move a panel down (y-axis) relative to others in the plot\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveDown = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n *   in the layout provided.\n * @param {object} layout\n * @returns {*}\n */\nLocusZoom.Panel.prototype.addDataLayer = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\" || typeof layout.id !== \"string\" || !layout.id.length){\n        throw \"Invalid data layer layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n    if (typeof this.data_layers[layout.id] !== \"undefined\"){\n        throw \"Cannot create data_layer with id [\" + layout.id + \"]; data layer with that id already exists in the panel\";\n    }\n    if (typeof layout.type !== \"string\"){\n        throw \"Invalid data layer type in layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n\n    // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n    if (typeof layout.y_axis == \"object\" && (typeof layout.y_axis.axis == \"undefined\" || [1,2].indexOf(layout.y_axis.axis) === -1)){\n        layout.y_axis.axis = 1;\n    }\n\n    // Create the Data Layer\n    var data_layer = LocusZoom.DataLayers.get(layout.type, layout, this);\n\n    // Store the Data Layer on the Panel\n    this.data_layers[data_layer.id] = data_layer;\n\n    // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n    if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n        && this.data_layer_ids_by_z_index.length > 0){\n        // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (data_layer.layout.z_index < 0){\n            data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n        }\n        this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    } else {\n        var length = this.data_layer_ids_by_z_index.push(data_layer.id);\n        this.data_layers[data_layer.id].layout.z_index = length - 1;\n    }\n\n    // Determine if this data layer was already in the layout.data_layers array.\n    // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n    var layout_idx = null;\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        if (data_layer_layout.id === data_layer.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n    }\n    this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n    return this.data_layers[data_layer.id];\n};\n\n/**\n * Remove a data layer by id\n * @param {string} id\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.removeDataLayer = function(id){\n    if (!this.data_layers[id]){\n        throw (\"Unable to remove data layer, ID not found: \" + id);\n    }\n\n    // Destroy all tooltips for the data layer\n    this.data_layers[id].destroyAllTooltips();\n\n    // Remove the svg container for the data layer if it exists\n    if (this.data_layers[id].svg.container){\n        this.data_layers[id].svg.container.remove();\n    }\n\n    // Delete the data layer and its presence in the panel layout and state\n    this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n    delete this.state[this.data_layers[id].state_id];\n    delete this.data_layers[id];\n\n    // Remove the data_layer id from the z_index array\n    this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n    // Update layout_idx and layout.z_index values for all remaining data_layers\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        this.data_layers[data_layer_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Clear all selections on all data layers\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.clearSelections = function(){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(\"selected\", false);\n    }.bind(this));\n    return this;\n};\n\n/**\n * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n *   from the API as the viewing region changes\n * @returns {Promise}\n */\nLocusZoom.Panel.prototype.reMap = function(){\n    this.emit(\"data_requested\");\n    this.data_promises = [];\n\n    // Remove any previous error messages before attempting to load new data\n    this.curtain.hide();\n    // Trigger reMap on each Data Layer\n    for (var id in this.data_layers){\n        try {\n            this.data_promises.push(this.data_layers[id].reMap());\n        } catch (error) {\n            console.warn(error);\n            this.curtain.show(error);\n        }\n    }\n    // When all finished trigger a render\n    return Q.all(this.data_promises)\n        .then(function(){\n            this.initialized = true;\n            this.render();\n            this.emit(\"layout_changed\", true);\n            this.emit(\"data_rendered\");\n        }.bind(this))\n        .catch(function(error){\n            console.warn(error);\n            this.curtain.show(error);\n        }.bind(this));\n};\n\n/**\n * Iterate over data layers to generate panel axis extents\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.generateExtents = function(){\n\n    // Reset extents\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        this[axis + \"_extent\"] = null;\n    }.bind(this));\n\n    // Loop through the data layers\n    for (var id in this.data_layers){\n\n        var data_layer = this.data_layers[id];\n\n        // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n        if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled){\n            this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent(\"x\")));\n        }\n\n        // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n        if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled){\n            var y_axis = \"y\" + data_layer.layout.y_axis.axis;\n            this[y_axis+\"_extent\"] = d3.extent((this[y_axis+\"_extent\"] || []).concat(data_layer.getAxisExtent(\"y\")));\n        }\n\n    }\n\n    // Override x_extent from state if explicitly defined to do so\n    if (this.layout.axes.x && this.layout.axes.x.extent === \"state\"){\n        this.x_extent = [ this.state.start, this.state.end ];\n    }\n\n    return this;\n\n};\n\n/**\n * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n *   1. An array of specific tick marks\n *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n *     object to override the layer's default presentation settings\n *   3. Generate generic tick marks based on the extent of the data\n * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n * @returns {Number[]|Object[]}  TODO: number format?\n *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.Panel.prototype.generateTicks = function(axis){\n\n    // Parse an explicit 'ticks' attribute in the axis layout\n    if (this.layout.axes[axis].ticks){\n        var layout = this.layout.axes[axis];\n\n        var baseTickConfig = layout.ticks;\n        if (Array.isArray(baseTickConfig)){\n            // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n            return baseTickConfig;\n        }\n\n        if (typeof baseTickConfig === \"object\") {\n            // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n            //   data layer to report the tick marks that it thinks it needs\n            // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n            var self = this;\n\n            // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n            var config = { position: baseTickConfig.position };\n\n            var combinedTicks = this.data_layer_ids_by_z_index.reduce(function(acc, data_layer_id) {\n                var nextLayer = self.data_layers[data_layer_id];\n                return acc.concat(nextLayer.getTicks(axis, config));\n            }, []);\n\n            return combinedTicks.map(function(item) {\n                // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                var itemConfig = {};\n                itemConfig = LocusZoom.Layouts.merge(itemConfig, baseTickConfig);\n                return LocusZoom.Layouts.merge(itemConfig, item);\n            });\n        }\n    }\n\n    // If no other configuration is provided, attempt to generate ticks from the extent\n    if (this[axis + \"_extent\"]) {\n        return LocusZoom.prettyTicks(this[axis + \"_extent\"], \"both\");\n    }\n    return [];\n};\n\n/**\n * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n *   prepared the first time via `initialize`\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.render = function(){\n\n    // Position the panel container\n    this.svg.container.attr(\"transform\", \"translate(\" + this.layout.origin.x +  \",\" + this.layout.origin.y + \")\");\n\n    // Set size on the clip rect\n    this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Set and position the inner border, style if necessary\n    this.inner_border\n        .attr(\"x\", this.layout.margin.left).attr(\"y\", this.layout.margin.top)\n        .attr(\"width\", this.layout.width - (this.layout.margin.left + this.layout.margin.right))\n        .attr(\"height\", this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n    if (this.layout.inner_border){\n        this.inner_border.style({ \"stroke-width\": 1, \"stroke\": this.layout.inner_border });\n    }\n\n    // Set/update panel title if necessary\n    this.setTitle();\n\n    // Regenerate all extents\n    this.generateExtents();\n\n    // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n    // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n    var constrain = function(value, limit_exponent){\n        var neg_min = Math.pow(-10, limit_exponent);\n        var neg_max = Math.pow(-10, -limit_exponent);\n        var pos_min = Math.pow(10, -limit_exponent);\n        var pos_max = Math.pow(10, limit_exponent);\n        if (value === Infinity){ value = pos_max; }\n        if (value === -Infinity){ value = neg_min; }\n        if (value === 0){ value = pos_min; }\n        if (value > 0){ value = Math.max(Math.min(value, pos_max), pos_min); }\n        if (value < 0){ value = Math.max(Math.min(value, neg_max), neg_min); }\n        return value;\n    };\n\n    // Define default and shifted ranges for all axes\n    var ranges = {};\n    if (this.x_extent){\n        var base_x_range = { start: 0, end: this.layout.cliparea.width };\n        if (this.layout.axes.x.range){\n            base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n            base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n        }\n        ranges.x = [base_x_range.start, base_x_range.end];\n        ranges.x_shifted = [base_x_range.start, base_x_range.end];\n    }\n    if (this.y1_extent){\n        var base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y1.range){\n            base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n            base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n        }\n        ranges.y1 = [base_y1_range.start, base_y1_range.end];\n        ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n    }\n    if (this.y2_extent){\n        var base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y2.range){\n            base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n            base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n        }\n        ranges.y2 = [base_y2_range.start, base_y2_range.end];\n        ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n    }\n\n    // Shift ranges based on any drag or zoom interactions currently underway\n    if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.indexOf(this.id) !== -1)){\n        var anchor, scalar = null;\n        if (this.parent.interaction.zooming && typeof this.x_scale == \"function\"){\n            var current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n            var current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n            var zoom_factor = this.parent.interaction.zooming.scale;\n            var potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n            if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)){\n                zoom_factor = 1 /(Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n            } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)){\n                zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n            }\n            var new_extent_size = Math.floor(current_extent_size * zoom_factor);\n            anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n            var offset_ratio = anchor / this.layout.cliparea.width;\n            var new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n            ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n        } else if (this.parent.interaction.dragging){\n            switch (this.parent.interaction.dragging.method){\n            case \"background\":\n                ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                break;\n            case \"x_tick\":\n                if (d3.event && d3.event.shiftKey){\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                } else {\n                    anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                    scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                    ranges.x_shifted[0] = 0;\n                    ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                }\n                break;\n            case \"y1_tick\":\n            case \"y2_tick\":\n                var y_shifted = \"y\" + this.parent.interaction.dragging.method[1] + \"_shifted\";\n                if (d3.event && d3.event.shiftKey){\n                    ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                    ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                } else {\n                    anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                    scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                    ranges[y_shifted][0] = this.layout.cliparea.height;\n                    ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                }\n            }\n        }\n    }\n\n    // Generate scales and ticks for all axes, then render them\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!this[axis + \"_extent\"]){ return; }\n\n        // Base Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"])\n            .range(ranges[axis + \"_shifted\"]);\n\n        // Shift the extent\n        this[axis + \"_extent\"] = [\n            this[axis + \"_scale\"].invert(ranges[axis][0]),\n            this[axis + \"_scale\"].invert(ranges[axis][1])\n        ];\n\n        // Finalize Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"]).range(ranges[axis]);\n\n        // Render axis (and generate ticks as needed)\n        this.renderAxis(axis);\n    }.bind(this));\n\n    // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n    if (this.layout.interaction.scroll_to_zoom){\n        var zoom_handler = function(){\n            // Look for a shift key press while scrolling to execute.\n            // If not present, gracefully raise a notification and allow conventional scrolling\n            if (!d3.event.shiftKey){\n                if (this.parent.canInteract(this.id)){\n                    this.loader.show(\"Press <tt>[SHIFT]</tt> while scrolling to zoom\").hide(1000);\n                }\n                return;\n            }\n            d3.event.preventDefault();\n            if (!this.parent.canInteract(this.id)){ return; }\n            var coords = d3.mouse(this.svg.container.node());\n            var delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n            if (delta === 0){ return; }\n            this.parent.interaction = {\n                panel_id: this.id,\n                linked_panel_ids: this.getLinkedPanelIds(\"x\"),\n                zooming: {\n                    scale: (delta < 1) ? 0.9 : 1.1,\n                    center: coords[0]\n                }\n            };\n            this.render();\n            this.parent.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.parent.panels[panel_id].render();\n            }.bind(this));\n            if (this.zoom_timeout !== null){ clearTimeout(this.zoom_timeout); }\n            this.zoom_timeout = setTimeout(function(){\n                this.parent.interaction = {};\n                this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n            }.bind(this), 500);\n        }.bind(this);\n        this.zoom_listener = d3.behavior.zoom();\n        this.svg.container.call(this.zoom_listener)\n            .on(\"wheel.zoom\", zoom_handler)\n            .on(\"mousewheel.zoom\", zoom_handler)\n            .on(\"DOMMouseScroll.zoom\", zoom_handler);\n    }\n\n    // Render data layers in order by z-index\n    this.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n        this.data_layers[data_layer_id].draw().render();\n    }.bind(this));\n\n    return this;\n};\n\n\n/**\n * Render ticks for a particular axis\n * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.renderAxis = function(axis){\n\n    if ([\"x\", \"y1\", \"y2\"].indexOf(axis) === -1){\n        throw(\"Unable to render axis; invalid axis identifier: \" + axis);\n    }\n\n    var canRender = this.layout.axes[axis].render\n        && typeof this[axis + \"_scale\"] == \"function\"\n        && !isNaN(this[axis + \"_scale\"](0));\n\n    // If the axis has already been rendered then check if we can/can't render it\n    // Make sure the axis element is shown/hidden to suit\n    if (this[axis+\"_axis\"]){\n        this.svg.container.select(\"g.lz-axis.lz-\"+axis).style(\"display\", canRender ? null : \"none\");\n    }\n\n    if (!canRender){ return this; }\n\n    // Axis-specific values to plug in where needed\n    var axis_params = {\n        x: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + (this.layout.height - this.layout.margin.bottom) + \")\",\n            orientation: \"bottom\",\n            label_x: this.layout.cliparea.width / 2,\n            label_y: (this.layout.axes[axis].label_offset || 0),\n            label_rotate: null\n        },\n        y1: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + this.layout.margin.top + \")\",\n            orientation: \"left\",\n            label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        },\n        y2: {\n            position: \"translate(\" + (this.layout.width - this.layout.margin.right) + \",\" + this.layout.margin.top + \")\",\n            orientation: \"right\",\n            label_x: (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        }\n    };\n\n    // Generate Ticks\n    this[axis + \"_ticks\"] = this.generateTicks(axis);\n\n    // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n    var ticksAreAllNumbers = (function(ticks){\n        for (var i = 0; i < ticks.length; i++){\n            if (isNaN(ticks[i])){\n                return false;\n            }\n        }\n        return true;\n    })(this[axis+\"_ticks\"]);\n\n    // Initialize the axis; set scale and orientation\n    this[axis+\"_axis\"] = d3.svg.axis().scale(this[axis+\"_scale\"]).orient(axis_params[axis].orientation).tickPadding(3);\n\n    // Set tick values and format\n    if (ticksAreAllNumbers){\n        this[axis+\"_axis\"].tickValues(this[axis+\"_ticks\"]);\n        if (this.layout.axes[axis].tick_format === \"region\"){\n            this[axis+\"_axis\"].tickFormat(function(d) { return LocusZoom.positionIntToString(d, 6); });\n        }\n    } else {\n        var ticks = this[axis+\"_ticks\"].map(function(t){\n            return(t[axis.substr(0,1)]);\n        });\n        this[axis+\"_axis\"].tickValues(ticks)\n            .tickFormat(function(t, i) { return this[axis+\"_ticks\"][i].text; }.bind(this));\n    }\n\n    // Position the axis in the SVG and apply the axis construct\n    this.svg[axis+\"_axis\"]\n        .attr(\"transform\", axis_params[axis].position)\n        .call(this[axis+\"_axis\"]);\n\n    // If necessary manually apply styles and transforms to ticks as specified by the layout\n    if (!ticksAreAllNumbers){\n        var tick_selector = d3.selectAll(\"g#\" + this.getBaseId().replace(\".\",\"\\\\.\") + \"\\\\.\" + axis + \"_axis g.tick\");\n        var panel = this;\n        tick_selector.each(function(d, i){\n            var selector = d3.select(this).select(\"text\");\n            if (panel[axis+\"_ticks\"][i].style){\n                selector.style(panel[axis+\"_ticks\"][i].style);\n            }\n            if (panel[axis+\"_ticks\"][i].transform){\n                selector.attr(\"transform\", panel[axis+\"_ticks\"][i].transform);\n            }\n        });\n    }\n\n    // Render the axis label if necessary\n    var label = this.layout.axes[axis].label || null;\n    if (label !== null){\n        this.svg[axis+\"_axis_label\"]\n            .attr(\"x\", axis_params[axis].label_x).attr(\"y\", axis_params[axis].label_y)\n            .text(LocusZoom.parseFields(this.state, label));\n        if (axis_params[axis].label_rotate !== null){\n            this.svg[axis+\"_axis_label\"]\n                .attr(\"transform\", \"rotate(\" + axis_params[axis].label_rotate + \" \" + axis_params[axis].label_x + \",\" + axis_params[axis].label_y + \")\");\n        }\n    }\n\n    // Attach interactive handlers to ticks as needed\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (this.layout.interaction[\"drag_\" + axis + \"_ticks_to_scale\"]){\n            var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n            var tick_mouseover = function(){\n                if (typeof d3.select(this).node().focus == \"function\"){ d3.select(this).node().focus(); }\n                var cursor = (axis === \"x\") ? \"ew-resize\" : \"ns-resize\";\n                if (d3.event && d3.event.shiftKey){ cursor = \"move\"; }\n                d3.select(this)\n                    .style({\"font-weight\": \"bold\", \"cursor\": cursor})\n                    .on(\"keydown\" + namespace, tick_mouseover)\n                    .on(\"keyup\" + namespace, tick_mouseover);\n            };\n            this.svg.container.selectAll(\".lz-axis.lz-\" + axis + \" .tick text\")\n                .attr(\"tabindex\", 0) // necessary to make the tick focusable so keypress events can be captured\n                .on(\"mouseover\" + namespace, tick_mouseover)\n                .on(\"mouseout\" + namespace,  function(){\n                    d3.select(this).style({\"font-weight\": \"normal\"});\n                    d3.select(this).on(\"keydown\" + namespace, null).on(\"keyup\" + namespace, null);\n                })\n                .on(\"mousedown\" + namespace, function(){\n                    this.parent.startDrag(this, axis + \"_tick\");\n                }.bind(this));\n        }\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Force the height of this panel to the largest absolute height of the data in\n *   all child data layers (if not null for any child data layers)\n * @param {number} [target_height] A target height, which will be used in situations when the expected height can be\n *   pre-calculated (eg when the layers are transitioning)\n */\nLocusZoom.Panel.prototype.scaleHeightToData = function(target_height){\n    target_height = +target_height || null;\n    if (target_height === null){\n        this.data_layer_ids_by_z_index.forEach(function(id){\n            var dh = this.data_layers[id].getAbsoluteDataHeight();\n            if (+dh){\n                if (target_height === null){ target_height = +dh; }\n                else { target_height = Math.max(target_height, +dh); }\n            }\n        }.bind(this));\n    }\n    if (+target_height){\n        target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n        this.setDimensions(this.layout.width, target_height);\n        this.parent.setDimensions();\n        this.parent.panel_ids_by_y_index.forEach(function(id){\n            this.parent.panels[id].layout.proportional_height = null;\n        }.bind(this));\n        this.parent.positionPanels();\n    }\n};\n\n/**\n * Methods to set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n */\nLocusZoom.Panel.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n    }.bind(this));\n};\n/**\n * Set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n */\nLocusZoom.Panel.prototype.setAllElementStatus = function(status, toggle){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(status, toggle);\n    }.bind(this));\n};\n// TODO: Capture documentation for dynamically generated methods\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.Panel.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.Panel.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.Panel.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.Panel.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n\n/**\n * Add a \"basic\" loader to a panel\n * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n *\n *\n * @param {Boolean} show_immediately\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.addBasicLoader = function(show_immediately){\n    if (typeof show_immediately != \"undefined\"){ show_immediately = true; }\n    if (show_immediately){\n        this.loader.show(\"Loading...\").animate();\n    }\n    this.on(\"data_requested\", function(){\n        this.loader.show(\"Loading...\").animate();\n    }.bind(this));\n    this.on(\"data_rendered\", function(){\n        this.loader.hide();\n    }.bind(this));\n    return this;\n};\n"]}