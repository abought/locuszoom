{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/./esm/ext/lz-dynamic-urls.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_parseQueryParams","queryString","query","pairs","substr","split","length","pair","decodeURIComponent","_extractValues","data","mapping","reverse","ret","newMapping","keys","forEach","k","asName","_setStateFromUrlHandler","plot","stateData","applyState","_setUrlFromStateHandler","state","paramsFromUrl","window","location","search","plotWatchesUrl","callback","listener","event","urlData","addEventListener","trackExternalListener","plotUpdatesUrl","eventContext","oldParams","serializedPlotData","newParams","assign","some","paramsObj","map","encodeURIComponent","join","history","pushState","document","title","replaceState","on","all","extractValues"],"mappings":"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","file":"ext/lz-dynamic-urls.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\n * Optional LocusZoom extension: must be included separately, and after LocusZoom has been loaded\n *\n * This plugin exports helper functions, but does not modify the global registry. It does not require `LocusZoom.use`.\n *\n * Demonstrates a mechanism by which the plot can be loaded to a specific initial state based on the URL query string\n *  (and, optionally, to update the URL bar when the plot state changes, with back button support)\n *\n * This makes it possible to create \"direct links\" to a particular plot of interest (and go back to a previous state\n *  as the user interacts with the page). Optionally, there is support for custom callbacks to connect the URL to\n *  arbitrarily complex plot behaviors.\n *\n * To use in an environment without special JS build tooling, simply load the extension file as JS from a CDN (after any dependencies):\n * ```\n * <script src=\"https://cdn.jsdelivr.net/npm/locuszoom@INSERT_VERSION_HERE/dist/ext/lz-dynamic-urls.min.js\" type=\"application/javascript\"></script>\n * ```\n *\n * To use with ES6 modules, import the helper functions and use them with your layout:\n *\n * ```\n * import LzDynamicUrls from 'locuszoom/esm/ext/lz-dynamic-urls';\n * ```\n *\n * After loading, bind the plot and URL as follows:\n * ```\n * // Declares which fields in plot.state will be mapped to and from the URL, eg `plot.state.chr` -> `example.com?chrom=X`\n * const stateUrlMapping = {chr: \"chrom\", start: \"start\", end: \"end\"};\n * // Fetch initial position from the URL, or use some defaults\n * let initialState = LzDynamicUrls.paramsFromUrl(stateUrlMapping);\n * if (!Object.keys(initialState).length) {\n *     initialState = {chr: 10, start: 114550452, end: 115067678};\n * }\n * layout = LocusZoom.Layouts.get(\"plot\", \"standard_association\", {state: initialState});\n * const plot = LocusZoom.populate(\"#lz-plot\", data_sources, layout);\n * // Once the plot has been created, we can bind it to the URL as follows. This will cause the URL to change whenever\n * //  the plot region changes, or, clicking the back button in your browser will reload the last region viewed\n * LzDynamicUrls.plotUpdatesUrl(plot, stateUrlMapping);\n * LzDynamicUrls.plotWatchesUrl(plot, stateUrlMapping);\n *\n * // NOTE: If you are building a page that adds/removes plots on the fly, event listeners will be cleaned up when\n * //   the destructor `plot.destroy()` is called\n * ```\n *\n *  @module\n */\n\nfunction _serializeQueryParams(paramsObj) {\n    // Serialize an object of parameter values into a query string\n    // TODO: Improve support for array values v[]=1&v[]=2\n    return `?${\n        Object.keys(paramsObj).map(function(key) {\n            return `${encodeURIComponent(key)}=${encodeURIComponent(paramsObj[key])}`;\n        }).join('&')}`;\n}\n\nfunction _parseQueryParams(queryString) {\n    // Parse a query string into an object of parameter values.\n    //   Does not attempt any type coercion; all values are, therefore, strings.\n    // TODO future: Support arrays / params that specify more than one value\n    const query = {};\n    if (queryString) {\n        const pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n        for (let i = 0; i < pairs.length; i++) {\n            const pair = pairs[i].split('=');\n            query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n        }\n    }\n    return query;\n}\n\n// A useful helper function for serializing values from a provided object\nfunction _extractValues(data, mapping, reverse) {\n    // Use the mapping to convert between {stateField: urlParam} (or the reverse). Any fields not referenced in\n    //  the \"key\" side of the mapping will be omitted from the return value.\n    // Likewise, will omit any requested keys that the source side of the mapping has no information for\n    reverse = reverse || false;\n\n    const ret = {};\n    let newMapping = mapping;\n    if (reverse) {\n        newMapping = {};\n        Object.keys(mapping).forEach(function(k) {\n            newMapping[mapping[k]] = k;\n        });\n    }\n\n    Object.keys(newMapping).forEach(function(k) {\n        const asName = newMapping[k];\n        if (Object.prototype.hasOwnProperty.call(data, k)) {\n            ret[asName] = data[k];\n        }\n\n    });\n    return ret;\n}\n\nfunction _setStateFromUrlHandler(plot, stateData) {\n    // A default way to deal with URL changes: push all the params as state into plot and rerender\n    // More complex handlers are possible- example, URL parameters could be used to add or remove data layers\n    plot.applyState(stateData);\n}\n\nfunction _setUrlFromStateHandler(plot, mapping) {\n    // Serialize and return basic query params based solely on information from plot.state\n    // More complex handlers are possible- the serializer can extract any information desired because it is given\n    //  a direct reference to the plot object\n\n    // This default method does not use the eventContext data, because so many things change plot.state without\n    //  officially triggering an event.\n    return _extractValues(plot.state, mapping);\n}\n\n/**\n * Extract plot parameters from the URL query string. Very useful for setting up the plot on initial page load.\n * @param {object} mapping How to map elements of plot state to URL param fields. Hash of\n *      {plotFieldName: urlParamName} entries (both values should be unique)\n * @param {string} [queryString='window.location.search'] The query string to parse\n * @returns {object} Plot parameter values\n */\nfunction paramsFromUrl(mapping, queryString) {\n    // Internal helper function: second argument only used for unit testing\n    queryString = queryString || window.location.search;\n    const queryParams = _parseQueryParams(queryString);\n    return _extractValues(queryParams, mapping, true);\n}\n\n/**\n * Allows the plot to monitor changes in the URL and take action when the URL changes.\n *\n * For example, this enables using the browser back button to jump to a previous plot after user interaction.\n *\n * @param {Plot} plot A reference to the LZ plot\n * @param {object} mapping How to map elements of plot state to URL param fields. Hash of\n *      {plotFieldName: urlParamName} entries (both values should be unique)\n * @param {function} [callback] Specify how the plot acts on information read in from query params.\n *   The default behavior is to push the data into `plot.state`\n *   Signature is function(plot, plotDataFromQueryString)\n * @returns {function} The function handle for the new listener (allows cleanup if plot is removed later)\n */\nfunction plotWatchesUrl(plot, mapping, callback) {\n    callback = callback || _setStateFromUrlHandler;\n\n    const listener = function (event) {\n        const urlData = paramsFromUrl(mapping);\n        // Tell the plot what to do with the params extracted from the URL\n        callback(plot, urlData);\n    };\n    window.addEventListener('popstate', listener);\n    plot.trackExternalListener(window, 'popstate', listener);\n    return listener;\n}\n\n/**\n * Update the URL whenever the plot state changes\n * @param {Plot} plot A reference to the LZ plot\n * @param {object} mapping How to map elements of plot state to URL param fields. Hash of\n *      {plotFieldName: urlParamName} entries (both values should be unique)\n * @param {function} [callback] Specify how plot data will be serialized into query params\n *   The default behavior is to extract all the URL params from plot.state as the only source.\n *   Signature is function(plot, mapping, eventContext)\n * @returns {function} The function handle for the new listener (allows cleanup if plot is removed later)\n * @listens event:state_changed\n */\nfunction plotUpdatesUrl(plot, mapping, callback) {\n    callback = callback || _setUrlFromStateHandler;\n    // Note: this event only fires when applyState receives *new* information that would trigger a rerender.\n    // Plot state is sometimes changed without the event being fired.\n    const listener = function (eventContext) {\n        const oldParams = _parseQueryParams(window.location.search);\n        // Apply custom serialization to convert plot data to URL params\n        const serializedPlotData = callback(plot, mapping, eventContext);\n        const newParams = Object.assign({}, oldParams, serializedPlotData);\n\n        const update = Object.keys(newParams).some(function (k) {\n            // Not every state change would affect the URL. Allow type coercion since query is a string.\n            // eslint-disable-next-line eqeqeq\n            return (oldParams[k] != newParams[k]);\n        });\n        if (update) {\n            const queryString = _serializeQueryParams(newParams);\n\n            if (Object.keys(oldParams).length) {\n                history.pushState({}, document.title, queryString);\n            } else {\n                // Prevent broken back behavior on first page load: the first time query params are set,\n                //  we don't generate a separate history entry\n                history.replaceState({}, document.title, queryString);\n            }\n\n        }\n    };\n    plot.on('state_changed', listener);\n    return listener;\n}\n\n// Slight build quirk: we use a single webpack file for all modules, but `libraryTarget` expects the entire\n//  module to be exported as `default` in <script> tag mode.\nconst all = {\n    paramsFromUrl,\n    extractValues: _extractValues,\n    plotUpdatesUrl,\n    plotWatchesUrl,\n};\n\nexport default all;\nexport { paramsFromUrl, _extractValues as extractValues, plotUpdatesUrl, plotWatchesUrl };\n"],"sourceRoot":""}