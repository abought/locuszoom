{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/external \"d3\"","webpack://[name]/./esm/ext/lz-forest-track.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","d3","install","LocusZoom","BaseDataLayer","DataLayers","default_layout","point_size","point_shape","color","fill_opacity","y_axis","axis","id_field","confidence_intervals","start_field","end_field","Forest","layout","Layouts","merge","super","arguments","tooltip","x_center","this","parent","x_scale","data","x_axis","field","y_scale","y_center","resolveScalableParameter","offset","Math","sqrt","PI","x_min","x_max","y_min","y_max","track_data","_applyFilters","fields","includes","ci_selection","svg","group","selectAll","ci_transform","x","y","isNaN","ci_width","ci_height","enter","append","attr","getElementId","height","exit","remove","points_selection","initial_y","shape","size","type","shape_name","factory_name","charAt","toUpperCase","slice","on","element_data","emit","applyBehaviors","add","axis_config","ci_config","min","max","_getDataExtent","dimension","config","Error","category_field","id","map","item","index","text","field_to_add","floor","ceiling","length","use"],"mappings":"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","file":"ext/lz-forest-track.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = d3;","/**\n * Forest plot track, designed for use with PheWAS style datasets.\n *   This is not part of the core LocusZoom library, but can be included as a standalone file.\n *\n * ### Features provided\n * * {@link module:LocusZoom_DataLayers~forest}\n * * {@link module:LocusZoom_DataLayers~category_forest}\n *\n * ### Loading and usage\n * The page must incorporate and load all libraries before this file can be used, including:\n * - LocusZoom\n *\n * To use in an environment without special JS build tooling, simply load the extension file as JS from a CDN (after any dependencies):\n * ```\n * <script src=\"https://cdn.jsdelivr.net/npm/locuszoom@INSERT_VERSION_HERE/dist/ext/lz-forest-track.min.js\" type=\"application/javascript\"></script>\n * ```\n *\n * To use with ES6 modules, the plugin must be loaded and registered explicitly before use:\n * ```\n * import LocusZoom from 'locuszoom';\n * import ForestTrack from 'locuszoom/esm/ext/lz-forest-track';\n * LocusZoom.use(ForestTrack);\n * ```\n *\n * Then use the layouts made available by this extension. (see demos and documentation for guidance)\n *\n * @module\n */\nimport * as d3 from 'd3';\n\n\nfunction install (LocusZoom) {\n    const BaseDataLayer = LocusZoom.DataLayers.get('BaseDataLayer');\n    const default_layout = {\n        point_size: 40,\n        point_shape: 'square',\n        color: '#888888',\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2,\n        },\n        id_field: 'id',\n        confidence_intervals: {\n            start_field: 'ci_start',\n            end_field: 'ci_end',\n        },\n    };\n\n    /**\n     * (**extension**) Forest Data Layer\n     * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n     *  and extent in advance.\n     *\n     * If you are using dynamically fetched data, consider using `category_forest` instead.\n     * @alias module:LocusZoom_DataLayers~forest\n     * @see module:LocusZoom_DataLayers~BaseDataLayer\n     * @see {@link module:ext/lz-forest-track} for required extension and installation instructions\n     */\n    class Forest extends BaseDataLayer {\n        /**\n         * @param {number|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.point_size=40] The size (area) of the point for each datum\n         * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.point_shape='square'] Shape of the point for each datum. Supported values map to the d3 SVG Symbol Types (i.e.: \"circle\", \"cross\", \"diamond\", \"square\", \"triangle\", \"star\", and \"wye\"), plus \"triangledown\".\n         * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.color='#888888'] The color of each point\n         * @param {number|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.fill_opacity=1] Opacity (0..1) for each datum point\n         * @param {string} layout.x_axis.field A field specifying the x-coordinate of the mark (eg square)\n         * @param {string} layout.y_axis.field A field specifying the y-coordinate. Use `category_forest` if you just want to\n         *  lay out a series of forest markings in order without worrying about this.\n         * @param [layout.confidence_intervals.start_field='ci_start'] The field that specifies the start of confidence interval\n         * @param [layout.confidence_intervals.end_field='ci_end'] The field that specifies the start of confidence interval\n         */\n        constructor(layout) {\n            layout = LocusZoom.Layouts.merge(layout, default_layout);\n            super(...arguments);\n        }\n\n        _getTooltipPosition(tooltip) {\n            const x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n            const y_scale = `y${this.layout.y_axis.axis}_scale`;\n            const y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n\n            const point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n            const offset = Math.sqrt(point_size / Math.PI);\n            return {\n                x_min: x_center - offset,\n                x_max: x_center + offset,\n                y_min: y_center - offset,\n                y_max: y_center + offset,\n            };\n        }\n\n        /**\n         * @fires event:element_clicked\n         */\n        render() {\n            // Apply filters to only render a specified set of points\n            const track_data = this._applyFilters();\n\n            const x_scale = 'x_scale';\n            const y_scale = `y${this.layout.y_axis.axis}_scale`;\n\n            // Generate confidence interval paths if fields are defined\n            if (this.layout.confidence_intervals\n                && this.layout.fields.includes(this.layout.confidence_intervals.start_field)\n                && this.layout.fields.includes(this.layout.confidence_intervals.end_field)) {\n                // Generate a selection for all forest plot confidence intervals\n                const ci_selection = this.svg.group\n                    .selectAll('rect.lz-data_layer-forest.lz-data_layer-forest-ci')\n                    .data(track_data, (d) => {\n                        return d[this.layout.id_field];\n                    });\n\n                const ci_transform = (d) => {\n                    let x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                    let y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                    if (isNaN(x)) {\n                        x = -1000;\n                    }\n                    if (isNaN(y)) {\n                        y = -1000;\n                    }\n                    return `translate(${x}, ${y})`;\n                };\n                const ci_width = (d) => {\n                    return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                        - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                };\n                const ci_height = 1;\n                // Create confidence interval rect elements\n                ci_selection.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-forest lz-data_layer-forest-ci')\n                    .attr('id', (d) => `${this.getElementId(d)}_ci`)\n                    .attr('transform', `translate(0, ${isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height})`)\n                    .merge(ci_selection)\n                    .attr('transform', ci_transform)\n                    .attr('width', ci_width)\n                    .attr('height', ci_height);\n\n                // Remove old elements as needed\n                ci_selection.exit()\n                    .remove();\n            }\n\n            // Generate a selection for all forest plot points\n            const points_selection = this.svg.group\n                .selectAll('path.lz-data_layer-forest.lz-data_layer-forest-point')\n                .data(track_data, (d) => {\n                    return d[this.layout.id_field];\n                });\n\n            // Create elements, apply class, ID, and initial position\n            const initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n\n            // Generate new values (or functions for them) for position, color, size, and shape\n            const transform = (d) => {\n                let x = this.parent[x_scale](d[this.layout.x_axis.field]);\n                let y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)) {\n                    x = -1000;\n                }\n                if (isNaN(y)) {\n                    y = -1000;\n                }\n                return `translate(${x}, ${y})`;\n            };\n\n            const fill = (d, i) => this.resolveScalableParameter(this.layout.color, d, i);\n            const fill_opacity = (d, i) => this.resolveScalableParameter(this.layout.fill_opacity, d, i);\n\n            const shape = d3.symbol()\n                .size((d, i) => this.resolveScalableParameter(this.layout.point_size, d, i))\n                .type((d, i) => {\n                    // Legend shape names are strings; need to connect this to factory. Eg circle --> d3.symbolCircle\n                    const shape_name = this.resolveScalableParameter(this.layout.point_shape, d, i);\n                    const factory_name = `symbol${shape_name.charAt(0).toUpperCase() + shape_name.slice(1)}`;\n                    return d3[factory_name] || null;\n                });\n\n            points_selection.enter()\n                .append('path')\n                .attr('class', 'lz-data_layer-forest lz-data_layer-forest-point')\n                .attr('id', (d) => this.getElementId(d))\n                .attr('transform', `translate(0, ${initial_y})`)\n                .merge(points_selection)\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n\n            // Remove old elements as needed\n            points_selection.exit()\n                .remove();\n\n            // Apply behaviors to points\n            this.svg.group\n                .on('click.event_emitter', (element_data) => {\n                    this.parent.emit('element_clicked', element_data, true);\n                }).call(this.applyBehaviors.bind(this));\n        }\n    }\n\n    /**\n     * (**extension**) A y-aligned forest plot in which the y-axis represents item labels, which are dynamically\n     *   chosen when data is loaded. Each item is assumed to include both data and confidence intervals.\n     *   This allows generating forest plots without defining the layout in advance.\n     * @alias module:LocusZoom_DataLayers~category_forest\n     * @see module:LocusZoom_DataLayers~BaseDataLayer\n     * @see {@link module:ext/lz-forest-track} for required extension and installation instructions\n     */\n    class CategoryForest extends Forest {\n        _getDataExtent(data, axis_config) {\n            // In a forest plot, the data range is determined by *three* fields (beta + CI start/end)\n            const ci_config = this.layout.confidence_intervals;\n            if (ci_config\n                && this.layout.fields.includes(ci_config.start_field)\n                && this.layout.fields.includes(ci_config.end_field)) {\n                const min = (d) => +d[ci_config.start_field];\n                const max = (d) => +d[ci_config.end_field];\n                return [d3.min(data, min), d3.max(data, max)];\n            }\n\n            // If there are no confidence intervals set, then range must depend only on a single field\n            return super._getDataExtent(data, axis_config);\n        }\n\n        getTicks(dimension, config) { // Overrides parent method\n            if (!['x', 'y1', 'y2'].includes(dimension)) {\n                throw new Error(`Invalid dimension identifier ${dimension}`);\n            }\n\n            // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n            // Also assumes that every tick gets assigned a unique matching label\n            const axis_num = this.layout.y_axis.axis;\n            if (dimension === (`y${axis_num}`)) {\n                const category_field = this.layout.y_axis.category_field;\n                if (!category_field) {\n                    throw new Error(`Layout for ${this.layout.id} must specify category_field`);\n                }\n\n                return this.data.map((item, index) => ({ y: index + 1, text: item[category_field] }));\n            } else {\n                return [];\n            }\n        }\n\n        applyCustomDataMethods () {\n            // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n            //  correct extents.\n            const field_to_add = this.layout.y_axis.field;\n            if (!field_to_add) {\n                throw new Error(`Layout for ${this.layout.id} must specify yaxis.field`);\n            }\n\n            this.data = this.data.map((item, index) => {\n                item[field_to_add] = index + 1;\n                return item;\n            });\n            // Update axis extents based on one label for every point (with a bit of padding above and below)\n            this.layout.y_axis.floor = 0;\n            this.layout.y_axis.ceiling = this.data.length + 1;\n            return this;\n        }\n    }\n\n    LocusZoom.DataLayers.add('forest', Forest);\n    LocusZoom.DataLayers.add('category_forest', CategoryForest);\n}\n\nif (typeof LocusZoom !== 'undefined') {\n    // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()\n    // eslint-disable-next-line no-undef\n    LocusZoom.use(install);\n}\n\nexport default install;\n"],"sourceRoot":""}